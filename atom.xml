<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>草庙村</title>
  <icon>https://www.gravatar.com/avatar/f7366960e7cb7f9c581ad6e231572833</icon>
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shawdanon.github.io/"/>
  <updated>2019-07-28T05:15:18.298Z</updated>
  <id>https://shawdanon.github.io/</id>
  
  <author>
    <name>鬼厉</name>
    <email>me@imtxp.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人性的弱点</title>
    <link href="https://shawdanon.github.io/read/weakness-of-human-nature/"/>
    <id>https://shawdanon.github.io/read/weakness-of-human-nature/</id>
    <published>2019-06-24T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.298Z</updated>
    
    <content type="html"><![CDATA[<p>交际关系？</p><a id="more"></a><h2 id="2019-06-25-记"><a href="#2019-06-25-记" class="headerlink" title="2019-06-25 记"></a>2019-06-25 记</h2><p>又是一本断断续续看完的书，最印象深刻的是多夸奖，少批评。就像经常听到的一句话“沟通 70%是情绪，30%才是事情。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;交际关系？&lt;/p&gt;
    
    </summary>
    
      <category term="兴趣" scheme="https://shawdanon.github.io/categories/%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="阅读笔记" scheme="https://shawdanon.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>黑客与画家</title>
    <link href="https://shawdanon.github.io/read/hackers-and-painters/"/>
    <id>https://shawdanon.github.io/read/hackers-and-painters/</id>
    <published>2019-06-20T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.297Z</updated>
    
    <content type="html"><![CDATA[<p>一群不一样的人…</p><a id="more"></a><h2 id="2019-06-21-记"><a href="#2019-06-21-记" class="headerlink" title="2019-06-21 记"></a>2019-06-21 记</h2><p>零零碎碎读完这本书，讲真没有太大的收货或者感触，对每一章的印象也不是太深，唯一的感觉就是这本书在讲极致的人做极致的事用极致的编程语言。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一群不一样的人…&lt;/p&gt;
    
    </summary>
    
      <category term="兴趣" scheme="https://shawdanon.github.io/categories/%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="阅读笔记" scheme="https://shawdanon.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>主意</title>
    <link href="https://shawdanon.github.io/arrangement/my-idea/"/>
    <id>https://shawdanon.github.io/arrangement/my-idea/</id>
    <published>2019-06-12T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.296Z</updated>
    
    <content type="html"><![CDATA[<p>我的一些想法…</p><a id="more"></a><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="20170619"><a href="#20170619" class="headerlink" title="20170619"></a>20170619</h3><ol><li>习惯养成类软件</li><li>日程管理类软件</li></ol><h3 id="过往"><a href="#过往" class="headerlink" title="过往"></a>过往</h3><ol><li>记账类软件</li><li>职业测评类网站</li><li>错题本类软件</li><li>书籍交换类网站</li><li>书单分享类网站</li><li>家用医疗软件</li><li>资源回收类软件</li></ol><h2 id="阅读相关"><a href="#阅读相关" class="headerlink" title="阅读相关"></a>阅读相关</h2><p>一些阅读相关的具体想法</p><h3 id="20170620"><a href="#20170620" class="headerlink" title="20170620"></a>20170620</h3><p>今年开始喜欢上了阅读，再搜罗之下，先后阅读了《Web 全栈工程师的自我修养》和《腾讯传》感觉收获还是很多的。 进入正题，我所用的是多看阅读软件，阅读器的功能：能调背景、调排版（行段边距、缩进）、能更改字体样式（能把简体转化为繁体，不知道能不能把繁体转化为简体）、能调整字体大小、夜间模式、护眼模式、语言阅读、自动翻页、书签、分享、划线做笔记、转换扫描 pdf 为文字、常用设置（翻页动画、注释样式、音量键翻页、长按文字划线、启动后继续上次阅读、屏幕关闭时间、显示系统状态、显示章节名、显示时间电量）。用了有一段时间了，总结下优缺点。优点：1、能方便的转换扫描版 PDF 为文字（虽然并不完美）。2、方便的划线做笔记和导出笔记功能。3、语音阅读功能。4、电脑 WiFi 传书功能。缺点：1、图书商城内容不够多。2、没有可以定制频道。3、杂志类应该采用订阅模式阅读更好。4、没有很好的社交化、完全可以内置聊天功能、书单分享功能、读书感想功能。</p><h3 id="20170621"><a href="#20170621" class="headerlink" title="20170621"></a>20170621</h3><p>我想做的一个软件：以图书馆为中心，帮助大学生养成阅读习惯，了解图书的妙用。内设图书分享，社交聊天，等级（阅历）提升，评选学期网络学霸等功能</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的一些想法…&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://shawdanon.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="整理" scheme="https://shawdanon.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>富爸爸 财务自由之路</title>
    <link href="https://shawdanon.github.io/read/cashflow-quadrant/"/>
    <id>https://shawdanon.github.io/read/cashflow-quadrant/</id>
    <published>2019-05-22T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.297Z</updated>
    
    <content type="html"><![CDATA[<p>ESBI，我们一生的财富…</p><a id="more"></a><h2 id="2019-05-23-记"><a href="#2019-05-23-记" class="headerlink" title="2019-05-23 记"></a>2019-05-23 记</h2><p>这本书听了一遍很有感触，然后又阅读了一遍，才算有了印象。<br>通过这本书认识到了 ESBI（Employee 雇员、SelfEmployee 自雇者、BusinessOwner 企业拥有者、Investor 投资家）四类人对金钱的看法。目前我还属于 E 象限，也会有很少部分收入来自 I 象限。大学当会长是有 S 象限的感觉，深刻体会到自己什么是都亲力亲为的性格缺陷。<br>然后是重点讲了 I 象限的 7 种境界，0 级：没钱者（支出大于收入）；1 级：借钱者（靠消费未来的钱度日）；2 级：储蓄者（收入大于支出，会存钱到稳定机构，如银行）；3 级：‘聪明的’投资者（3A 会找人代理投资不善学习投资知识、3B 是在投资中失败后过于谨慎涨买跌卖的人、3C 是侥幸心理投资的投机者）；4 级：长期投资者（有长期计划、有明确的目标、有理财知识将钱分散投资在各种投资产品上的人）；5 级：老练的投资者（有庞大的财力和丰富的财务经验，集中式投资的人）；6 级：资本家（同时是优秀的企业家和投资者，能提前预感经济走势的人）。<br>我目前应该处于 2 级希望成为 4 级，加油吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ESBI，我们一生的财富…&lt;/p&gt;
    
    </summary>
    
      <category term="兴趣" scheme="https://shawdanon.github.io/categories/%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="阅读笔记" scheme="https://shawdanon.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于umi的半自动化脚本</title>
    <link href="https://shawdanon.github.io/2019/umi-script/"/>
    <id>https://shawdanon.github.io/2019/umi-script/</id>
    <published>2019-05-18T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.296Z</updated>
    
    <content type="html"><![CDATA[<p>方便快速生成 servers/mock/models…</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为使用使用 umi 和 dva 所以会大量写 servers/mock/models 文件，上百个接口复制起来还是很麻烦的，所以写个脚本自动生成 servers/mock/models 文件。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过 node 读取 swagger 数据，获取接口信息，再使用模板字符串拼接，然后通过 node 写入到文件中。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ol><li>为了方便二次使用，考虑设置配置文件，配置文件主要用来设置输入和输出的配置，输入是 swagger 的 url，输出是生成的文件名、文件里包含的模块和文件类型（servers/mock/models）。</li><li>同样是为了方便二次使用，需要设置 servers/mock/models 的模板字符串生成方法。</li><li>准备工作完毕（其实是写完了才分离出来的），开始写主体。首先需要请求到数据，通过 axios 请求配置文件中的 url 获取到 swagger 的数据。</li><li>接下来需要创建一个存放我们文件的文件夹，我把它创建在根目录，并且为了防止二次执行失败，需要先检查更目录是否有我们需要的文件夹。</li><li>有了存放文件的文件夹，就需要往里面写入我们需要的文件了，通过遍历配置项文件里包含的模块，可以生成我们需要的文件。</li><li>生成文件前，需要把 swagger 里的数据取出来传入之前设置的模板字符串生成方法中得到文件内容。</li></ol><p>整个流程大概就是这样，其中又遇到接口名相同的问题，因为我的接口名取的<code>/</code>最后一个名字，然后做了了重名处理，在名字后面加<code>_copy</code>，有点不优雅，哈哈。其实也可以用接口，把<code>/</code>换成<code>_</code>不过可能会太长。还有就是我想可以做成可视化的话自己可以通过界面配置接口名。大概像 easy-mock 那样，不过不仅仅生成 mock 文件。这个项目 mock 和 models 处理的不够好还需要优化。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/ShawDanon/txp-swagger" target="_blank" rel="noopener">txp-swagger</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;方便快速生成 servers/mock/models…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://shawdanon.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>记一次项目重构</title>
    <link href="https://shawdanon.github.io/2019/restructure/"/>
    <id>https://shawdanon.github.io/2019/restructure/</id>
    <published>2019-05-08T16:00:00.000Z</published>
    <updated>2019-07-28T07:09:20.646Z</updated>
    
    <content type="html"><![CDATA[<p>代码惨不忍睹…</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>1、一个临时赶出来的项目。<br>2、在都不熟悉 ant design pro 的情况下，甚至有的同学还不熟悉 react，大概经手 5 个同学一起写出来的项目。<br>3、没有做规划直接开始写代码。<br>4、为了方便快捷直接去除了 ant design pro 代码检查。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1、由于是并行开发，分工是按照模块来分的，导致前面几个模块和后面几个模块相同功能的组件会写成两份（最常见的是表格组件），当需求有修改的同时不方便统一做修改。<br>2、代码格式没有限制，风格各异，会出现一些莫名其妙的错误，阅读成本高。<br>3、没有约定全局样式、全局变量（版本号等）导致修改成本很高。<br>4、权限设计过于简单，只适用于菜单。<br>5、Tab 切换设计错误，导致从列表页到详情页后返回不能是刚才的 tab。（这里应该设计成路由）<br>6、组件中夹杂着数据处理，逻辑不明确，导致修改成本高。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>1、解决项目代码格式不规范问题。（需要 eslint、stylelint 工具规范检查、git 提交前验证）<br>2、解决项目组件使用不统一问题。（同一功能组件存在两个人写的）<br>3、解决权限管理问题（目前是菜单权限，需要控制到按钮权限）<br>4、解决埋点问题<br>5、优化：使用 ts 来写，利用 d.ts 来优化开发体验，提示语等。<br>6、解决 tab 路由问题<br>7、解决 ui 组件和逻辑分离问题 1、解决项目代码格式不规范问题。（需要 eslint、stylelint 工具规范检查、git 提交前验证）<br>2、解决项目组件使用不统一问题。（同一功能组件存在两个人写的）<br>3、解决权限管理问题（目前是菜单权限，需要控制到按钮权限）<br>4、解决埋点问题<br>5、优化：使用 ts 来写，利用 d.ts 来优化开发体验，提示语等。<br>6、解决 tab 路由问题<br>7、解决 ui 组件和逻辑分离问题</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>1、搭项目：基于 umi，使用 eslint、stylelint、tslint 检查，pretter 格式化，使用 ts 开发，支持 mock 数据</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码惨不忍睹…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://shawdanon.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>reactNative</title>
    <link href="https://shawdanon.github.io/2019/react-native/"/>
    <id>https://shawdanon.github.io/2019/react-native/</id>
    <published>2019-04-07T16:00:00.000Z</published>
    <updated>2019-07-28T06:24:38.949Z</updated>
    
    <content type="html"><![CDATA[<p>感受用 react-native 写 app…</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Mac-上安卓-App-开发"><a href="#Mac-上安卓-App-开发" class="headerlink" title="Mac 上安卓 App 开发"></a>Mac 上安卓 App 开发</h3><p>必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 JDK 和 Android Studio。<br>其中大部分安装在 <a href="../flutter">flutter</a> 已有。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>运行<code>react-native init [项目名]</code>在当前目录创建项目</p><h2 id="运行调试"><a href="#运行调试" class="headerlink" title="运行调试"></a>运行调试</h2><p>在项目根目录运行<code>react-native run-android</code>启动项目</p><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>双击 r 刷新</p><h3 id="真机"><a href="#真机" class="headerlink" title="真机"></a>真机</h3><p>摇一摇手机呼出调试面板，点击<code>Enable Hot Reloading</code>启用热加载（Ps：需要保证电脑和手机在同一网络中）。</p><h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><h3 id="生成一个签名密钥"><a href="#生成一个签名密钥" class="headerlink" title="生成一个签名密钥"></a>生成一个签名密钥</h3><p>在终端输入命令<code>keytool -genkeypair -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</code>，根据提示输入密码、信息等，看到提示说是否正确是填入<code>y</code>回车，就能在当前目录生成你的签名密钥了，这个时候终端会提示让你输入命令迁移到新版本密钥，根据提示输入<code>keytool -importkeystore -srckeystore my-release-key.keystore -destkeystore my-release-key.keystore -deststoretype pkcs12</code>，执行完当前目录会多出一个.old 的文件（原来密钥的备份文件）。</p><h3 id="设置-gradle-变量"><a href="#设置-gradle-变量" class="headerlink" title="设置 gradle 变量"></a>设置 gradle 变量</h3><p>首先把 my-release-key.keystore 文件（你的密钥文件）放到你工程中的 android/app 文件夹下。</p><p>编辑~/.gradle/gradle.properties（全局配置，对所有项目有效）或是项目目录/android/gradle.properties（项目配置，只对所在项目有效）。如果没有 gradle.properties 文件你就自己创建一个，添加如下的代码（注意把其中的****替换为相应密码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class="line">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class="line">MYAPP_RELEASE_STORE_PASSWORD=*****</span><br><span class="line">MYAPP_RELEASE_KEY_PASSWORD=*****</span><br></pre></td></tr></table></figure><h3 id="把签名配置加入到项目的-gradle-配置中"><a href="#把签名配置加入到项目的-gradle-配置中" class="headerlink" title="把签名配置加入到项目的 gradle 配置中"></a>把签名配置加入到项目的 gradle 配置中</h3><p>编辑你项目目录下的 android/app/build.gradle，添加如下的签名配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123; ... &#125;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="keyword">if</span> (project.hasProperty(<span class="string">'MYAPP_RELEASE_STORE_FILE'</span>)) &#123;</span><br><span class="line">                storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class="line">                storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class="line">                keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class="line">                keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//这个必须写在buildTypes前面要不buildTypes读取不到signingConfigs会报错</span></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            ...</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="生成发行-APK-包"><a href="#生成发行-APK-包" class="headerlink" title="生成发行 APK 包"></a>生成发行 APK 包</h3><p>只需在终端中运行以下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd android</span><br><span class="line">./gradlew assembleRelease</span><br></pre></td></tr></table></figure><p>生成的 APK 文件位于 android/app/build/outputs/apk/release/app-release.apk，它已经可以用来发布了。</p><h2 id="开发时的问题"><a href="#开发时的问题" class="headerlink" title="开发时的问题"></a>开发时的问题</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>不能写 css 文件，需要在 js 中以对象的形式来描述 css，但是没有代码提示。</p><p>解决方案：添加一个中间文件来处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; StyleSheet <span class="keyword">as</span> RnStyleSheet, ViewStyle, TextStyle, ImageStyle &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line">type StyleProps = Partial&lt;ViewStyle | TextStyle | ImageStyle&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> StyleSheet = &#123;</span><br><span class="line">  create(styles: &#123; [className: string]: StyleProps &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> RnStyleSheet.create(styles);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>引入这个文件就有代码提示了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; StyleSheet &#125; <span class="keyword">from</span> <span class="string">'./utils/utils.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>把组件放入目录中引入会报错<code>The development server returned response error code: 500</code>。</p><p>解决方案：组件放在根目录（感觉只是临时解决）。</p><h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><p>重新创建 react native 项目后，gradle 可能更新，下载很慢。<br>解决方案：1、科学上网。2、安装你原来能够运行的 react native 版本。<code>react-native init demo --verbose --version 0.59.4</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://reactnative.cn/" target="_blank" rel="noopener">React Native 中文网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感受用 react-native 写 app…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://shawdanon.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>macOS软件折腾记</title>
    <link href="https://shawdanon.github.io/2019/macOS/"/>
    <id>https://shawdanon.github.io/2019/macOS/</id>
    <published>2019-03-13T16:00:00.000Z</published>
    <updated>2019-07-28T07:10:02.299Z</updated>
    
    <content type="html"><![CDATA[<p>快买 mac mini 一个月了，记录下使用体验和常用软件安装…</p><a id="more"></a><h2 id="需要解决的功能"><a href="#需要解决的功能" class="headerlink" title="需要解决的功能"></a>需要解决的功能</h2><ol><li>通过编辑器快速打开项目</li></ol><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="zip-类型软件（双击解压，将程序拖到应用程序即可）"><a href="#zip-类型软件（双击解压，将程序拖到应用程序即可）" class="headerlink" title="zip 类型软件（双击解压，将程序拖到应用程序即可）"></a>zip 类型软件（双击解压，将程序拖到应用程序即可）</h3><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a>：编辑器<br><a href="https://www.iterm2.com/" target="_blank" rel="noopener">item2</a>：终端<br><a href="https://github.com/2ndalpha/gasmask" target="_blank" rel="noopener">Gas Mask</a>：修改 host<br><a href="http://www.android-studio.org/" target="_blank" rel="noopener">Android Studio 中文网</a>：安卓开发<br><a href="https://github.com/newmarcel/KeepingYouAwake" target="_blank" rel="noopener">KeepingYouAwake</a>：可保证系统不自动休眠<br><a href="https://justgetflux.com/" target="_blank" rel="noopener">f.lux</a>：调节显示器色温，护眼，尤其是早上起来屏幕实在是刺眼<br><a href="http://freemacsoft.net/appcleaner/" target="_blank" rel="noopener">AppCleaner</a>：卸载软件</p><h3 id="dmg-类型软件（双击安装）"><a href="#dmg-类型软件（双击安装）" class="headerlink" title="dmg 类型软件（双击安装）"></a>dmg 类型软件（双击安装）</h3><p><a href="https://developer.android.google.cn/studio/" target="_blank" rel="noopener">Android Studio 官网|科学上网</a>：安卓开发<br><a href="https://github.com/getlantern/download/wiki" target="_blank" rel="noopener">Lantern</a>：科学上网<br><a href="https://pqrs.org/osx/karabiner/index.html" target="_blank" rel="noopener">Karabiner Element</a>：键盘设置<br><a href="https://www.qbittorrent.org/" target="_blank" rel="noopener">qBittorrent</a>：下载工具，下 magnet<br><a href="https://mac.eltima.com/download-manager.html" target="_blank" rel="noopener">Folx 5|科学上网</a>：下载工具，下 http<br><a href="https://iina.io/" target="_blank" rel="noopener">IINA</a>：视频播放器<br>Parallels Desktop：Windows 虚拟机<br>CleanMyMac X：系统管理<br><a href="https://im.qq.com/download/" target="_blank" rel="noopener">QQ</a>、<a href="https://mac.weixin.qq.com/?t=mac&amp;lang=zh_CN" target="_blank" rel="noopener">微信</a>、<a href="https://tms.dingtalk.com/markets/dingtalk/download?spm=a3140.8196062.###31602.8.65f85c3d5uaOTy&amp;source=1001&amp;lwfrom=2017120202091367000000111" target="_blank" rel="noopener">钉钉</a>、<a href="https://music.163.com/##/download" target="_blank" rel="noopener">网易云音乐</a>、<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">谷歌浏览器|科学上网</a>、<a href="https://mac.pomotodo.com/" target="_blank" rel="noopener">番茄土豆</a>、<a href="https://pan.baidu.com/download##pan" target="_blank" rel="noopener">百度网盘</a>、<a href="https://www.xunlei.com/" target="_blank" rel="noopener">迅雷</a>、<a href="http://mac.wps.cn/" target="_blank" rel="noopener">WPS</a></p><p>Ps：科学上网下载速度慢可以复制下载链接到迅雷下载</p><h3 id="应用商店"><a href="#应用商店" class="headerlink" title="应用商店"></a>应用商店</h3><p>Xcode：mac 开发<br>Thor：一键直达<br>Alfred：应用启动<br>RunCat：菜单栏显示奔跑的小猫，CPU 占用率越高跑地越快</p><h3 id="命令行软件"><a href="#命令行软件" class="headerlink" title="命令行软件"></a>命令行软件</h3><p>homebrew：包管理工具<br>git：版本管理<br>nvm：node 版本管理工具<br>node：前端开发</p><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>查看帮助信息：<code>brew help</code>。<br>查看版本：<code>brew -v</code>。<br>更新 Homebrew：<code>brew update</code>。<br>安装软件包：<code>brew install [包名]</code>。<br>查询可更新的包：<code>brew outdated</code>。<br>更新包：<code>rew upgarde //更新所有包</code>、<code>brew upgarde [包名] //更新指定包</code>。<br>清理旧版本：<code>brew cleanup //清理所有包的旧版本</code>、<code>brew cleanup [包名] //清理指定包的旧版本</code>、<code>brew cleanup -n //查看可清理的旧版本包，不执行实际操作</code>。<br>锁定不想更新的包：<code>brew pin $FORMULA //锁定某个包</code>、<code>brew unpin $FORMULA //取消锁定</code>。<br>卸载安装包：<code>brew uninstall [包名]</code>。<br>查看包信息：<code>brew info [包名]</code>。<br>查看安装列表：<code>brew list</code>。<br>查询可用包：<code>brew search [包名]</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快买 mac mini 一个月了，记录下使用体验和常用软件安装…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://shawdanon.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>学习UMI</title>
    <link href="https://shawdanon.github.io/2019/study-umi/"/>
    <id>https://shawdanon.github.io/2019/study-umi/</id>
    <published>2019-03-01T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.296Z</updated>
    
    <content type="html"><![CDATA[<p>第一次认真学习开源项目，看一次开源代码…</p><a id="more"></a><h2 id="学习-UMI（一）"><a href="#学习-UMI（一）" class="headerlink" title="学习 UMI（一）"></a>学习 UMI（一）</h2><p><a href="mailto:umi@2.6.17" target="_blank" rel="noopener">umi@2.6.17</a></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DirectoryTree = &#123;</span><br><span class="line">  <span class="string">'.github'</span>: &#123; <span class="attr">dec</span>: <span class="literal">undefined</span>, <span class="attr">child</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  docs: &#123; <span class="attr">dec</span>: <span class="string">'说明文档'</span>, <span class="attr">child</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  examples: &#123; <span class="attr">dec</span>: <span class="string">'例子'</span>, <span class="attr">child</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  packages: &#123;</span><br><span class="line">    dec: <span class="string">'npm包'</span>,</span><br><span class="line">    child: &#123;</span><br><span class="line">      <span class="string">'af-webpack'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'babel-preset-umi'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'eslint-config-umi'</span>: <span class="literal">null</span>,</span><br><span class="line">      umi: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-build-dev'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-core'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-library'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-mock'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-plugin-dll'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-plugin-dva'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-plugin-hd'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-plugin-locale'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-plugin-polyfills'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-plugin-react'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-plugin-routes'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-serve'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-test'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-types'</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="string">'umi-utils'</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  scripts: &#123;</span><br><span class="line">    dec: <span class="string">'脚本'</span>,</span><br><span class="line">    child: &#123;</span><br><span class="line">      <span class="string">'build.js'</span>: <span class="string">'构建脚本'</span>,</span><br><span class="line">      <span class="string">'publish.js'</span>: <span class="string">'发布脚本'</span>,</span><br><span class="line">      <span class="string">'reinstall_deps.sh'</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">'startDevServers.js'</span>: <span class="string">'启动开发服务脚本'</span>,</span><br><span class="line">      <span class="string">'test.js'</span>: <span class="string">'测试脚本'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  website: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">'.editorconfig'</span>: <span class="string">'EditorConfig配置文件|EditorConfig有助于为跨越各种编辑器和IDE的同一项目的多个开发人员维护一致的编码样式'</span>,</span><br><span class="line">  <span class="string">'.eslintignore'</span>: <span class="string">'设置ESlint不跟踪的文件，同.gitignore一样'</span>,</span><br><span class="line">  <span class="string">'.eslintrc'</span>: <span class="string">'ESlint配置文件|JavaScript代码检测, JavaScript代码风格检测, JavaScript代码自动格式化'</span>,</span><br><span class="line">  <span class="string">'.gitignore'</span>: <span class="string">'设置git不跟踪的文件'</span>,</span><br><span class="line">  <span class="string">'.prettierignore'</span>: <span class="string">'设置Prettier不跟踪的文件，同.gitignore一样|Prettier是一个前端代码格式化工具'</span>,</span><br><span class="line">  <span class="string">'.travis.yml'</span>: <span class="string">'Travis配置文件|Travis CI 提供的是持续集成服务'</span>,</span><br><span class="line">  <span class="string">'.yarnrc'</span>: <span class="string">'yarn配置文件，配置了使用官方镜像源'</span>,</span><br><span class="line">  <span class="string">'jasmine.js'</span>: <span class="string">' Jasmine配置文件|Jasmine是一个测试框架，配置了超时时间'</span>,</span><br><span class="line">  <span class="string">'jest.config.js'</span>: <span class="string">'jest配置文件'</span>,</span><br><span class="line">  <span class="string">'lerna.json'</span>: <span class="string">'lerna配置文件|Lerna 是一个用来优化托管在git、npm上的多package代码库的工作流的一个管理工具。'</span>,</span><br><span class="line">  <span class="string">'package.json'</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="string">'（废弃集成到了umi-tools中）rollup.config.js'</span>: <span class="string">'rollup配置文件|rollup是一款打包工具'</span>,</span><br><span class="line">  <span class="string">'tsconfig.json'</span>: <span class="string">'TypeScript配置文件|指定ts编译的一些参数信息'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>整个目录看下来光工具和包很多都没接触过，代码检查有用过 eslint，项目落地还是不多，这个月看来要恶补一番前端开发规范啊。</p><h3 id="一级目录"><a href="#一级目录" class="headerlink" title="一级目录"></a>一级目录</h3><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "private": true, //私有，防止npm意外发布</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "bootstrap": "lerna bootstrap",</span><br><span class="line">    "build": "./scripts/build.js",</span><br><span class="line">    "changelog": "lerna-changelog",</span><br><span class="line">    "chore:update-deps": "./scripts/update_deps.sh",</span><br><span class="line">    "test": "node scripts/test.js",</span><br><span class="line">    "test:coverage": "./packages/umi-test/bin/umi-test.js --coverage",</span><br><span class="line">    "debug": "./packages/umi-test/bin/umi-test.js",</span><br><span class="line">    "coveralls": "cat ./coverage/lcov.info | coveralls",</span><br><span class="line">    "lint": "eslint --ext .js packages",</span><br><span class="line">    "precommit": "lint-staged",</span><br><span class="line">    "doc:dev": "./website/node_modules/.bin/vuepress dev ./docs",</span><br><span class="line">    "doc:deploy": "rm -rf ./website/yarn.lock &amp;&amp; cd ./website &amp;&amp; npm run deploy &amp;&amp; cd -",</span><br><span class="line">    "publish": "./scripts/publish.js",</span><br><span class="line">    "ui:dev": "APP_ROOT=packages/umi-build-dev/src/plugins/commands/ui ./packages/umi/bin/umi.js dev",</span><br><span class="line">    "ui:build": "APP_ROOT=packages/umi-build-dev/src/plugins/commands/ui ./packages/umi/bin/umi.js build"</span><br><span class="line">  &#125;, //脚本</span><br><span class="line">  "lint-staged": &#123;</span><br><span class="line">    "*.(t|j)s": ["prettier --trailing-comma all --single-quote --write", "git add"]</span><br><span class="line">  &#125;,</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "@types/jest": "^24.0.5", //Jest的TypeScript定义</span><br><span class="line">    "babel-eslint": "10.0.1", //eslint的解析器，一个对Babel解析器的包装，使其能够与 ESLint 兼容。</span><br><span class="line">    "chokidar": "2.0.4", //监听文件变化</span><br><span class="line">    "coveralls": "3.0.2", //代码覆盖率</span><br><span class="line">    "dva": "2.4.1", //数据流管理</span><br><span class="line">    "eslint": "5.10.0", //可组装的JavaScript和JSX检查工具</span><br><span class="line">    "eslint-config-airbnb": "17.1.0", //airbnb的eslint规范</span><br><span class="line">    "eslint-plugin-import": "2.14.0", //导入导出文件检查</span><br><span class="line">    "eslint-plugin-jsx-a11y": "6.1.2", //用于JSX元素的可访问性规则的静态AST检查器</span><br><span class="line">    "eslint-plugin-react": "7.11.1", //react检查器扩展插件</span><br><span class="line">    "form-data": "^2.3.3", //用于创建可读"multipart/form-data"流的库。可用于将表单和文件上载提交到其他Web应用程序。</span><br><span class="line">    "got": "9.3.2", //简化的HTTP请求</span><br><span class="line">    "husky": "1.2.0", //git commit、git push前检查代码</span><br><span class="line">    "lerna": "3.6.0", //包管理工具</span><br><span class="line">    "lerna-changelog": "0.8.2", //为 Lerna repo  生成变更日志</span><br><span class="line">    "lint-staged": "8.1.0", //提交前运行阻止提交不合规范代码</span><br><span class="line">    "mkdirp": "^0.5.1", //递归创建目录及其子目录,代替mkdir -p</span><br><span class="line">    "prettier": "1.15.3", //格式化</span><br><span class="line">    "puppeteer": "1.11.0", //Puppeteer是一个Node库，它提供了一个高级API来控制DevTools协议上的 Chrome或Chromium 。</span><br><span class="line">    "react-router-dom": "4.3.1", //react路由</span><br><span class="line">    "react-test-renderer": "16.6.3", //单元测试</span><br><span class="line">    "serve-handler": "5.0.8", //此包代表正在运行的服务和静态部署的核心。</span><br><span class="line">    "serve-static": "^1.13.2", //这是一个通过npm注册表提供的Node.js模块。</span><br><span class="line">    "shelljs": "0.8.3", //ShellJS是Node.js API之上的Unix shell命令的可移植（Windows / Linux / OS X）实现。</span><br><span class="line">    "test-build-result": "^1.1.2", //测试构建结果</span><br><span class="line">    "umi-tools": "^0.4.0" //用于构建umi的工具。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lerna"><a href="#Lerna" class="headerlink" title="Lerna"></a>Lerna</h4><p>从目录架构来看，首先要学的是多包管理与发布。通过多包管理可以把作者多个包放在一起用一个仓库储存来维护。（PS：npm 包上传后不能删除，强迫症患者需要慎重取名）</p><p>使用说明：</p><ol><li>全局安装 lerna 包<code>npm install lerna -g</code>。</li><li>在 github 创建一个仓库，并拉下来备用。</li><li>在该仓库根目录初始化 lerna<code>lerna init</code>。<br>初始化成功会多出 3 个文件： packages(目录，用于存放包)、 lerna.json(配置文件，用于 lerna 配置)、package.json(工程描述文件)</li><li>修改 lerna.json 文件中的 version 值，默认是<code>&quot;version&quot;: &quot;0.0.0&quot;</code>（使用这个模式，在发布包的时候所有的包都会发布，并使用 lerna.json 中设置的版本号），修改为<code>&quot;version&quot;: &quot;independent&quot;</code>（使用这个模式，可以单独发布包更新，可喜的是发布包可以自动生成版本号供你选择）。</li><li>在 packages 目录中创建自己的包，在当前包目录执行<code>lerna publish</code>来发布包。（发布包需要确定 npm 镜像源是<code>https://registry.npmjs.org/</code>，发布包前需要登录 npm，使用<code>npm login</code>登录。）</li></ol><p>常用命令：</p><ol><li><code>lerna init</code>：创建新的 lerna repo 或将现有 repo 升级到当前版本的 Lerna。</li><li><code>lerna bootstrap</code>：将把 repo 中的依赖关系链接在一起。</li><li><code>lerna publish</code>：将帮助发布任何更新的包。</li></ol><p>基本使用会了，让我们回到 umi 中看看<code>lerna.json</code>都配置了些什么。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"changelog"</span>: &#123;</span><br><span class="line">    <span class="attr">"labels"</span>: &#123;</span><br><span class="line">      "pr: enhancement": ":rocket: Enhancement", //增强</span><br><span class="line">      "pr: bug": ":bug: Bug Fix", //错误修复</span><br><span class="line">      "pr: documentation": ":book: Documentation", //文档</span><br><span class="line">      "pr: dependency": ":deciduous_tree: Dependency"</span><br><span class="line">    &#125;, //GitHub PR标签映射到changelog部分标头</span><br><span class="line">    "repo": "umijs/umi", //你在GitHub上的“组织/回购”（从package.json文件中自动推断）</span><br><span class="line">    "cacheDir": ".changelog" //GitHub API响应缓存的路径以避免限制（例如.changelog）</span><br><span class="line">  &#125;,</span><br><span class="line">  "packages": ["packages/*"], //包位置</span><br><span class="line">  "command": &#123;</span><br><span class="line">    "version": &#123;</span><br><span class="line">      "exact": true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "npmClient": "yarn", //一个选项，用于指定运行命令的特定客户端（也可以基于每个命令指定）。更改为"yarn"使用yarn运行所有命令。默认为“npm”</span><br><span class="line">  "version": "independent" //存储库的当前版本，使用独立模式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a>Travis</h4><p>Travis 是一款持续集成工具。那么持续集成是什么呢？</p><blockquote><p>持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p></blockquote><p>如何使用 Travis？</p><ol><li>在 Travis 官网使用 github 账号注册登录，会看到你仓库所有的项目。</li><li>打开你想持续集成的项目开关。</li><li>在该项目创建<code>.travis.yml</code>文件，文件内容至少包含<code>language: node_js</code>和<code>node_js: - &#39;6&#39;</code></li><li>提交代码，Travis 就会自动进行构建了。</li><li>构建成功会在 Travis 中显示 build pass 的按钮，点击按钮会有个弹窗，选择 markdown 格式复制链接到项目 readme 中就拥有构建徽章了。</li></ol><p>大概了解了下 Travis，接下来看看 umi 中<code>.travis.yml</code>文件写了些什么。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="comment"># 指定版本</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'8'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'10'</span></span><br><span class="line"><span class="comment"># 脚本阶段之前</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">bootstrap</span></span><br><span class="line"><span class="comment"># 构建成功</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">coveralls</span></span><br><span class="line"><span class="comment"># 缓存Node.js模块</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line"><span class="attr">  depth:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  testPathIgnorePatterns: [</span><br><span class="line">    <span class="string">'/node_modules/'</span>,</span><br><span class="line">    <span class="string">'/examples/'</span>,</span><br><span class="line">    <span class="string">'/lib/'</span>,</span><br><span class="line">    <span class="string">'/packages/umi/src/scripts/test.js'</span>,</span><br><span class="line">    <span class="string">'/packages/umi/src/test.js'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-build-dev/src/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-build-dev/src/routes/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-plugin-dva/src/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-utils/src/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-library/src/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi/test/fixtures'</span></span><br><span class="line">  ], <span class="comment">//排除测试的文件</span></span><br><span class="line">  setupFilesAfterEnv: [<span class="string">'./jasmine.js'</span>], <span class="comment">//在每次测试之前运行一些代码以配置或设置测试框架的模块的路径列表。</span></span><br><span class="line">  collectCoverageFrom: [<span class="string">'packages/**/src/**/*.&#123;js,jsx&#125;'</span>], <span class="comment">//应收集覆盖率信息的一组文件。</span></span><br><span class="line">  coveragePathIgnorePatterns: [</span><br><span class="line">    <span class="string">'/packages/umi-plugin-dva/src/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-build-dev/src/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-build-dev/src/routes/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-build-dev/src/plugins/commands/generate/generators'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-library/src/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi-utils/src/fixtures'</span>,</span><br><span class="line">    <span class="string">'/packages/umi/test/fixtures'</span></span><br><span class="line">  ] <span class="comment">//覆盖率排除的文件。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://editorconfig.org</span></span><br><span class="line"><span class="comment">#应在任何部分之外的文件顶部指定的特殊属性。设置为true以停止.editorconfig在当前文件上搜索文件。</span></span><br><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#所有文件配置</span></span><br><span class="line"><span class="section">[*]</span></span><br><span class="line"><span class="comment">#设置缩进风格为空格</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="comment">#缩进大小（单行间距）</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">#行结束文件格式（Unix，DOS，Mac）换行符</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br><span class="line"><span class="comment">#文件字符编码</span></span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="comment">#设置为true以删除换行符前面的任何空白字符，并设置为false以确保不会。</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">#设置为真以换行符节能时，确保文件最终假，以确保它不会。</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*.md]</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Makefile]</span></span><br><span class="line"><span class="attr">indent_style</span> = tab</span><br></pre></td></tr></table></figure><h4 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "parser": "babel-eslint", //指定解析器</span><br><span class="line">  "extends": "airbnb", //使用airbnb配置扩展</span><br><span class="line">  "env": &#123;</span><br><span class="line">    "browser": true,</span><br><span class="line">    "jest": true</span><br><span class="line">  &#125;, //指定配置文件中的环境</span><br><span class="line">  "rules": &#123;</span><br><span class="line">    "jsx-a11y/href-no-hash": [0],</span><br><span class="line">    "jsx-a11y/click-events-have-key-events": [0],</span><br><span class="line">    "jsx-a11y/anchor-is-valid": [</span><br><span class="line">      "error",</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"components"</span>: [<span class="string">"Link"</span>],</span><br><span class="line">        <span class="attr">"specialLink"</span>: [<span class="string">"to"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    "generator-star-spacing": [0],</span><br><span class="line">    "consistent-return": [0],</span><br><span class="line">    "react/react-in-jsx-scope": [0],</span><br><span class="line">    "react/forbid-prop-types": [0],</span><br><span class="line">    "react/jsx-filename-extension": [1, &#123; "extensions": [".js"] &#125;],</span><br><span class="line">    "global-require": [1],</span><br><span class="line">    "import/prefer-default-export": [0],</span><br><span class="line">    "react/jsx-no-bind": [0],</span><br><span class="line">    "react/prop-types": [0],</span><br><span class="line">    "react/prefer-stateless-function": [0],</span><br><span class="line">    "no-else-return": [0],</span><br><span class="line">    "no-restricted-syntax": [0],</span><br><span class="line">    "import/no-extraneous-dependencies": [0],</span><br><span class="line">    "no-use-before-define": [0],</span><br><span class="line">    "jsx-a11y/no-static-element-interactions": [0],</span><br><span class="line">    "no-nested-ternary": [0],</span><br><span class="line">    "arrow-body-style": [0],</span><br><span class="line">    "import/extensions": [0],</span><br><span class="line">    "no-bitwise": [0],</span><br><span class="line">    "no-cond-assign": [0],</span><br><span class="line">    "import/no-unresolved": [0],</span><br><span class="line">    "require-yield": [1],</span><br><span class="line">    "no-param-reassign": [0],</span><br><span class="line">    "no-shadow": [0],</span><br><span class="line">    "no-underscore-dangle": [0],</span><br><span class="line">    "spaced-comment": [0],</span><br><span class="line">    "indent": [0],</span><br><span class="line">    "quotes": [0],</span><br><span class="line">    "func-names": [0],</span><br><span class="line">    "arrow-parens": [0],</span><br><span class="line">    "space-before-function-paren": [0],</span><br><span class="line">    "no-useless-escape": [0],</span><br><span class="line">    "object-curly-newline": [0],</span><br><span class="line">    "function-paren-newline": [0],</span><br><span class="line">    "class-methods-use-this": [0],</span><br><span class="line">    "no-new": [0],</span><br><span class="line">    "import/newline-after-import": [0],</span><br><span class="line">    "no-console": [0]</span><br><span class="line">  &#125;, //规则覆盖</span><br><span class="line">  "parserOptions": &#123;</span><br><span class="line">    "ecmaFeatures": &#123;</span><br><span class="line">      "experimentalObjectRestSpread": true</span><br><span class="line">    &#125; //启用对实验对象休息/传播属性的支持,弃用</span><br><span class="line">  &#125; //指定解析器选项</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"esnext"</span>,<span class="comment">//指定ECMAScript的目标版本,"ESNext"目标是最新支持的ES提议功能。</span></span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,<span class="comment">//确定如何解决模块。</span></span><br><span class="line">    <span class="string">"jsx"</span>: <span class="string">"preserve"</span>,<span class="comment">//在.tsx文件中支持JSX</span></span><br><span class="line">    <span class="string">"esModuleInterop"</span>: <span class="literal">true</span><span class="comment">//发布__importStar和生成器__importDefault兼容性，用于运行时babel生态系统兼容性，并支持--allowSyntheticDefaultImports类型系统兼容性。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scripts-文件夹"><a href="#scripts-文件夹" class="headerlink" title="scripts 文件夹"></a>scripts 文件夹</h3><h4 id="build-js"><a href="#build-js" class="headerlink" title="build.js"></a>build.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">child_process 模块提供了以与 popen(3) 类似但不相同的方式衍生子进程的功能。</span></span><br><span class="line"><span class="comment">child_process.fork():衍生一个新的 Node.js 进程，并通过建立 IPC 通信通道来调用指定的模块，该通道允许在父进程与子进程之间发送消息。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 模块提供用于处理文件路径和目录路径的实用工具。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runUmiTools</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log([<span class="string">'&gt;&gt; umi-tools'</span>, ...args].join(<span class="string">' '</span>));</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  child_process.fork(modulePath[, args][, options])</span></span><br><span class="line"><span class="comment">  modulePath &lt;string&gt; 要在子进程中运行的模块。</span></span><br><span class="line"><span class="comment">  args &lt;string[]&gt; 字符串参数的列表。</span></span><br><span class="line"><span class="comment">  options &lt;Object&gt;</span></span><br><span class="line"><span class="comment">    stdio &lt;Array&gt; | &lt;string&gt; 参阅 child_process.spawn() 的 stdio。当提供此选项时，则它覆盖 silent 选项。如果使用了数组变量，则它必须包含一个值为 'ipc' 的元素，否则会抛出错误。例如 [0, 1, 2, 'ipc']。</span></span><br><span class="line"><span class="comment">    cwd &lt;string&gt; 子进程的当前工作目录。</span></span><br><span class="line"><span class="comment">  返回: &lt;ChildProcess&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  path.join([...paths])</span></span><br><span class="line"><span class="comment">  ...paths &lt;string&gt; 路径片段的序列。</span></span><br><span class="line"><span class="comment">  返回: &lt;string&gt;</span></span><br><span class="line"><span class="comment">  path.join() 方法使用平台特定的分隔符作为定界符将所有给定的 path 片段连接在一起，然后规范化生成的路径。</span></span><br><span class="line"><span class="comment">  零长度的 path 片段会被忽略。 如果连接的路径字符串是零长度的字符串，则返回 '.'，表示当前工作目录。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   process.cwd() 方法返回 Node.js 进程的当前工作目录。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">return</span> fork(join(process.cwd(), <span class="string">'node_modules/.bin/umi-tools'</span>), [...args].concat(process.argv.slice(<span class="number">2</span>)), &#123;</span><br><span class="line">    stdio: <span class="string">'inherit'</span>,</span><br><span class="line">    cwd: process.cwd()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cp = runUmiTools(<span class="string">'build'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">'error' 事件</span></span><br><span class="line"><span class="comment">err &lt;Error&gt; 错误对象。</span></span><br><span class="line"><span class="comment">当出现以下情况时触发 'error' 事件：</span></span><br><span class="line"><span class="comment">1.无法衍生进程；</span></span><br><span class="line"><span class="comment">2.无法杀死进程；</span></span><br><span class="line"><span class="comment">3.向子进程发送信息失败。</span></span><br><span class="line"><span class="comment">发生错误后，'exit' 事件可能会也可能不会触发。如果同时监听了 'exit' 和 'error' 事件，可能会多次调用处理函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">cp.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">'message' 事件</span></span><br><span class="line"><span class="comment">  message &lt;Object&gt; JSON 对象或原始值。</span></span><br><span class="line"><span class="comment">  sendHandle &lt;Handle&gt; net.Socket 或 net.Server 对象，或 undefined。</span></span><br><span class="line"><span class="comment">当子进程使用 process.send() 发送消息时触发。</span></span><br><span class="line"><span class="comment">消息通过序列化和解析传递，收到的消息可能跟发送的不完全一样。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">cp.on(<span class="string">'message'</span>, message =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (message === <span class="string">'BUILD_COMPLETE'</span>) &#123;</span><br><span class="line">    runUmiTools(<span class="string">'rollup'</span>, <span class="string">'-g'</span>, <span class="string">'dva:dva,antd:antd'</span>);</span><br><span class="line">  &#125; <span class="comment">//构建完成打包</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="publish-js"><a href="#publish-js" class="headerlink" title="publish.js"></a>publish.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ShellJS是 Node.js API之上的Unix shell 命令的可移植（Windows / Linux / OS X）实现。您可以使用它来消除shell脚本对Unix的依赖性，同时仍保留其熟悉且功能强大的命令。您也可以在全局安装它，这样您就可以从Node项目外部运行它- 告别那些粗糙的Bash脚本！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shell.exec(command [, options] [, callback])</span></span><br><span class="line"><span class="comment">执行命令</span></span><br><span class="line"><span class="comment">options：</span></span><br><span class="line"><span class="comment">  async：异步执行。如果提供了回调，则true无论传递的值如何（默认值:)，都将设置为回调  false。</span></span><br><span class="line"><span class="comment">  silent：不要将程序输出回显到控制台（默认值:) false。</span></span><br><span class="line"><span class="comment">  encoding：要使用的字符编码。影响返回到stdout和stderr的值，以及未处于静默模式时写入stdout和stderr的值（默认值:) 'utf8'。</span></span><br><span class="line"><span class="comment">以及Node.js可用的任何选项 child_process.exec()</span></span><br><span class="line"><span class="comment">除非另有说明，否则command同步执行给定的给定。</span></span><br><span class="line"><span class="comment">在同步模式下，这将返回ShellString。否则，这将返回子进程对象，并callback接收参数(code, stdout, stderr)。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (!shell.exec(<span class="string">'npm config get registry'</span>).stdout.includes(<span class="string">'https://registry.npmjs.org/'</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Failed: set npm registry to https://registry.npmjs.org/ first'</span>);</span><br><span class="line">  process.exit(<span class="number">1</span>); <span class="comment">//退出进程</span></span><br><span class="line">&#125; <span class="comment">//判断当前npm镜像源是否为npm官方源，不是则失败提示请设置镜像源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cwd = process.cwd();</span><br><span class="line"><span class="keyword">const</span> ret = shell.exec(<span class="string">'./node_modules/.bin/lerna updated'</span>).stdout; <span class="comment">//运行lerna updated时的输出</span></span><br><span class="line"><span class="keyword">const</span> updatedRepos = ret</span><br><span class="line">  .split(<span class="string">'\n'</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">line</span> =&gt;</span> line.replace(<span class="string">'- '</span>, <span class="string">''</span>))</span><br><span class="line">  .filter(<span class="function"><span class="params">line</span> =&gt;</span> line !== <span class="string">''</span>); <span class="comment">//筛选出需要更新的仓库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (updatedRepos.length === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'No package is updated.'</span>);</span><br><span class="line">  process.exit(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">//没有需要更新仓库的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">code</span>: buildCode &#125; = shell.exec(<span class="string">'npm run build'</span>); <span class="comment">//执行构建</span></span><br><span class="line"><span class="keyword">if</span> (buildCode === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Failed: npm run build'</span>);</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="comment">//构建失败情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">code</span>: uiBuildCode &#125; = shell.exec(<span class="string">'npm run ui:build'</span>); <span class="comment">//执行ui构建</span></span><br><span class="line"><span class="keyword">if</span> (uiBuildCode === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Failed: npm run ui:build'</span>);</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="comment">//ui构建失败情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cp = fork(join(process.cwd(), <span class="string">'node_modules/.bin/lerna'</span>), [<span class="string">'version'</span>].concat(process.argv.slice(<span class="number">2</span>)), &#123;</span><br><span class="line">  stdio: <span class="string">'inherit'</span>,</span><br><span class="line">  cwd: process.cwd()</span><br><span class="line">&#125;);</span><br><span class="line">cp.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">code &lt;number&gt; 子进程的退出码。</span></span><br><span class="line"><span class="comment">signal &lt;string&gt; 终止子进程的信号。</span></span><br><span class="line"><span class="comment">当子进程的 stdio 流被关闭时触发。 与 'exit' 事件的区别是，多个进程可能共享同一 stdio 流。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">cp.on(<span class="string">'close'</span>, code =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'code'</span>, code);</span><br><span class="line">  <span class="keyword">if</span> (code === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Failed: lerna publish'</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  publishToNpm();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">publishToNpm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`repos to publish: <span class="subst">$&#123;updatedRepos.join(<span class="string">', '</span>)&#125;</span>`</span>);</span><br><span class="line">  updatedRepos.forEach(<span class="function"><span class="params">repo</span> =&gt;</span> &#123;</span><br><span class="line">    shell.cd(join(cwd, <span class="string">'packages'</span>, repo));</span><br><span class="line">    <span class="keyword">const</span> &#123; version &#125; = <span class="built_in">require</span>(join(cwd, <span class="string">'packages'</span>, repo, <span class="string">'package.json'</span>));</span><br><span class="line">    <span class="keyword">if</span> (version.includes(<span class="string">'-rc.'</span>) || version.includes(<span class="string">'-beta.'</span>) || version.includes(<span class="string">'-alpha.'</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;repo&#125;</span>] npm publish --tag next`</span>);</span><br><span class="line">      shell.exec(<span class="string">`npm publish --tag next`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;repo&#125;</span>] npm publish`</span>);</span><br><span class="line">      shell.exec(<span class="string">`npm publish`</span>);</span><br><span class="line">    &#125; <span class="comment">//版本包含-rc.-beta.-alpha.字眼更新标签，否则直接发布</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="startDevServers-js"><a href="#startDevServers-js" class="headerlink" title="startDevServers.js"></a>startDevServers.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; join, dirname &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEV_SCRIPT = join(__dirname, <span class="string">'../packages/umi/bin/umi.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDevServer</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; port, cwd &#125; = opts;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> child = fork(DEV_SCRIPT, [<span class="string">'dev'</span>, <span class="string">'--port'</span>, port, <span class="string">'--cwd'</span>, cwd], &#123;</span><br><span class="line">      env: &#123;</span><br><span class="line">        ...process.env,</span><br><span class="line">        CLEAR_CONSOLE: <span class="string">'none'</span>,</span><br><span class="line">        BROWSER: <span class="string">'none'</span>,</span><br><span class="line">        UMI_DIR: dirname(<span class="built_in">require</span>.resolve(<span class="string">'../packages/umi/package'</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    child.on(<span class="string">'message'</span>, args =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (args.type === <span class="string">'DONE'</span>) &#123;</span><br><span class="line">        resolve(child);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> devServers = [</span><br><span class="line">    [<span class="number">12341</span>, <span class="string">'../packages/umi/test/fixtures/e2e/normal'</span>],</span><br><span class="line">    [<span class="number">12342</span>, <span class="string">'../packages/umi/test/fixtures/e2e/hashHistory'</span>],</span><br><span class="line">    [<span class="number">12351</span>, <span class="string">'../packages/umi-plugin-react/test/normal'</span>],</span><br><span class="line">    [<span class="number">12352</span>, <span class="string">'../packages/umi-plugin-react/test/with-dva'</span>],</span><br><span class="line">    [<span class="number">12353</span>, <span class="string">'../packages/umi-plugin-react/test/pwa'</span>]</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">    devServers.map(<span class="function">(<span class="params">[port, cwd]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> startDevServer(&#123; port, <span class="attr">cwd</span>: join(__dirname, cwd) &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = start;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">require</span>.main === <span class="built_in">module</span>) &#123;</span><br><span class="line">  start()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'All dev servers are started.'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="test-js"><a href="#test-js" class="headerlink" title="test.js"></a>test.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">child_process.spawn() 方法异步地衍生子进程，且不阻塞 Node.js 事件循环。 child_process.spawnSync() 方法则以同步的方式提供等效功能，但会阻止事件循环直到衍生的进程退出或终止。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> startDevServers = <span class="built_in">require</span>(<span class="string">'./startDevServers'</span>);</span><br><span class="line"></span><br><span class="line">startDevServers()</span><br><span class="line">  .then(<span class="function"><span class="params">devServers</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> testCmd = spawn(<span class="regexp">/^win/</span>.test(process.platform) ? <span class="string">'npm.cmd'</span> : <span class="string">'npm'</span>, [<span class="string">'run'</span>, <span class="string">'test:coverage'</span>], &#123;</span><br><span class="line">      stdio: <span class="string">'inherit'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    testCmd.on(<span class="string">'exit'</span>, code =&gt; &#123;</span><br><span class="line">      devServers.forEach(<span class="function"><span class="params">devServer</span> =&gt;</span> devServer &amp;&amp; devServer.kill(<span class="string">'SIGINT'</span>));</span><br><span class="line">      process.exit(code);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="2019-3-31"><a href="#2019-3-31" class="headerlink" title="2019/3/31"></a>2019/3/31</h4><p>通过了解 umi 的源码知道了很多有意思的东西：npm 包发布、通过 lerna 来管理包、使用 Travis 持续集成项目、EditorConfig 来保证不同编辑器风格一致、ESLint 保证代码风格一致、Jest 测试保证代码可靠性、lint-staged 和 husky 阻止代码提交（最开始在 ant design pro 有遇到），shelljs 执行脚本命令。</p><h3 id="demo-地址"><a href="#demo-地址" class="headerlink" title="demo 地址"></a>demo 地址</h3><p><a href="https://github.com/ShawDanon/txp" target="_blank" rel="noopener">准备用来存些常用库的仓库</a></p><h3 id="参考一"><a href="#参考一" class="headerlink" title="参考一"></a>参考一</h3><p><a href="https://juejin.im/post/5c26c1b65188252dcb312ad6#heading-0" target="_blank" rel="noopener">创建并发布一个小而美的 npm 包，没你想的那么难！</a><br><a href="https://juejin.im/post/5a989fb451882555731b88c2" target="_blank" rel="noopener">lerna 管理前端 packages 的最佳实践</a><br><a href="https://github.com/lerna/lerna/#getting-started" target="_blank" rel="noopener">lerna 文档</a><br><a href="https://github.com/lerna/lerna-changelog" target="_blank" rel="noopener">lerna-changelog 文档</a><br><a href="https://efe.baidu.com/blog/front-end-continuous-integration-tools/" target="_blank" rel="noopener">前端开源项目持续集成三剑客</a><br><a href="https://editorconfig.org/" target="_blank" rel="noopener">editorconfig</a><br><a href="https://eslint.org/docs/user-guide/getting-started" target="_blank" rel="noopener">eslint</a><br><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">Node.js 中文网</a><br><a href="http://documentup.com/shelljs/shelljs" target="_blank" rel="noopener">shelljs</a></p><h2 id="学习-UMI（二）"><a href="#学习-UMI（二）" class="headerlink" title="学习 UMI（二）"></a>学习 UMI（二）</h2><p><a href="mailto:umi@2.6.17" target="_blank" rel="noopener">umi@2.6.17</a><br>正式开始看源码了</p><h3 id="packages-umi"><a href="#packages-umi" class="headerlink" title="packages/umi"></a>packages/umi</h3><h4 id="重要的"><a href="#重要的" class="headerlink" title="重要的"></a>重要的</h4><h5 id="packages-umi-package-json"><a href="#packages-umi-package-json" class="headerlink" title="packages/umi/package.json"></a>packages/umi/package.json</h5><p>先来看看 package.json 文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"umi"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"2.6.16"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Pluggable enterprise-level react application framework."</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    "@babel/core": "7.2.2", //babel核心包</span><br><span class="line">    "@babel/runtime": "7.3.0", //一个包含Babel模块化运行时助手和一个版本的库</span><br><span class="line">    "@types/react": "16.x", //react</span><br><span class="line">    "@types/react-router-dom": "4.x", //react路由</span><br><span class="line">    "babel-preset-umi": "1.4.1", //云谦的babel预设</span><br><span class="line">    "debug": "4.1.0", //一个微小的JavaScript调试工具，以Node.js核心的调试技术为模型。适用于Node.js和Web浏览器。</span><br><span class="line">    "dotenv": "6.2.0", //Dotenv是一个零依赖模块，可以将.env文件中的环境变量加载到process.env。在与代码分开的环境中存储配置基于The Twelve-Factor App方法。</span><br><span class="line">    "is-windows": "1.0.2", //如果平台是windows，则返回true。UMD模块，适用于node.js，commonjs，浏览器，AMD，电子等。</span><br><span class="line">    "lodash": "4.17.11", //一个现代JavaScript实用程序库，提供模块化，性能和附加功能。深拷贝用过</span><br><span class="line">    "react-loadable": "5.5.0", //用于加载具有动态导入的组件的更高阶组件。</span><br><span class="line">    "resolve-cwd": "2.0.0", //解析模块的路径，require.resolve()但是从当前工作目录中解析</span><br><span class="line">    "semver": "5.6.0", //节点的semver解析器，语义化版本</span><br><span class="line">    "signale": "1.3.0", //可记录和可配置到核心，signale可用于记录目的，状态报告，以及处理其他节点模块和应用程序的输出呈现过程。</span><br><span class="line">    "umi-build-dev": "1.8.3", //未有readme文件具体功能暂时不知</span><br><span class="line">    "umi-utils": "1.4.1", //工具类</span><br><span class="line">    "update-notifier": "2.5.0", //更新CLI应用程序的通知</span><br><span class="line">    "yargs-parser": "13.0.0" //Yargs通过解析参数和生成优雅的用户界面来帮助您构建交互式命令行工具。</span><br><span class="line">  &#125;, //依赖包</span><br><span class="line">  "module": "index.js",</span><br><span class="line">  "sideEffects": ["./lib/renderRoutes.js"],</span><br><span class="line">  "bin": &#123;</span><br><span class="line">    "umi": "./bin/umi.js"</span><br><span class="line">  &#125;, //很多软件包都有一个或多个可以安装到PATH中的可执行文件。</span><br><span class="line">  "license": "MIT",</span><br><span class="line">  "repository": &#123;</span><br><span class="line">    "type": "git",</span><br><span class="line">    "url": "https://github.com/umijs/umi/tree/master/packages/umi"</span><br><span class="line">  &#125;,</span><br><span class="line">  "homepage": "https://github.com/umijs/umi/tree/master/packages/umi",</span><br><span class="line">  "authors": ["chencheng &lt;sorrycc@gmail.com&gt; (https://github.com/sorrycc)"],</span><br><span class="line">  "bugs": &#123;</span><br><span class="line">    "url": "https://github.com/umijs/umi/issues"</span><br><span class="line">  &#125;,</span><br><span class="line">  "files": [</span><br><span class="line">    "lib",</span><br><span class="line">    "src",</span><br><span class="line">    "bin",</span><br><span class="line">    "index.js",</span><br><span class="line">    "index.d.ts",</span><br><span class="line">    "babel.js",</span><br><span class="line">    "dynamic.d.ts",</span><br><span class="line">    "link.d.ts",</span><br><span class="line">    "navlink.d.ts",</span><br><span class="line">    "prompt.d.ts",</span><br><span class="line">    "redirect.d.ts",</span><br><span class="line">    "router.d.ts",</span><br><span class="line">    "withRouter.d.ts",</span><br><span class="line">    <span class="string">"routerTypes.d.ts"</span></span><br><span class="line">  ], //可选files字段是一个文件模式数组，描述了将软件包作为依赖项安装时要包含的条目。</span><br><span class="line">  "umiTools": &#123;</span><br><span class="line">    "browserFiles": [</span><br><span class="line">      "src/createHistory.js",</span><br><span class="line">      "src/dynamic.js",</span><br><span class="line">      "src/link.js",</span><br><span class="line">      "src/navlink.js",</span><br><span class="line">      "src/prompt.js",</span><br><span class="line">      "src/redirect.js",</span><br><span class="line">      "src/renderRoutes.js",</span><br><span class="line">      "src/Route.js",</span><br><span class="line">      "src/router.js",</span><br><span class="line">      "src/runtimePlugin.js",</span><br><span class="line">      "src/utils.js",</span><br><span class="line">      <span class="string">"src/withRouter.js"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提供接口相关的文件"><a href="#提供接口相关的文件" class="headerlink" title="提供接口相关的文件"></a>提供接口相关的文件</h4><h5 id="packages-umi-index-js"><a href="#packages-umi-index-js" class="headerlink" title="packages/umi/index.js"></a>packages/umi/index.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Link &#125; <span class="keyword">from</span> <span class="string">'./lib/link'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> NavLink &#125; <span class="keyword">from</span> <span class="string">'./lib/navlink'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Redirect &#125; <span class="keyword">from</span> <span class="string">'./lib/redirect'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> dynamic &#125; <span class="keyword">from</span> <span class="string">'./lib/dynamic'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> router &#125; <span class="keyword">from</span> <span class="string">'./lib/router'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> withRouter &#125; <span class="keyword">from</span> <span class="string">'./lib/withRouter'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Route &#125; <span class="keyword">from</span> <span class="string">'./lib/Route'</span>;</span><br></pre></td></tr></table></figure><p>umi 输出的 api 对应<a href="https://umijs.org/zh/api/" target="_blank" rel="noopener">官方文档</a>。</p><h5 id="packages-umi-link-js"><a href="#packages-umi-link-js" class="headerlink" title="packages/umi/link.js"></a>packages/umi/link.js</h5><p>link 组件直接使用 react-router 的 link 组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Link;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-NavLink-js"><a href="#packages-umi-NavLink-js" class="headerlink" title="packages/umi/NavLink.js"></a>packages/umi/NavLink.js</h5><p>NavLink 组件直接使用 react-router 的 NavLink 组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NavLink &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> NavLink;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-Redirect-js"><a href="#packages-umi-Redirect-js" class="headerlink" title="packages/umi/Redirect.js"></a>packages/umi/Redirect.js</h5><p>Redirect 组件直接使用 react-router 的 Redirect 组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Redirect;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-router-js"><a href="#packages-umi-router-js" class="headerlink" title="packages/umi/router.js"></a>packages/umi/router.js</h5><p>js 路由操作文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global window */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.g_history.push(...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.g_history.replace(...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.g_history.go(...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">goBack</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.g_history.goBack(...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">goForward</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.g_history.goForward(...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  push,</span><br><span class="line">  replace,</span><br><span class="line">  go,</span><br><span class="line">  goBack,</span><br><span class="line">  goForward</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-withRouter-js"><a href="#packages-umi-withRouter-js" class="headerlink" title="packages/umi/withRouter.js"></a>packages/umi/withRouter.js</h5><p>withRouter 组件直接使用 react-router 的 withRouter 组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-Route-js"><a href="#packages-umi-Route-js" class="headerlink" title="packages/umi/Route.js"></a>packages/umi/Route.js</h5><p>Route 组件直接使用 react-router 的 Route 组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Route;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-dynamic-js"><a href="#packages-umi-dynamic-js" class="headerlink" title="packages/umi/dynamic.js"></a>packages/umi/dynamic.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">'react-loadable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thanks to next.js</span></span><br><span class="line"><span class="comment">// ref: https://github.com/zeit/next.js/blob/canary/lib/dynamic.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">dynamicOptions, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> loadableFn = Loadable;</span><br><span class="line">  <span class="keyword">let</span> loadableOptions = &#123;</span><br><span class="line">    loading: <span class="function">(<span class="params">&#123; error, isLoading &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">              &#123;error.message&#125;</span><br><span class="line">              &lt;br /&gt;</span><br><span class="line">              &#123;error.stack&#125;</span><br><span class="line">            &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          );</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      return &lt;p&gt;loading...&lt;/</span>p&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Support for direct import(),</span></span><br><span class="line">  <span class="comment">// eg: dynamic(import('../hello-world'))</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> dynamicOptions.then === <span class="string">'function'</span>) &#123;</span><br><span class="line">    loadableOptions.loader = <span class="function"><span class="params">()</span> =&gt;</span> dynamicOptions;</span><br><span class="line">    <span class="comment">// Support for having first argument being options,</span></span><br><span class="line">    <span class="comment">// eg: dynamic(&#123;loader: import('../hello-world')&#125;)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> dynamicOptions === <span class="string">'object'</span>) &#123;</span><br><span class="line">    loadableOptions = &#123; ...loadableOptions, ...dynamicOptions &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Support for passing options,</span></span><br><span class="line">  <span class="comment">// eg: dynamic(import('../hello-world'), &#123;loading: () =&gt; &lt;p&gt;Loading something&lt;/p&gt;&#125;)</span></span><br><span class="line">  loadableOptions = &#123; ...loadableOptions, ...options &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Support for `render` when using a mapping,</span></span><br><span class="line">  <span class="comment">// eg: `dynamic(&#123; modules: () =&gt; &#123;return &#123;HelloWorld: import('../hello-world')&#125;, render(props, loaded) &#123;&#125; &#125; &#125;)</span></span><br><span class="line">  <span class="keyword">if</span> (dynamicOptions.render) &#123;</span><br><span class="line">    loadableOptions.render = <span class="function">(<span class="params">loaded, props</span>) =&gt;</span> dynamicOptions.render(props, loaded);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Support for `modules` when using a mapping,</span></span><br><span class="line">  <span class="comment">// eg: `dynamic(&#123; modules: () =&gt; &#123;return &#123;HelloWorld: import('../hello-world')&#125;, render(props, loaded) &#123;&#125; &#125; &#125;)</span></span><br><span class="line">  <span class="keyword">if</span> (dynamicOptions.modules) &#123;</span><br><span class="line">    loadableFn = Loadable.Map;</span><br><span class="line">    <span class="keyword">const</span> loadModules = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> modules = dynamicOptions.modules();</span><br><span class="line">    <span class="built_in">Object</span>.keys(modules).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> value = modules[key];</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value.then === <span class="string">'function'</span>) &#123;</span><br><span class="line">        loadModules[key] = <span class="function"><span class="params">()</span> =&gt;</span> value.then(<span class="function"><span class="params">mod</span> =&gt;</span> mod.default || mod);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      loadModules[key] = value;</span><br><span class="line">    &#125;);</span><br><span class="line">    loadableOptions.loader = loadModules;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> loadableFn(loadableOptions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命令相关的文件"><a href="#命令相关的文件" class="headerlink" title="命令相关的文件"></a>命令相关的文件</h4><h5 id="packages-umi-bin-umi-js"><a href="#packages-umi-bin-umi-js" class="headerlink" title="packages/umi/bin/umi.js"></a>packages/umi/bin/umi.js</h5><p>umi 命令的入口文件，<code>umi [option]</code>就会执行这个文件了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolveCwd = <span class="built_in">require</span>(<span class="string">'resolve-cwd'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localCLI = resolveCwd.silent(<span class="string">'umi/bin/umi'</span>); <span class="comment">//获取模块路径，测试结果为null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (localCLI &amp;&amp; localCLI !== __filename) &#123;</span><br><span class="line">  <span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'umi'</span>);</span><br><span class="line">  debug(<span class="string">'Using local install of umi'</span>);</span><br><span class="line">  <span class="built_in">require</span>(localCLI);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'../lib/cli'</span>);</span><br><span class="line">&#125; <span class="comment">//执行cli</span></span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-cli-js"><a href="#packages-umi-src-cli-js" class="headerlink" title="packages/umi/src/cli.js"></a>packages/umi/src/cli.js</h5><p>从入口文件来到具体命令处理的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dirname &#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> yParser <span class="keyword">from</span> <span class="string">'yargs-parser'</span>;</span><br><span class="line"><span class="keyword">import</span> signale <span class="keyword">from</span> <span class="string">'signale'</span>;</span><br><span class="line"><span class="keyword">import</span> semver <span class="keyword">from</span> <span class="string">'semver'</span>;</span><br><span class="line"><span class="keyword">import</span> buildDevOpts <span class="keyword">from</span> <span class="string">'./buildDevOpts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//process.argv属性返回一个数组，其中包含当启动 Node.js 进程时传入的命令行参数。</span></span><br><span class="line"><span class="keyword">const</span> script = process.argv[<span class="number">2</span>]; <span class="comment">//获取第一个可选参数（数组前两个是路径）</span></span><br><span class="line"><span class="keyword">const</span> args = yParser(process.argv.slice(<span class="number">3</span>)); <span class="comment">//获取第一个可选参数之后的参数，转换成对象。如：umi dev -a -name=1，args为&#123;_:[],a:true,name:1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Node版本检查</span></span><br><span class="line"><span class="keyword">const</span> nodeVersion = process.versions.node; <span class="comment">//node版本号</span></span><br><span class="line"><span class="keyword">if</span> (semver.satisfies(nodeVersion, <span class="string">'&lt;6.5'</span>)) &#123;</span><br><span class="line">  signale.error(<span class="string">`Node version must &gt;= 6.5, but got <span class="subst">$&#123;nodeVersion&#125;</span>`</span>);</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="comment">//版本小于6.5提示node版本大于等于6.5并退出程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程退出（defer: true ）时通知更新</span></span><br><span class="line"><span class="keyword">const</span> updater = <span class="built_in">require</span>(<span class="string">'update-notifier'</span>);</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'../package.json'</span>);</span><br><span class="line">updater(&#123; pkg &#125;).notify(&#123; <span class="attr">defer</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">process.env.UMI_DIR = dirname(<span class="built_in">require</span>.resolve(<span class="string">'../package'</span>)); <span class="comment">//当前包根目录路径</span></span><br><span class="line">process.env.UMI_VERSION = pkg.version; <span class="comment">//当前包版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aliasMap = &#123;</span><br><span class="line">  <span class="string">'-v'</span>: <span class="string">'version'</span>,</span><br><span class="line">  <span class="string">'--version'</span>: <span class="string">'version'</span>,</span><br><span class="line">  <span class="string">'-h'</span>: <span class="string">'help'</span>,</span><br><span class="line">  <span class="string">'--help'</span>: <span class="string">'help'</span></span><br><span class="line">&#125;; <span class="comment">//扩展命令</span></span><br><span class="line"><span class="comment">//如果umi后面有build、dev、test、inspect参数就执行对应scripts文件中的脚本，否则引入umi-build-dev执行</span></span><br><span class="line"><span class="keyword">switch</span> (script) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'build'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'dev'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'test'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'inspect'</span>:</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">`./scripts/<span class="subst">$&#123;script&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">    <span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'umi-build-dev/lib/Service'</span>).default;</span><br><span class="line">    <span class="keyword">new</span> Service(buildDevOpts(args)).run(aliasMap[script] || script, args);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-buildDevOpts-js"><a href="#packages-umi-src-buildDevOpts-js" class="headerlink" title="packages/umi/src/buildDevOpts.js"></a>packages/umi/src/buildDevOpts.js</h5><p>加载 env 环境并对应平台返回 app 目录路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//path.join() 方法使用平台特定的分隔符作为定界符将所有给定的 path 片段连接在一起，然后规范化生成的路径。</span></span><br><span class="line"><span class="comment">//path.isAbsolute() 方法检测 path 是否为绝对路径。</span></span><br><span class="line"><span class="keyword">import</span> &#123; join, isAbsolute &#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="comment">//fs.readFileSync() 同步地读取文件的全部内容。</span></span><br><span class="line"><span class="comment">//fs.existsSync() 通过检查文件系统来测试给定的路径是否存在。</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync, existsSync &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="comment">//isWindows 判断是否为Windows平台</span></span><br><span class="line"><span class="keyword">import</span> isWindows <span class="keyword">from</span> <span class="string">'is-windows'</span>;</span><br><span class="line"><span class="comment">//winPath 将Windows反斜杠路径转换为斜杠路径：foo\\bar➔foo/bar</span></span><br><span class="line"><span class="keyword">import</span> &#123; winPath &#125; <span class="keyword">from</span> <span class="string">'umi-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">'dotenv'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  loadDotEnv(); <span class="comment">//加载env环境</span></span><br><span class="line">  <span class="keyword">let</span> cwd = opts.cwd || process.env.APP_ROOT; <span class="comment">//得到将传入路径或者环境设置路径</span></span><br><span class="line">  <span class="keyword">if</span> (cwd) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAbsolute(cwd)) &#123;</span><br><span class="line">      cwd = join(process.cwd(), cwd);</span><br><span class="line">    &#125; <span class="comment">//cwd不是绝对路径转换为绝对路径</span></span><br><span class="line">    cwd = winPath(cwd); <span class="comment">//将Windows反斜杠路径转换为斜杠路径：foo\\bar➔foo/ba</span></span><br><span class="line">    <span class="comment">// 原因：webpack 的 include 规则得是 \ 才能判断出是绝对路径</span></span><br><span class="line">    <span class="keyword">if</span> (isWindows()) &#123;</span><br><span class="line">      cwd = cwd.replace(<span class="regexp">/\//g</span>, <span class="string">'\\'</span>);</span><br><span class="line">    &#125; <span class="comment">//如果是Windows平台将/替换为\\ foo/bar➔foo\\bar</span></span><br><span class="line">    <span class="comment">//感觉上面两步怎么不弄成一步来呢</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    cwd</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadDotEnv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//process.cwd() 方法返回 Node.js 进程的当前工作目录。</span></span><br><span class="line">  <span class="keyword">const</span> baseEnvPath = join(process.cwd(), <span class="string">'.env'</span>); <span class="comment">//获取当前进程目录下.env路径</span></span><br><span class="line">  <span class="keyword">const</span> localEnvPath = <span class="string">`<span class="subst">$&#123;baseEnvPath&#125;</span>.local`</span>; <span class="comment">//获取当前进程目录下.env.local路径</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> loadEnv = <span class="function"><span class="params">envPath</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//判断路径是否存在env的文件，存在就读取文件遍历设置env</span></span><br><span class="line">    <span class="keyword">if</span> (existsSync(envPath)) &#123;</span><br><span class="line">      <span class="keyword">const</span> parsed = parse(readFileSync(envPath, <span class="string">'utf-8'</span>));</span><br><span class="line">      <span class="built_in">Object</span>.keys(parsed).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!process.env.hasOwnProperty(key)) &#123;</span><br><span class="line">          process.env[key] = parsed[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//加载.env环境</span></span><br><span class="line">  loadEnv(baseEnvPath);</span><br><span class="line">  <span class="comment">//加载.env.local环境覆盖.env环境</span></span><br><span class="line">  loadEnv(localEnvPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-scripts-build-js"><a href="#packages-umi-src-scripts-build-js" class="headerlink" title="packages/umi/src/scripts/build.js"></a>packages/umi/src/scripts/build.js</h5><p>构建执行脚本，实际调用 umi-build-dev 模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yParser <span class="keyword">from</span> <span class="string">'yargs-parser'</span>;</span><br><span class="line"><span class="keyword">import</span> buildDevOpts <span class="keyword">from</span> <span class="string">'../buildDevOpts'</span>;</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>; <span class="comment">//设置环境为生产环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> args = yParser(process.argv.slice(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'umi-build-dev/lib/Service'</span>).default;</span><br><span class="line"><span class="keyword">new</span> Service(buildDevOpts(args)).run(<span class="string">'build'</span>, args);</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-scripts-dev-js"><a href="#packages-umi-src-scripts-dev-js" class="headerlink" title="packages/umi/src/scripts/dev.js"></a>packages/umi/src/scripts/dev.js</h5><p>开发执行脚本，实际调用 umi-build-dev 模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fork <span class="keyword">from</span> <span class="string">'umi-build-dev/lib/fork'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = fork(<span class="built_in">require</span>.resolve(<span class="string">'./realDev.js'</span>));</span><br><span class="line">child.on(<span class="string">'message'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.send) &#123;</span><br><span class="line">    process.send(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">child.on(<span class="string">'exit'</span>, code =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (code === <span class="number">1</span>) &#123;</span><br><span class="line">    process.exit(code);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'SIGINT'</span>, () =&gt; &#123;</span><br><span class="line">  child.kill(<span class="string">'SIGINT'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-scripts-inspect-js"><a href="#packages-umi-src-scripts-inspect-js" class="headerlink" title="packages/umi/src/scripts/inspect.js"></a>packages/umi/src/scripts/inspect.js</h5><p>检查内部 Webpack 配置脚本文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yParser <span class="keyword">from</span> <span class="string">'yargs-parser'</span>;</span><br><span class="line"><span class="keyword">import</span> buildDevOpts <span class="keyword">from</span> <span class="string">'../buildDevOpts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> args = yParser(process.argv.slice(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (args.mode === <span class="string">'production'</span>) &#123;</span><br><span class="line">  process.env.NODE_ENV = <span class="string">'production'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  process.env.NODE_ENV = <span class="string">'development'</span>;</span><br><span class="line">&#125; <span class="comment">//如果命令指定了mode=production，则切换换生产环境否则为开发环境</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'umi-build-dev/lib/Service'</span>).default;</span><br><span class="line"><span class="keyword">new</span> Service(buildDevOpts(args)).run(<span class="string">'inspect'</span>, args);</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-scripts-realDev-js"><a href="#packages-umi-src-scripts-realDev-js" class="headerlink" title="packages/umi/src/scripts/realDev.js"></a>packages/umi/src/scripts/realDev.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yParser <span class="keyword">from</span> <span class="string">'yargs-parser'</span>;</span><br><span class="line"><span class="keyword">import</span> buildDevOpts <span class="keyword">from</span> <span class="string">'../buildDevOpts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> closed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// kill(2) Ctrl-C</span></span><br><span class="line">process.once(<span class="string">'SIGINT'</span>, () =&gt; onSignal(<span class="string">'SIGINT'</span>));</span><br><span class="line"><span class="comment">// kill(3) Ctrl-\</span></span><br><span class="line">process.once(<span class="string">'SIGQUIT'</span>, () =&gt; onSignal(<span class="string">'SIGQUIT'</span>));</span><br><span class="line"><span class="comment">// kill(15) default</span></span><br><span class="line">process.once(<span class="string">'SIGTERM'</span>, () =&gt; onSignal(<span class="string">'SIGTERM'</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onSignal</span>(<span class="params">signal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (closed) <span class="keyword">return</span>;</span><br><span class="line">  closed = <span class="literal">true</span>;</span><br><span class="line">  process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'development'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> args = yParser(process.argv.slice(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'umi-build-dev/lib/Service'</span>).default;</span><br><span class="line"><span class="keyword">new</span> Service(buildDevOpts(args)).run(<span class="string">'dev'</span>, args);</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="packages-umi-src-test-js"><a href="#packages-umi-src-test-js" class="headerlink" title="packages/umi/src/test.js"></a>packages/umi/src/test.js</h5><p>测试脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yParser <span class="keyword">from</span> <span class="string">'yargs-parser'</span>;</span><br><span class="line"><span class="keyword">import</span> buildDevOpts <span class="keyword">from</span> <span class="string">'../buildDevOpts'</span>;</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'development'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> args = yParser(process.argv.slice(<span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'umi-build-dev/lib/Service'</span>).default;</span><br><span class="line"><span class="keyword">new</span> Service(buildDevOpts(args)).run(<span class="string">'test'</span>, args);</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-babel-js"><a href="#packages-umi-src-babel-js" class="headerlink" title="packages/umi/src/babel.js"></a>packages/umi/src/babel.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">context, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="built_in">require</span>.resolve(<span class="string">'babel-preset-umi'</span>),</span><br><span class="line">        &#123;</span><br><span class="line">          ...opts,</span><br><span class="line">          preact: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-createHistory-js"><a href="#packages-umi-src-createHistory-js" class="headerlink" title="packages/umi/src/createHistory.js"></a>packages/umi/src/createHistory.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createHistory <span class="keyword">from</span> <span class="string">'history/createBrowserHistory'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; normalizePath &#125; <span class="keyword">from</span> <span class="string">'./utils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> history = createHistory(opts);</span><br><span class="line">  <span class="keyword">if</span> (__UMI_HTML_SUFFIX) &#123;</span><br><span class="line">    <span class="keyword">const</span> oldPush = history.push;</span><br><span class="line">    <span class="keyword">const</span> oldReplace = history.replace;</span><br><span class="line">    history.push = <span class="function">(<span class="params">path, state</span>) =&gt;</span> &#123;</span><br><span class="line">      oldPush(normalizePath(path), state);</span><br><span class="line">    &#125;;</span><br><span class="line">    history.replace = <span class="function">(<span class="params">path, state</span>) =&gt;</span> &#123;</span><br><span class="line">      oldReplace(normalizePath(path), state);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> history;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-prompt-js"><a href="#packages-umi-src-prompt-js" class="headerlink" title="packages/umi/src/prompt.js"></a>packages/umi/src/prompt.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Prompt &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Prompt;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-renderRoutes-js"><a href="#packages-umi-src-renderRoutes-js" class="headerlink" title="packages/umi/src/renderRoutes.js"></a>packages/umi/src/renderRoutes.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Switch, Route, Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RouteInstanceMap = &#123;</span><br><span class="line">  <span class="keyword">get</span>(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> key._routeInternalComponent;</span><br><span class="line">  &#125;,</span><br><span class="line">  has(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> key._routeInternalComponent !== <span class="literal">undefined</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(key, value) &#123;</span><br><span class="line">    key._routeInternalComponent = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Support pass props from layout to child routes</span></span><br><span class="line"><span class="keyword">const</span> RouteWithProps = <span class="function">(<span class="params">&#123; path, exact, strict, render, location, sensitive, ...rest &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Route path=&#123;path&#125; exact=&#123;exact&#125; strict=&#123;strict&#125; location=&#123;location&#125; sensitive=&#123;sensitive&#125; render=&#123;props =&gt; render(&#123; ...props, ...rest &#125;)&#125; /&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCompatProps</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> compatProps = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (__UMI_BIGFISH_COMPAT) &#123;</span><br><span class="line">    <span class="keyword">if</span> (props.match &amp;&amp; props.match.params &amp;&amp; !props.params) &#123;</span><br><span class="line">      compatProps.params = props.match.params;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> compatProps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withRoutes</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (RouteInstanceMap.has(route)) &#123;</span><br><span class="line">    <span class="keyword">return</span> RouteInstanceMap.get(route);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; Routes &#125; = route;</span><br><span class="line">  <span class="keyword">let</span> len = Routes.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> Component = <span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; render, ...props &#125; = args;</span><br><span class="line">    <span class="keyword">return</span> render(props);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">while</span> (len &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> AuthRoute = Routes[len];</span><br><span class="line">    <span class="keyword">const</span> OldComponent = Component;</span><br><span class="line">    Component = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">      &lt;AuthRoute &#123;...props&#125;&gt;</span><br><span class="line">        &lt;OldComponent &#123;...props&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/AuthRoute&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">    len -= 1;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const ret = args =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; render, ...rest &#125; = args;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;RouteWithProps</span></span><br><span class="line"><span class="regexp">        &#123;...rest&#125;</span></span><br><span class="line"><span class="regexp">        render=&#123;props =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return &lt;Component &#123;...props&#125; route=&#123;route&#125; render=&#123;render&#125; /</span>&gt;;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  RouteInstanceMap.set(route, ret);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">renderRoutes</span>(<span class="params">routes, extraProps = &#123;&#125;, switchProps = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> routes ? (</span><br><span class="line">    &lt;Switch &#123;...switchProps&#125;&gt;</span><br><span class="line">      &#123;routes.map(<span class="function">(<span class="params">route, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (route.redirect) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">key</span>=<span class="string">&#123;route.key</span> || <span class="attr">i</span>&#125; <span class="attr">from</span>=<span class="string">&#123;route.path&#125;</span> <span class="attr">to</span>=<span class="string">&#123;route.redirect&#125;</span> <span class="attr">exact</span>=<span class="string">&#123;route.exact&#125;</span> <span class="attr">strict</span>=<span class="string">&#123;route.strict&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        const RouteRoute = route.Routes ? withRoutes(route) : RouteWithProps;</span></span><br><span class="line"><span class="xml">        return (</span></span><br><span class="line">          &lt;RouteRoute</span><br><span class="line">            key=&#123;route.key || i&#125;</span><br><span class="line">            path=&#123;route.path&#125;</span><br><span class="line">            exact=&#123;route.exact&#125;</span><br><span class="line">            strict=&#123;route.strict&#125;</span><br><span class="line">            sensitive=&#123;route.sensitive&#125;</span><br><span class="line">            render=&#123;props =&gt; &#123;</span><br><span class="line">              const childRoutes = renderRoutes(</span><br><span class="line">                route.routes,</span><br><span class="line">                &#123;&#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  location: props.location</span><br><span class="line">                &#125;</span><br><span class="line">              );</span><br><span class="line">              if (route.component) &#123;</span><br><span class="line">                const compatProps = getCompatProps(&#123;</span><br><span class="line">                  ...props,</span><br><span class="line">                  ...extraProps</span><br><span class="line">                &#125;);</span><br><span class="line">                const newProps = window.g_plugins.apply('modifyRouteProps', &#123;</span><br><span class="line">                  initialValue: &#123;</span><br><span class="line">                    ...props,</span><br><span class="line">                    ...extraProps,</span><br><span class="line">                    ...compatProps</span><br><span class="line">                  &#125;,</span><br><span class="line">                  args: &#123; route &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                return (</span><br><span class="line">                  &lt;route.component &#123;...newProps&#125; route=&#123;route&#125;&gt;</span><br><span class="line">                    &#123;childRoutes&#125;</span><br><span class="line">                  &lt;/route.component&gt;</span><br><span class="line">                );</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                return childRoutes;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;)&#125;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">  ) : null;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-runtimePlugin-js"><a href="#packages-umi-src-runtimePlugin-js" class="headerlink" title="packages/umi/src/runtimePlugin.js"></a>packages/umi/src/runtimePlugin.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">'assert'</span>;</span><br><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">'lodash/isPlainObject'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> plugins = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> validKeys = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  plugins = [];</span><br><span class="line">  validKeys = opts.validKeys || [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">use</span>(<span class="params">plugin</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(plugin).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> remove default</span></span><br><span class="line">    <span class="comment">// default 是为了兼容内部框架内置的一个 babel 插件问题</span></span><br><span class="line">    assert(validKeys.concat(<span class="string">'default'</span>).indexOf(key) &gt; <span class="number">-1</span>, <span class="string">`Invalid key <span class="subst">$&#123;key&#125;</span> from plugin`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  plugins.push(plugin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getItem</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  assert(validKeys.indexOf(key) &gt; <span class="number">-1</span>, <span class="string">`Invalid key <span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> plugins.filter(<span class="function"><span class="params">plugin</span> =&gt;</span> key <span class="keyword">in</span> plugin).map(<span class="function"><span class="params">plugin</span> =&gt;</span> plugin[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> last = funcs.pop();</span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span> b(a), last);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">item, &#123; initialValue &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">'string'</span>) item = getItem(item);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _compose(...item, initialValue)();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">apply</span>(<span class="params">item, &#123; initialValue, args &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">'string'</span>) item = getItem(item);</span><br><span class="line">  assert(<span class="built_in">Array</span>.isArray(item), <span class="string">`item must be Array`</span>);</span><br><span class="line">  <span class="keyword">return</span> item.reduce(<span class="function">(<span class="params">memo, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    assert(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>, <span class="string">`applied item must be function`</span>);</span><br><span class="line">    <span class="keyword">return</span> fn(memo, args);</span><br><span class="line">  &#125;, initialValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">applyForEach</span>(<span class="params">item, &#123; initialValue &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">'string'</span>) item = getItem(item);</span><br><span class="line">  assert(<span class="built_in">Array</span>.isArray(item), <span class="string">`item must be Array`</span>);</span><br><span class="line">  item.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">    assert(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>, <span class="string">`applied item must be function`</span>);</span><br><span class="line">    fn(initialValue);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shadow merge</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeConfig</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">'string'</span>) item = getItem(item);</span><br><span class="line">  assert(<span class="built_in">Array</span>.isArray(item), <span class="string">`item must be Array`</span>);</span><br><span class="line">  <span class="keyword">return</span> item.reduce(<span class="function">(<span class="params">memo, config</span>) =&gt;</span> &#123;</span><br><span class="line">    assert(isPlainObject(config), <span class="string">`Config is not plain object`</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; ...memo, ...config &#125;;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="packages-umi-src-utils-js"><a href="#packages-umi-src-utils-js" class="headerlink" title="packages/umi/src/utils.js"></a>packages/umi/src/utils.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHtmlAffix</span>(<span class="params">pathname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (pathname.slice(<span class="number">-1</span>) === <span class="string">'/'</span> || pathname.slice(<span class="number">-5</span>) === <span class="string">'.html'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> pathname;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;pathname&#125;</span>.html`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizePath</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [pathname, search] = path.split(<span class="string">'?'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;addHtmlAffix(pathname)&#125;</span><span class="subst">$&#123;search ? <span class="string">'?'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;search || <span class="string">''</span>&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...path,</span><br><span class="line">    pathname: addHtmlAffix(path.pathname)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="packages-umi-utils"><a href="#packages-umi-utils" class="headerlink" title="packages/umi-utils"></a>packages/umi-utils</h3><p>辅助 umi 的模块</p><h4 id="packages-umi-utils-src-winPath-js"><a href="#packages-umi-utils-src-winPath-js" class="headerlink" title="packages/umi-utils/src/winPath.js"></a>packages/umi-utils/src/winPath.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将Windows反斜杠路径转换为斜杠路径：foo\\bar➔foo/ba</span></span><br><span class="line"><span class="keyword">import</span> slash <span class="keyword">from</span> <span class="string">'slash2'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> slash(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-4-30"><a href="#总结-4-30" class="headerlink" title="总结 4/30"></a>总结 4/30</h3><p>通过源码和视频学习了命令行运行包文件，虽然只是打印了<code>hello txp</code>（<a href="https://github.com/ShawDanon/txp/tree/master/packages/txp-first" target="_blank" rel="noopener">demo</a>）,阅读源码的同时对 node 印象更深刻了。疑惑的是 router 文件中的<code>window.g_history</code>不知道哪儿定义的，接下来需要看<code>umi-build-dev</code>模块了解构建运行的情况。</p><h3 id="参考二"><a href="#参考二" class="headerlink" title="参考二"></a>参考二</h3><p><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">配置 npm</a><br><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">Node.js 中文网</a><br><a href="https://www.bilibili.com/video/av47877835" target="_blank" rel="noopener">基于 umi 封装自己的框架：sekiro</a></p><h2 id="学习-UMI（三）"><a href="#学习-UMI（三）" class="headerlink" title="学习 UMI（三）"></a>学习 UMI（三）</h2><p><a href="mailto:umi@2.6.17" target="_blank" rel="noopener">umi@2.6.17</a></p><h3 id="运行-umi-代码"><a href="#运行-umi-代码" class="headerlink" title="运行 umi 代码"></a>运行 umi 代码</h3><p>阅读代码，看文档，总感觉缺点什么，经过云嫌和小虎两位大佬帮助，开始了 umi 代码调试之旅。其实上个月就想边运行边看代码，只是连安装开发依赖都没解决，所以拖到了现在。<br>整个流程如下（也可以参考<a href="https://github.com/umijs/umi/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">贡献文档</a>）：<br>1、克隆 umi 项目，在 umi 更目录装开发依赖，贡献文档是推荐用 yarn 装，不过要是网络不好，没有科学上网条件，会卡在装<code>puppeteer</code>上面，具体原因不是包上面是要下载<code>Chromium</code>的时候网络超时失败的。所以解决方案是通过 cnpm 装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i</span><br></pre></td></tr></table></figure><p>2、安装各个包依赖，因为用的 lerna 作为包管理工具,所以运行<code>lerna bootstrap</code>进行安装，当然也可可以参照贡献文档使用<code>yarn bootstrap</code>装，这只是 umi 包的一个 script 转换而已。<br>3、为了方便使用需要把 umi 链接到全局，链接到全局和全局装包效果是一样的。首先切换到 umi 包目录，<code>cd packages/umi</code>，然后可以使用<code>npm link</code>或者<code>yarn link</code>，建议使用 yarn，npm 链接有点慢。<br>4、链接完成后就可以运行 umi 的命令了，我们试一试，结果提示找不到 lib 目录。因此我们需要切回根目录，运行<code>yarn build</code>对所有包进行构建生成 lib 目录文件，贡献文档命令是<code>yarn build --watch</code>可以实现实时构建。如此运行 umi 命令就和直接通过<code>npm i umi -g</code>命令安装一样了。</p><h3 id="inspect"><a href="#inspect" class="headerlink" title="inspect"></a>inspect</h3><p>目前能够运行本地 umi 代码了，可以在 umi 中加入<code>console.log()</code>来打印需要的参数，但是这样也不是很方面来理解代码。参照<a href="https://umijs.org/zh/guide/faq.html#%E5%A6%82%E4%BD%95%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95" target="_blank" rel="noopener">官方文档</a>可以通过 inspect 进行断点调试。<br>inspect 调试方法：<br>1、全局安装 node-inspect 包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i node-inspect -g</span><br></pre></td></tr></table></figure><p>2、在 umi 包目录运行<code>node --inspect-brk ./bin/umi dev</code>,<code>./bin/umi</code>是运行文件相对执行环境位置,<code>dev</code>是执行参数。成功运行能够看到打印信息如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Debugger listening on ws:<span class="comment">//127.0.0.1:9229/71f532b3-d619-4898-82ee-3145d817e5da</span></span><br><span class="line">For help, <span class="attr">see</span>: https:<span class="comment">//nodejs.org/en/docs/inspector</span></span><br></pre></td></tr></table></figure><p>3、进入调试器有两种方法，第一种是在谷歌浏览器输入<code>chrome://inspect/#devices</code>中打开，第二种是谷歌浏览器按 F12 唤醒开发者工具里打开，如下图。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2019/5-27-1.png" alt="图一" title>                </div>                <div class="image-caption">图一</div>            </figure><br>调试器如下图，基本操作和平时调试差不多。唯一遇到的坑就是 require 其他文件的时候进不去，试过在代码里加 debugger 也不行。最后发现左侧 Node 栏里面的文件是根据代码运行变化的，require 模块后 Node 栏里就会多出相应模块的代码，然后这个时候通过 Node 栏打开代码打断点即可调试。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2019/5-27-2.png" alt="图二" title>                </div>                <div class="image-caption">图二</div>            </figure></p><h3 id="umi-命令内部运行过程"><a href="#umi-命令内部运行过程" class="headerlink" title="umi 命令内部运行过程"></a>umi 命令内部运行过程</h3><p>目前主要看了 umi 包和 umi-build-dev 包，umi 主要提供运行时接口和编译时命令引导；umi-build-dev 包主要是编译时的工作，还包含内置插件（dev、build 等）。<br>例如运行<code>umi</code>这个命令不加任何参数：</p><ol><li>首先是进入 <code>packages/umi/bin/umi.js</code> 主文件，其功能是将命令分发到<code>packages/umi/src/cli.js</code>文件。</li><li>cli 文件对 umi 包进行检查，会提示版本更新。然后把命令分发到 script 文件执行命令，如果命令不存在直接执行命令。</li><li>执行命令文件<code>packages/umi-build-dev/src/Service</code>是一个类，构造函数会注册 Babel、解析用户配置、解析插件（解析插件会把内置插件和用户配置插件整合到一个数组中）。</li><li>然后命令执行运行类的 run 方法，如果 umi 命令没有参数则默认运行 help 命令。该方法会先初始化（加载环境.env、初始化插件、加载用户配置）。然后执行运行命令方法，该方法执行 umi 内部插件。</li></ol><h3 id="看过的一些源码及注释-packages-umi-build-dev"><a href="#看过的一些源码及注释-packages-umi-build-dev" class="headerlink" title="看过的一些源码及注释 packages/umi-build-dev"></a>看过的一些源码及注释 packages/umi-build-dev</h3><h4 id="packages-umi-build-dev-src-Service"><a href="#packages-umi-build-dev-src-Service" class="headerlink" title="packages/umi-build-dev/src/Service"></a>packages/umi-build-dev/src/Service</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chalk <span class="keyword">from</span> <span class="string">'chalk'</span>; <span class="comment">//终端字符串样式做得很好(终端字符串颜色处理插件)</span></span><br><span class="line"><span class="comment">//path.dirname() 方法返回 path 的目录名，类似于 Unix 的 dirname 命令。</span></span><br><span class="line"><span class="comment">//path.join() 方法返回字符串拼接路径。</span></span><br><span class="line"><span class="keyword">import</span> &#123; join, dirname &#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="comment">//existsSync 同步通过检查文件系统来测试给定的路径是否存在。</span></span><br><span class="line"><span class="comment">//readFileSync 同步读取文件</span></span><br><span class="line"><span class="comment">//writeFileSync 同步写入文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; existsSync, readFileSync, writeFileSync &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">'assert'</span>; <span class="comment">//此模块用于为您的应用程序编写单元测试</span></span><br><span class="line"><span class="keyword">import</span> mkdirp <span class="keyword">from</span> <span class="string">'mkdirp'</span>; <span class="comment">//mkdir -p作用，确保目录名称存在，如果目录不存在的就新创建一个。</span></span><br><span class="line"><span class="comment">//assign 浅拷贝</span></span><br><span class="line"><span class="comment">//cloneDeep 深拷贝</span></span><br><span class="line"><span class="keyword">import</span> &#123; assign, cloneDeep &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">'dotenv'</span>; <span class="comment">//Dotenv是一个零依赖模块，可以将.env文件中的环境变量加载到process.env</span></span><br><span class="line"><span class="keyword">import</span> signale <span class="keyword">from</span> <span class="string">'signale'</span>; <span class="comment">//可记录和可配置到核心，signale可用于记录目的，状态报告，以及处理其他节点模块和应用程序的输出呈现过程。终端中命令执行成功失败异常等的状态</span></span><br><span class="line"><span class="comment">//deprecate 用于终端上提示方法被弃用,传入(方法名，...想要提示的其他信息),调用方法终端输出提示信息。</span></span><br><span class="line"><span class="keyword">import</span> &#123; deprecate &#125; <span class="keyword">from</span> <span class="string">'umi-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> getPaths <span class="keyword">from</span> <span class="string">'./getPaths'</span>;</span><br><span class="line"><span class="keyword">import</span> getPlugins <span class="keyword">from</span> <span class="string">'./getPlugins'</span>;</span><br><span class="line"><span class="keyword">import</span> PluginAPI <span class="keyword">from</span> <span class="string">'./PluginAPI'</span>;</span><br><span class="line"><span class="keyword">import</span> UserConfig <span class="keyword">from</span> <span class="string">'./UserConfig'</span>;</span><br><span class="line"><span class="keyword">import</span> registerBabel <span class="keyword">from</span> <span class="string">'./registerBabel'</span>;</span><br><span class="line"><span class="keyword">import</span> getCodeFrame <span class="keyword">from</span> <span class="string">'./utils/getCodeFrame'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'umi-build-dev:Service'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="comment">//构造函数传入目录</span></span><br><span class="line">  <span class="keyword">constructor</span>(&#123; cwd &#125;) &#123;</span><br><span class="line">    <span class="comment">//cwd为app根目录</span></span><br><span class="line">    <span class="comment">//process.cwd() 方法返回 Node.js 进程的当前工作目录。</span></span><br><span class="line">    <span class="keyword">this</span>.cwd = cwd || process.cwd(); <span class="comment">//如果不传入cwd，cwd为Node.js 进程的当前工作目录.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.pkg = <span class="built_in">require</span>(join(<span class="keyword">this</span>.cwd, <span class="string">'package.json'</span>)); <span class="comment">// 引入项目package.json，pkg为json对象</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pkg = &#123;&#125;; <span class="comment">//不存在package.json则pkg为空对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    registerBabel(&#123;</span><br><span class="line">      cwd: <span class="keyword">this</span>.cwd</span><br><span class="line">    &#125;); <span class="comment">//注册Babel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.commands = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.pluginHooks = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.pluginMethods = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.generators = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析用户配置</span></span><br><span class="line">    <span class="keyword">this</span>.config = UserConfig.getConfig(&#123;</span><br><span class="line">      cwd: <span class="keyword">this</span>.cwd,</span><br><span class="line">      service: <span class="keyword">this</span></span><br><span class="line">    &#125;);</span><br><span class="line">    debug(<span class="string">`user config: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.config)&#125;</span> `</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析插件，内置插件和用户插件解析</span></span><br><span class="line">    <span class="keyword">this</span>.plugins = <span class="keyword">this</span>.resolvePlugins();</span><br><span class="line">    <span class="keyword">this</span>.extraPlugins = [];</span><br><span class="line">    debug(<span class="string">`plugins: <span class="subst">$&#123;<span class="keyword">this</span>.plugins.map(p =&gt; p.id).join(<span class="string">' | '</span>)&#125;</span> `</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相对路径</span></span><br><span class="line">    <span class="keyword">this</span>.paths = getPaths(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resolvePlugins() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      assert(<span class="built_in">Array</span>.isArray(<span class="keyword">this</span>.config.plugins || []), <span class="string">`Configure item <span class="subst">$&#123;chalk.underline.cyan(<span class="string">'plugins'</span>)&#125;</span> should be Array, but got <span class="subst">$&#123;chalk.red(<span class="keyword">typeof</span> <span class="keyword">this</span>.config.plugins)&#125;</span> `</span>);</span><br><span class="line">      <span class="keyword">return</span> getPlugins(&#123;</span><br><span class="line">        cwd: <span class="keyword">this</span>.cwd,</span><br><span class="line">        plugins: <span class="keyword">this</span>.config.plugins || []</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.UMI_TEST) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        signale.error(e);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">//解析插件</span></span><br><span class="line"></span><br><span class="line">  initPlugin(plugin) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, apply, opts &#125; = plugin;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      assert(</span><br><span class="line">        <span class="keyword">typeof</span> apply === <span class="string">'function'</span>,</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">plugin must export a function, e.g.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default function (api) &#123;</span></span><br><span class="line"><span class="string">  // Implement functions via api</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>.trim()</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">const</span> api = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">new</span> PluginAPI(id, <span class="keyword">this</span>), &#123;</span><br><span class="line">        <span class="keyword">get</span>: (target, prop) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.pluginMethods[prop]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.pluginMethods[prop];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            [</span><br><span class="line">              <span class="comment">// methods</span></span><br><span class="line">              <span class="string">'changePluginOption'</span>,</span><br><span class="line">              <span class="string">'applyPlugins'</span>,</span><br><span class="line">              <span class="string">'_applyPluginsAsync'</span>,</span><br><span class="line">              <span class="string">'writeTmpFile'</span>,</span><br><span class="line">              <span class="comment">// properties</span></span><br><span class="line">              <span class="string">'cwd'</span>,</span><br><span class="line">              <span class="string">'config'</span>,</span><br><span class="line">              <span class="string">'webpackConfig'</span>,</span><br><span class="line">              <span class="string">'pkg'</span>,</span><br><span class="line">              <span class="string">'paths'</span>,</span><br><span class="line">              <span class="string">'routes'</span>,</span><br><span class="line">              <span class="comment">// dev methods</span></span><br><span class="line">              <span class="string">'restart'</span>,</span><br><span class="line">              <span class="string">'printError'</span>,</span><br><span class="line">              <span class="string">'printWarn'</span>,</span><br><span class="line">              <span class="string">'refreshBrowser'</span>,</span><br><span class="line">              <span class="string">'rebuildTmpFiles'</span>,</span><br><span class="line">              <span class="string">'rebuildHTML'</span></span><br><span class="line">            ].includes(prop)</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>[prop] === <span class="string">'function'</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>[prop].bind(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>[prop];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target[prop];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      api.onOptionChange = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        assert(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>, <span class="string">`The first argument for api.onOptionChange should be function in <span class="subst">$&#123;id&#125;</span>.`</span>);</span><br><span class="line">        plugin.onOptionChange = fn;</span><br><span class="line">      &#125;;</span><br><span class="line">      apply(api, opts);</span><br><span class="line">      plugin._api = api;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.UMI_TEST) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        signale.error(</span><br><span class="line">          <span class="string">`</span></span><br><span class="line"><span class="string">Plugin <span class="subst">$&#123;chalk.cyan.underline(id)&#125;</span> initialize failed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$&#123;getCodeFrame(e, &#123; cwd: <span class="keyword">this</span>.cwd &#125;</span>)&#125;</span></span><br><span class="line"><span class="string">`</span>.trim()</span><br><span class="line">        );</span><br><span class="line">        debug(e);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">//初始化插件</span></span><br><span class="line"></span><br><span class="line">  initPlugins() &#123;</span><br><span class="line">    <span class="keyword">this</span>.plugins.forEach(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.initPlugin(plugin);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>.extraPlugins.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> extraPlugins = cloneDeep(<span class="keyword">this</span>.extraPlugins);</span><br><span class="line">      <span class="keyword">this</span>.extraPlugins = [];</span><br><span class="line">      extraPlugins.forEach(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.initPlugin(plugin);</span><br><span class="line">        <span class="keyword">this</span>.plugins.push(plugin);</span><br><span class="line">      &#125;);</span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line">      assert(count &lt;= <span class="number">10</span>, <span class="string">`插件注册死循环？`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Throw error for methods that can't be called after plugins is initialized</span></span><br><span class="line">    <span class="keyword">this</span>.plugins.forEach(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">      [<span class="string">'onOptionChange'</span>, <span class="string">'register'</span>, <span class="string">'registerMethod'</span>, <span class="string">'registerPlugin'</span>].forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">        plugin._api[method] = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`api.<span class="subst">$&#123;method&#125;</span> () should not be called after plugin is initialized.`</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="comment">//初始化插件集</span></span><br><span class="line"></span><br><span class="line">  changePluginOption(id, newOpts) &#123;</span><br><span class="line">    assert(id, <span class="string">`id must supplied`</span>);</span><br><span class="line">    <span class="keyword">const</span> plugin = <span class="keyword">this</span>.plugins.filter(<span class="function"><span class="params">p</span> =&gt;</span> p.id === id)[<span class="number">0</span>];</span><br><span class="line">    assert(plugin, <span class="string">`plugin <span class="subst">$&#123;id&#125;</span> not found`</span>);</span><br><span class="line">    plugin.opts = newOpts;</span><br><span class="line">    <span class="keyword">if</span> (plugin.onOptionChange) &#123;</span><br><span class="line">      plugin.onOptionChange(newOpts);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.restart(<span class="string">`plugin <span class="subst">$&#123;id&#125;</span> 's option changed`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  applyPlugins(key, opts = &#123;&#125;) &#123;</span><br><span class="line">    debug(<span class="string">`apply plugins <span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params"><span class="keyword">this</span>.pluginHooks[key] || []</span>).<span class="params">reduce</span>(<span class="params">(memo, &#123; fn &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fn(&#123;</span><br><span class="line">          memo,</span><br><span class="line">          args: opts.args</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(chalk.red(<span class="string">`Plugin apply failed: <span class="subst">$&#123;e.message&#125;</span>`</span>));</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, opts.initialValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> _applyPluginsAsync(key, opts = &#123;&#125;) &#123;</span><br><span class="line">    debug(<span class="string">`apply plugins async <span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> hooks = <span class="keyword">this</span>.pluginHooks[key] || [];</span><br><span class="line">    <span class="keyword">let</span> memo = opts.initialValue;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> hook <span class="keyword">of</span> hooks) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; fn &#125; = hook;</span><br><span class="line">      memo = <span class="keyword">await</span> fn(&#123;</span><br><span class="line">        memo,</span><br><span class="line">        args: opts.args</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  loadEnv() &#123;</span><br><span class="line">    <span class="keyword">const</span> basePath = join(<span class="keyword">this</span>.cwd, <span class="string">'.env'</span>); <span class="comment">//基础配置路径</span></span><br><span class="line">    <span class="keyword">const</span> localPath = <span class="string">`<span class="subst">$&#123;basePath&#125;</span>.local`</span>; <span class="comment">//本地配置路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> load = <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (existsSync(path)) &#123;</span><br><span class="line">        debug(<span class="string">`load env from <span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">const</span> parsed = parse(readFileSync(path, <span class="string">'utf-8'</span>));</span><br><span class="line">        <span class="built_in">Object</span>.keys(parsed).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!process.env.hasOwnProperty(key)) &#123;</span><br><span class="line">            process.env[key] = parsed[key];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    load(basePath); <span class="comment">//加载基础配置</span></span><br><span class="line">    load(localPath); <span class="comment">//加载本地配置，覆盖基础配置</span></span><br><span class="line">  &#125; <span class="comment">//加载环境</span></span><br><span class="line"></span><br><span class="line">  writeTmpFile(file, content) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; paths &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> path = join(paths.absTmpDirPath, file);</span><br><span class="line">    mkdirp.sync(dirname(path));</span><br><span class="line">    writeFileSync(path, content, <span class="string">'utf-8'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="comment">// 加载环境</span></span><br><span class="line">    <span class="keyword">this</span>.loadEnv();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化插件</span></span><br><span class="line">    <span class="keyword">this</span>.initPlugins();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载用户配置</span></span><br><span class="line">    <span class="keyword">const</span> userConfig = <span class="keyword">new</span> UserConfig(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">const</span> config = userConfig.getConfig(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    mergeConfig(<span class="keyword">this</span>.config, config);</span><br><span class="line">    <span class="keyword">this</span>.userConfig = userConfig;</span><br><span class="line">    <span class="keyword">if</span> (config.browserslist) &#123;</span><br><span class="line">      deprecate(<span class="string">'config.browserslist'</span>, <span class="string">'use config.targets instead'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    debug(<span class="string">'got user config'</span>);</span><br><span class="line">    debug(<span class="keyword">this</span>.config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assign user's outputPath config to paths object</span></span><br><span class="line">    <span class="keyword">if</span> (config.outputPath) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; paths &#125; = <span class="keyword">this</span>;</span><br><span class="line">      paths.outputPath = config.outputPath;</span><br><span class="line">      paths.absOutputPath = join(paths.cwd, config.outputPath);</span><br><span class="line">    &#125;</span><br><span class="line">    debug(<span class="string">'got paths'</span>);</span><br><span class="line">    debug(<span class="keyword">this</span>.paths);</span><br><span class="line">  &#125; <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">  registerCommand(name, opts, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> opts === <span class="string">'function'</span>) &#123;</span><br><span class="line">      fn = opts;</span><br><span class="line">      opts = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    opts = opts || &#123;&#125;;</span><br><span class="line">    assert(!(name <span class="keyword">in</span> <span class="keyword">this</span>.commands), <span class="string">`Command <span class="subst">$&#123;name&#125;</span> exists, please select another one.`</span>);</span><br><span class="line">    <span class="keyword">this</span>.commands[name] = &#123; fn, opts &#125;;</span><br><span class="line">  &#125; <span class="comment">//注册命令，在PluginAPI中调用</span></span><br><span class="line"></span><br><span class="line">  run(name = <span class="string">'help'</span>, args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.init(); <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.runCommand(name, args); <span class="comment">//运行help命令</span></span><br><span class="line">  &#125; <span class="comment">//启动servers</span></span><br><span class="line"></span><br><span class="line">  runCommand(rawName, rawArgs) &#123;</span><br><span class="line">    debug(<span class="string">`raw command name: <span class="subst">$&#123;rawName&#125;</span>, args: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(rawArgs)&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123; name, args &#125; = <span class="keyword">this</span>.applyPlugins(<span class="string">'_modifyCommand'</span>, &#123;</span><br><span class="line">      initialValue: &#123;</span><br><span class="line">        name: rawName,</span><br><span class="line">        args: rawArgs</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    debug(<span class="string">`run <span class="subst">$&#123;name&#125;</span> with args <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(args)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> command = <span class="keyword">this</span>.commands[name];</span><br><span class="line">    <span class="keyword">if</span> (!command) &#123;</span><br><span class="line">      signale.error(<span class="string">`Command <span class="subst">$&#123;chalk.underline.cyan(name)&#125;</span> does not exists`</span>);</span><br><span class="line">      process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; fn, opts &#125; = command;</span><br><span class="line">    <span class="keyword">if</span> (opts.webpack) &#123;</span><br><span class="line">      <span class="comment">// webpack config</span></span><br><span class="line">      <span class="keyword">this</span>.webpackConfig = <span class="built_in">require</span>(<span class="string">'./getWebpackConfig'</span>).default(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn(args);</span><br><span class="line">  &#125; <span class="comment">//运行命令</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeConfig</span>(<span class="params">oldConfig, newConfig</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(oldConfig).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> newConfig)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> oldConfig[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  assign(oldConfig, newConfig);</span><br><span class="line">  <span class="keyword">return</span> oldConfig;</span><br><span class="line">&#125; <span class="comment">//合并配置项</span></span><br></pre></td></tr></table></figure><h4 id="packages-umi-build-dev-src-registerBabel"><a href="#packages-umi-build-dev-src-registerBabel" class="headerlink" title="packages/umi-build-dev/src/registerBabel"></a>packages/umi-build-dev/src/registerBabel</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; join, isAbsolute &#125; <span class="keyword">from</span> <span class="string">'path'</span>; <span class="comment">//引入拼接路径模块和判断是否为绝对路劲模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; existsSync &#125; <span class="keyword">from</span> <span class="string">'fs'</span>; <span class="comment">//同步检查路肩是否存在模块</span></span><br><span class="line"><span class="keyword">import</span> registerBabel <span class="keyword">from</span> <span class="string">'af-webpack/registerBabel'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; winPath &#125; <span class="keyword">from</span> <span class="string">'umi-utils'</span>;</span><br><span class="line"><span class="comment">//获取umi配置文件路径的数组</span></span><br><span class="line"><span class="keyword">import</span> &#123; getConfigPaths &#125; <span class="keyword">from</span> <span class="string">'umi-core/lib/getUserConfig'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> files = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initFiles</span>(<span class="params">cwd</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (files) <span class="keyword">return</span>;</span><br><span class="line">  files = getConfigPaths(cwd); <span class="comment">//传入node运行时路径</span></span><br><span class="line">&#125; <span class="comment">//初始化文件，若文件存在则忽略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addBabelRegisterFiles</span>(<span class="params">extraFiles, &#123; cwd &#125;</span>) </span>&#123;</span><br><span class="line">  initFiles(cwd);</span><br><span class="line">  files.push(...extraFiles);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">&#123; cwd &#125;</span>) </span>&#123;</span><br><span class="line">  initFiles(cwd);</span><br><span class="line">  <span class="keyword">const</span> only = files.map(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fullPath = isAbsolute(f) ? f : join(cwd, f);</span><br><span class="line">    <span class="keyword">return</span> winPath(fullPath);</span><br><span class="line">  &#125;); <span class="comment">//转化路径</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> absSrcPath = join(cwd, <span class="string">'src'</span>); <span class="comment">//获取src目录路径</span></span><br><span class="line">  <span class="keyword">if</span> (!existsSync(absSrcPath)) &#123;</span><br><span class="line">    absSrcPath = cwd;</span><br><span class="line">  &#125; <span class="comment">//如果不存在src目录则把根目录作为src目录</span></span><br><span class="line"></span><br><span class="line">  registerBabel(&#123;</span><br><span class="line">    <span class="comment">// only suport glob</span></span><br><span class="line">    <span class="comment">// ref: https://babeljs.io/docs/en/next/babel-core.html#configitem-type</span></span><br><span class="line">    only,</span><br><span class="line">    babelPreset: [</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'babel-preset-umi'</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        env: &#123; <span class="attr">targets</span>: &#123; <span class="attr">node</span>: <span class="number">8</span> &#125; &#125;,</span><br><span class="line">        transformRuntime: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    babelPlugins: [</span><br><span class="line">      [</span><br><span class="line">        <span class="built_in">require</span>.resolve(<span class="string">'babel-plugin-module-resolver'</span>),</span><br><span class="line">        &#123;</span><br><span class="line">          alias: &#123;</span><br><span class="line">            <span class="string">'@'</span>: absSrcPath</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="packages-umi-build-dev-src-UserConfig"><a href="#packages-umi-build-dev-src-UserConfig" class="headerlink" title="packages/umi-build-dev/src/UserConfig"></a>packages/umi-build-dev/src/UserConfig</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> requireindex <span class="keyword">from</span> <span class="string">'requireindex'</span>;</span><br><span class="line"><span class="keyword">import</span> chalk <span class="keyword">from</span> <span class="string">'chalk'</span>;</span><br><span class="line"><span class="keyword">import</span> didyoumean <span class="keyword">from</span> <span class="string">'didyoumean'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> signale <span class="keyword">from</span> <span class="string">'signale'</span>;</span><br><span class="line"><span class="keyword">import</span> getUserConfig, &#123; getConfigPaths, getConfigFile, getConfigByConfigFile, cleanConfigRequireCache &#125; <span class="keyword">from</span> <span class="string">'umi-core/lib/getUserConfig'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; watch, unwatch &#125; <span class="keyword">from</span> <span class="string">'./getConfig/watch'</span>;</span><br><span class="line"><span class="keyword">import</span> isEqual <span class="keyword">from</span> <span class="string">'./isEqual'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> getConfig(opts = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; cwd, service &#125; = opts;</span><br><span class="line">    <span class="keyword">return</span> getUserConfig(&#123;</span><br><span class="line">      cwd,</span><br><span class="line">      defaultConfig: service.applyPlugins(<span class="string">'modifyDefaultConfig'</span>, &#123;</span><br><span class="line">        initialValue: &#123;&#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(service) &#123;</span><br><span class="line">    <span class="keyword">this</span>.service = service;</span><br><span class="line">    <span class="keyword">this</span>.configFailed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.config = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.file = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.relativeFile = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.watch = watch;</span><br><span class="line">    <span class="keyword">this</span>.unwatch = unwatch;</span><br><span class="line">    <span class="keyword">this</span>.initConfigPlugins();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initConfigPlugins() &#123;</span><br><span class="line">    <span class="keyword">const</span> map = requireindex(join(__dirname, <span class="string">'getConfig/configPlugins'</span>));</span><br><span class="line">    <span class="keyword">let</span> plugins = <span class="built_in">Object</span>.keys(map).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> map[key].default;</span><br><span class="line">    &#125;);</span><br><span class="line">    plugins = <span class="keyword">this</span>.service.applyPlugins(<span class="string">'_registerConfig'</span>, &#123;</span><br><span class="line">      initialValue: plugins</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.plugins = plugins.map(<span class="function"><span class="params">p</span> =&gt;</span> p(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printError(messages) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.service.printError) <span class="keyword">this</span>.service.printError(messages);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getConfig(opts = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; paths, cwd &#125; = <span class="keyword">this</span>.service;</span><br><span class="line">    <span class="keyword">const</span> &#123; force, setConfig &#125; = opts;</span><br><span class="line">    <span class="keyword">const</span> defaultConfig = <span class="keyword">this</span>.service.applyPlugins(<span class="string">'modifyDefaultConfig'</span>, &#123;</span><br><span class="line">      initialValue: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> file = getConfigFile(cwd);</span><br><span class="line">    <span class="keyword">this</span>.file = file;</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">      <span class="keyword">return</span> defaultConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 强制读取，不走 require 缓存</span></span><br><span class="line">    <span class="keyword">if</span> (force) &#123;</span><br><span class="line">      cleanConfigRequireCache(cwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> config = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> relativeFile = file.replace(<span class="string">`<span class="subst">$&#123;paths.cwd&#125;</span>/`</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">this</span>.relativeFile = relativeFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> onError = <span class="function">(<span class="params">e, file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> msg = <span class="string">`配置文件 "<span class="subst">$&#123;file.replace(<span class="string">`<span class="subst">$&#123;paths.cwd&#125;</span>/`</span>, <span class="string">''</span>)&#125;</span>" 解析出错，请检查语法。</span></span><br><span class="line"><span class="string">\r\n<span class="subst">$&#123;e.toString()&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">this</span>.printError(msg);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    config = getConfigByConfigFile(file, &#123;</span><br><span class="line">      defaultConfig,</span><br><span class="line">      onError</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    config = <span class="keyword">this</span>.service.applyPlugins(<span class="string">'_modifyConfig'</span>, &#123;</span><br><span class="line">      initialValue: config</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="keyword">this</span>.plugins) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; name, validate &#125; = plugin;</span><br><span class="line">      <span class="keyword">if</span> (config[name] &amp;&amp; validate) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          plugin.validate.call(&#123; cwd &#125;, config[name]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="comment">// 校验出错后要把值设到缓存的 config 里，确保 watch 判断时才能拿到正确的值</span></span><br><span class="line">          <span class="keyword">if</span> (setConfig) &#123;</span><br><span class="line">            setConfig(config);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.printError(e.message);</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`配置 <span class="subst">$&#123;name&#125;</span> 校验失败, <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找下不匹配的 name</span></span><br><span class="line">    <span class="keyword">const</span> pluginNames = <span class="keyword">this</span>.plugins.map(<span class="function"><span class="params">p</span> =&gt;</span> p.name);</span><br><span class="line">    <span class="built_in">Object</span>.keys(config).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!pluginNames.includes(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (opts.setConfig) &#123;</span><br><span class="line">          opts.setConfig(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> affixmsg = <span class="string">`选择 "<span class="subst">$&#123;pluginNames.join(<span class="string">', '</span>)&#125;</span>" 中的一项`</span>;</span><br><span class="line">        <span class="keyword">const</span> guess = didyoumean(key, pluginNames);</span><br><span class="line">        <span class="keyword">const</span> midMsg = guess ? <span class="string">`你是不是想配置 "<span class="subst">$&#123;guess&#125;</span>" ？ 或者`</span> : <span class="string">'请'</span>;</span><br><span class="line">        <span class="keyword">const</span> msg = <span class="string">`"<span class="subst">$&#123;relativeFile&#125;</span>" 中配置的 "<span class="subst">$&#123;key&#125;</span>" 并非约定的配置项，<span class="subst">$&#123;midMsg&#125;</span><span class="subst">$&#123;affixmsg&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">this</span>.printError(msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setConfig(config) &#123;</span><br><span class="line">    <span class="keyword">this</span>.config = config;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  watchWithDevServer() &#123;</span><br><span class="line">    <span class="comment">// 配置插件的监听</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="keyword">this</span>.plugins) &#123;</span><br><span class="line">      <span class="keyword">if</span> (plugin.watch) &#123;</span><br><span class="line">        plugin.watch();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置文件的监听</span></span><br><span class="line">    <span class="keyword">this</span>.watchConfigs(<span class="function">(<span class="params">event, path</span>) =&gt;</span> &#123;</span><br><span class="line">      signale.debug(<span class="string">`[<span class="subst">$&#123;event&#125;</span>] <span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newConfig = <span class="keyword">this</span>.getConfig(&#123;</span><br><span class="line">          force: <span class="literal">true</span>,</span><br><span class="line">          setConfig: <span class="function"><span class="params">newConfig</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.config = newConfig;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从失败中恢复过来，需要 reload 一次</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.configFailed) &#123;</span><br><span class="line">          <span class="keyword">this</span>.configFailed = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">this</span>.service.refreshBrowser();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> oldConfig = cloneDeep(<span class="keyword">this</span>.config);</span><br><span class="line">        <span class="keyword">this</span>.config = newConfig;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="keyword">this</span>.plugins) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; name &#125; = plugin;</span><br><span class="line">          <span class="keyword">if</span> (!isEqual(newConfig[name], oldConfig[name])) &#123;</span><br><span class="line">            <span class="keyword">this</span>.service.config[name] = newConfig[name];</span><br><span class="line">            <span class="keyword">this</span>.service.applyPlugins(<span class="string">'onConfigChange'</span>, &#123;</span><br><span class="line">              args: &#123;</span><br><span class="line">                newConfig</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (plugin.onChange) &#123;</span><br><span class="line">              plugin.onChange(newConfig, oldConfig);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.configFailed = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">console</span>.error(chalk.red(<span class="string">`watch handler failed, since <span class="subst">$&#123;e.message&#125;</span>`</span>));</span><br><span class="line">        <span class="built_in">console</span>.error(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  watchConfigs(handler) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; cwd &#125; = <span class="keyword">this</span>.service;</span><br><span class="line">    <span class="keyword">const</span> watcher = <span class="keyword">this</span>.watch(<span class="string">'CONFIG_FILES'</span>, getConfigPaths(cwd));</span><br><span class="line">    <span class="keyword">if</span> (watcher) &#123;</span><br><span class="line">      watcher.on(<span class="string">'all'</span>, handler);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UserConfig;</span><br></pre></td></tr></table></figure><h4 id="packages-umi-build-dev-src-getPaths"><a href="#packages-umi-build-dev-src-getPaths" class="headerlink" title="packages/umi-build-dev/src/getPaths"></a>packages/umi-build-dev/src/getPaths</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### packages/umi-build-dev/src/getPlugins</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">//实现节点require.resolve() 算法 ，以便您可以require.resolve()异步和同步代表文件</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'resolve'</span>;</span><br><span class="line"><span class="comment">//assert来自Node.js 的模块，用于浏览器。使用browserify，只需require('assert')或使用assert全局，您将获得此模块。目标是提供尽可能与Node.js assertAPI功能相同的API。阅读API文档的官方文档。</span></span><br><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">'assert'</span>;</span><br><span class="line"><span class="keyword">import</span> chalk <span class="keyword">from</span> <span class="string">'chalk'</span>; <span class="comment">//终端字符串样式修改</span></span><br><span class="line"><span class="keyword">import</span> registerBabel, &#123; addBabelRegisterFiles &#125; <span class="keyword">from</span> <span class="string">'./registerBabel'</span>;</span><br><span class="line"><span class="keyword">import</span> isEqual <span class="keyword">from</span> <span class="string">'./isEqual'</span>;</span><br><span class="line"><span class="keyword">import</span> getCodeFrame <span class="keyword">from</span> <span class="string">'./utils/getCodeFrame'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'umi-build-dev:getPlugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; cwd, plugins = [] &#125; = opts;</span><br><span class="line">  <span class="comment">// 内置插件</span></span><br><span class="line">  <span class="keyword">const</span> builtInPlugins = [</span><br><span class="line">    <span class="string">'./plugins/commands/dev'</span>,</span><br><span class="line">    <span class="string">'./plugins/commands/build'</span>,</span><br><span class="line">    <span class="string">'./plugins/commands/inspect'</span>,</span><br><span class="line">    <span class="string">'./plugins/commands/test'</span>,</span><br><span class="line">    <span class="string">'./plugins/commands/help'</span>,</span><br><span class="line">    <span class="string">'./plugins/commands/generate'</span>,</span><br><span class="line">    <span class="string">'./plugins/commands/rm'</span>,</span><br><span class="line">    <span class="string">'./plugins/commands/config'</span>,</span><br><span class="line">    <span class="string">'./plugins/commands/block'</span>,</span><br><span class="line">    <span class="comment">// './plugins/commands/ui',</span></span><br><span class="line">    <span class="string">'./plugins/commands/version'</span>,</span><br><span class="line">    <span class="string">'./plugins/global-js'</span>,</span><br><span class="line">    <span class="string">'./plugins/global-css'</span>,</span><br><span class="line">    <span class="string">'./plugins/base'</span>,</span><br><span class="line">    <span class="string">'./plugins/mountElementId'</span>,</span><br><span class="line">    <span class="string">'./plugins/mock'</span>,</span><br><span class="line">    <span class="string">'./plugins/proxy'</span>,</span><br><span class="line">    <span class="string">'./plugins/history'</span>,</span><br><span class="line">    <span class="string">'./plugins/afwebpack-config'</span>,</span><br><span class="line">    <span class="string">'./plugins/mountElementId'</span>,</span><br><span class="line">    <span class="string">'./plugins/404'</span>, <span class="comment">// 404 must after mock</span></span><br><span class="line">    <span class="string">'./plugins/targets'</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pluginsObj = [</span><br><span class="line">    <span class="comment">// builtIn 的在最前面</span></span><br><span class="line">    ...builtInPlugins.map(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> opts;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(p)) &#123;</span><br><span class="line">        opts = p[<span class="number">1</span>]; <span class="comment">// eslint-disable-line</span></span><br><span class="line">        p = p[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> apply = <span class="built_in">require</span>(p); <span class="comment">// eslint-disable-line</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        id: p.replace(<span class="regexp">/^.\//</span>, <span class="string">'built-in:'</span>),</span><br><span class="line">        apply: apply.default || apply,</span><br><span class="line">        opts</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;),</span><br><span class="line">    ...getUserPlugins(process.env.UMI_PLUGINS ? process.env.UMI_PLUGINS.split(<span class="string">','</span>) : [], &#123; cwd &#125;),</span><br><span class="line">    ...getUserPlugins(plugins, &#123; cwd &#125;)</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  debug(<span class="string">`plugins: \n<span class="subst">$&#123;pluginsObj.map(p =&gt; <span class="string">`  <span class="subst">$&#123;p.id&#125;</span>`</span>).join(<span class="string">'\n'</span>)&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> pluginsObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pluginToPath</span>(<span class="params">plugins, &#123; cwd &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (plugins || []).map(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">    assert(<span class="built_in">Array</span>.isArray(p) || <span class="keyword">typeof</span> p === <span class="string">'string'</span>, <span class="string">`Plugin config should be String or Array, but got <span class="subst">$&#123;chalk.red(<span class="keyword">typeof</span> p)&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> p === <span class="string">'string'</span>) &#123;</span><br><span class="line">      p = [p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [path, opts] = p;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        resolve.sync(path, &#123;</span><br><span class="line">          basedir: cwd</span><br><span class="line">        &#125;),</span><br><span class="line">        opts</span><br><span class="line">      ];</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">Plugin <span class="subst">$&#123;chalk.underline.cyan(path)&#125;</span> can't be resolved</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Please try the following solutions:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     1. checkout the plugins config in your config file (.umirc.js or config/config.js)</span></span><br><span class="line"><span class="string">     <span class="subst">$&#123;path.charAt(<span class="number">0</span>) !== <span class="string">'.'</span> &amp;&amp; path.charAt(<span class="number">0</span>) !== <span class="string">'/'</span> ? <span class="string">`2. install <span class="subst">$&#123;chalk.underline.cyan(path)&#125;</span> via npm/yarn`</span> : <span class="string">''</span>&#125;</span></span></span><br><span class="line"><span class="string">`</span>.trim()</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPlugins</span>(<span class="params">plugins, &#123; cwd &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pluginPaths = pluginToPath(plugins, &#123; cwd &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户给的插件需要做 babel 转换</span></span><br><span class="line">  <span class="keyword">if</span> (pluginPaths.length) &#123;</span><br><span class="line">    addBabelRegisterFiles(pluginPaths.map(<span class="function"><span class="params">p</span> =&gt;</span> p[<span class="number">0</span>]), &#123; cwd &#125;);</span><br><span class="line">    registerBabel(&#123;</span><br><span class="line">      cwd</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pluginPaths.map(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [path, opts] = p;</span><br><span class="line">    <span class="keyword">let</span> apply;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      apply = <span class="built_in">require</span>(path); <span class="comment">// eslint-disable-line</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">Plugin <span class="subst">$&#123;chalk.cyan.underline(path)&#125;</span> require failed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$&#123;getCodeFrame(e)&#125;</span></span></span><br><span class="line"><span class="string">      `</span>.trim()</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id: path.replace(makesureLastSlash(cwd), <span class="string">'user:'</span>),</span><br><span class="line">      apply: apply.default || apply,</span><br><span class="line">      opts</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveIdAndOpts</span>(<span class="params">&#123; id, opts &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; id, opts &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toIdStr</span>(<span class="params">plugins</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> plugins.map(<span class="function"><span class="params">p</span> =&gt;</span> p.id).join(<span class="string">'^^'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回结果：</span></span><br><span class="line"><span class="comment"> *   pluginsChanged: true | false</span></span><br><span class="line"><span class="comment"> *   optionChanged: [ 'a', 'b' ]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">diffPlugins</span>(<span class="params">newOption, oldOption, &#123; cwd &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newPlugins = getUserPlugins(newOption, &#123; cwd &#125;).map(resolveIdAndOpts);</span><br><span class="line">  <span class="keyword">const</span> oldPlugins = getUserPlugins(oldOption, &#123; cwd &#125;).map(resolveIdAndOpts);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newPlugins.length !== oldPlugins.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">pluginsChanged</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (toIdStr(newPlugins) !== toIdStr(oldPlugins)) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">pluginsChanged</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      optionChanged: newPlugins.filter(<span class="function">(<span class="params">p, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !isEqual(newPlugins[index].opts, oldPlugins[index].opts);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makesureLastSlash</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.slice(<span class="number">-1</span>) === <span class="string">'/'</span> ? path : <span class="string">`<span class="subst">$&#123;path&#125;</span>/`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="packages-umi-build-dev-src-utils-deprecate"><a href="#packages-umi-build-dev-src-utils-deprecate" class="headerlink" title="packages/umi-build-dev/src/utils/deprecate"></a>packages/umi-build-dev/src/utils/deprecate</h4><p>用于终端上提示方法被弃用,传入(方法名，…想要提示的其他信息),调用方法终端输出提示信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//process.platform属性返回字符串，标识Node.js进程运行其上的操作系统平台。</span></span><br><span class="line"><span class="keyword">const</span> isWindows = <span class="keyword">typeof</span> process !== <span class="string">'undefined'</span> &amp;&amp; process.platform === <span class="string">'win32'</span>;</span><br><span class="line"><span class="keyword">const</span> EOL = isWindows ? <span class="string">'\r\n'</span> : <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">//判断是否是windows更具系统选择换行符号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hits = &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">deprecate</span>(<span class="params">methodName, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hits[methodName]) <span class="keyword">return</span>;</span><br><span class="line">  hits[methodName] = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">//process.stderr 属性返回连接到 stderr (fd 2) 的流。 它是一个 net.Socket 流（也就是双工流），除非 fd 2 指向一个文件，在这种情况下它是一个可写流。console.error() 内部分别是由它实现的。</span></span><br><span class="line">  <span class="keyword">const</span> stream = process.stderr;</span><br><span class="line">  <span class="comment">//判断 Node.js 是否在 TTY 上下文中运行的首选方法是检查 process.stdout.isTTY 属性的值是否为 true：</span></span><br><span class="line">  <span class="keyword">const</span> color = stream.isTTY &amp;&amp; <span class="string">'\x1b[31;1m'</span>;</span><br><span class="line">  <span class="comment">//如果上下文是终端设置亮黄色加粗字体</span></span><br><span class="line"></span><br><span class="line">  stream.write(EOL); <span class="comment">//终端写入换行</span></span><br><span class="line">  <span class="keyword">if</span> (color) &#123;</span><br><span class="line">    stream.write(color);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stream.write(<span class="string">`Warning: <span class="subst">$&#123;methodName&#125;</span> has been deprecated.`</span>); <span class="comment">//警告方法名已经被弃用</span></span><br><span class="line">  stream.write(EOL); <span class="comment">//换行</span></span><br><span class="line">  args.forEach(<span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">    stream.write(message); <span class="comment">//打印参数</span></span><br><span class="line">    stream.write(EOL); <span class="comment">//换行</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (color) &#123;</span><br><span class="line">    stream.write(<span class="string">'\x1b[0m'</span>);</span><br><span class="line">  &#125; <span class="comment">//把字体还原</span></span><br><span class="line">  stream.write(EOL);</span><br><span class="line">  stream.write(EOL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次认真学习开源项目，看一次开源代码…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://shawdanon.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>typescript</title>
    <link href="https://shawdanon.github.io/2019/typescript/"/>
    <id>https://shawdanon.github.io/2019/typescript/</id>
    <published>2019-02-25T16:00:00.000Z</published>
    <updated>2019-07-28T07:08:48.649Z</updated>
    
    <content type="html"><![CDATA[<p>typescript 学习记…</p><a id="more"></a><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>通过冒号+类型来定义变量的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>; <span class="comment">//数字类型的列子</span></span><br></pre></td></tr></table></figure><h3 id="布尔值（boolean）"><a href="#布尔值（boolean）" class="headerlink" title="布尔值（boolean）"></a>布尔值（boolean）</h3><h3 id="数字（number）"><a href="#数字（number）" class="headerlink" title="数字（number）"></a>数字（number）</h3><h3 id="字符串（string）"><a href="#字符串（string）" class="headerlink" title="字符串（string）"></a>字符串（string）</h3><h3 id="Array（数组）"><a href="#Array（数组）" class="headerlink" title="Array（数组）"></a>Array（数组）</h3><p>有两种定义方式：</p><p><code>元素类型[]</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p><code>Array&lt;元素类型&gt;</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'hello'</span>, <span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>当访问一个越界的元素，会使用联合类型替代。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'hello'</span>, <span class="number">10</span>];</span><br><span class="line">x[<span class="number">3</span>] = <span class="string">'world'</span>; <span class="comment">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span>; <span class="comment">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举类型可以为一组数值赋予友好的名字。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green,</span><br><span class="line">  Blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colorName); <span class="comment">// 显示'Green'因为上面代码里它的值是2</span></span><br></pre></td></tr></table></figure><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>任何类型。</p><h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void。</p><h3 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h3><p>默认情况下 null 和 undefined 是所有类型的子类型。</p><p>当你指定了–strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。</p><h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><p>never 类型表示的是那些永不存在的值的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125; <span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error(<span class="string">'Something failed'</span>);</span><br><span class="line">&#125; <span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125; <span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>object 表示非原始类型，也就是除 number，string，boolean，symbol，null 或 undefined 之外的类型。</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。</p><p>类型断言有两种形式。<br>其一是“尖括号”语法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">'this is a string'</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure><p>另一个为 as 语法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">'this is a string'</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabelledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">&#125; <span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125; <span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">'Size 10 Object'</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>接口里的属性不全都是必需的。有些是只在某些条件下存在，或者根本不存在。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候修改其值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  readonly x: <span class="built_in">number</span>;</span><br><span class="line">  readonly y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h3><p>访问 interface 未定义的属性时会报错，有以下三种方法绕过，</p><p>方法一：类型断言</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IFoo &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo: IFoo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo.label);</span><br><span class="line">&#125;</span><br><span class="line">bar(&#123;</span><br><span class="line">  label: <span class="string">'foooo'</span>,</span><br><span class="line">  size: <span class="number">10</span></span><br><span class="line">&#125; <span class="keyword">as</span> IFoo);</span><br></pre></td></tr></table></figure><p>方法二：在 interface 里定义额外属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IFoo &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo: IFoo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo.label);</span><br><span class="line">&#125;</span><br><span class="line">bar(&#123;</span><br><span class="line">  label: <span class="string">'foooo'</span>,</span><br><span class="line">  size: <span class="number">10</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方法三：赋值给另一属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IFoo &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo: IFoo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo.label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  label: <span class="string">'foooo'</span>,</span><br><span class="line">  size: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line">bar(foo);</span><br></pre></td></tr></table></figure><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">'Bob'</span>, <span class="string">'Fred'</span>];</span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>TypeScript 支持两种索引签名：字符串和数字。</p><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你操作类和接口的时候，你要知道类是具有两个类型的：静态部分的类型和实例的类型。</p><h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">  sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">'blue'</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h3><p>一个对象可以同时做为函数和对象使用，并带有额外的属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">  (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  interval: <span class="built_in">number</span>;</span><br><span class="line">  reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span>(<span class="params">start: <span class="built_in">number</span></span>) </span>&#123;&#125;;</span><br><span class="line">  counter.interval = <span class="number">123</span>;</span><br><span class="line">  counter.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">  <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">  select(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">  select() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> TextBox <span class="keyword">extends</span> Control &#123;</span><br><span class="line">  select() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> Image <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">  select() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Location &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>传统的 JavaScript 程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">'world'</span>);</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>子类的 constructor 里可以用 <code>super(参数)</code> 或 <code>super.bar(参数)</code> 来执行父类的 constructor。</p><h3 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h3><p>public：公有，可以在内部、派生类、声明外部访问；</p><p>private：私有，可以在内部访问；</p><p>protected：保护，可以在内部、派生类访问；</p><h3 id="readonly-修饰符"><a href="#readonly-修饰符" class="headerlink" title="readonly 修饰符"></a>readonly 修饰符</h3><p>你可以使用 readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = theName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dad = <span class="keyword">new</span> Octopus(<span class="string">'Man with the 8 strong legs'</span>);</span><br><span class="line">dad.name = <span class="string">'Man with the 3-piece suit'</span>; <span class="comment">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>在上面的例子中，我们必须在 Octopus 类里定义一个只读成员 name 和一个参数为 theName 的构造函数，并且立刻将 theName 的值赋给 name，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 Octopus 类的修改版，使用了参数属性：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Octopus &#123;</span><br><span class="line">  readonly numberOfLegs: <span class="built_in">number</span> = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">  <span class="keyword">static</span> bar: <span class="string">'world'</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Foo.bar);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">abstract</span> makeSound(): <span class="built_in">void</span>;</span><br><span class="line">  move(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'roaming the earch...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的函数类型"><a href="#函数的函数类型" class="headerlink" title="函数的函数类型"></a>函数的函数类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lastName) <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName = 'Smith'</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">' '</span> + restOfName.join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p><p>返回值的类型与传入参数的类型是相同的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125; <span class="comment">//定义</span></span><br><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">'myString'</span>); <span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">'myString'</span>); <span class="comment">// 普遍使用</span></span><br></pre></td></tr></table></figure><h3 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h3><p>我们把泛型变量 T 当做类型的一部分使用，而不是整个类型，增加了灵活性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: <span class="built_in">Array</span>&lt;T&gt;</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>我们需要传入符合约束类型的值，必须包含必须的属性.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line">loggingIdentity(<span class="number">3</span>); <span class="comment">// Error, number doesn't have a .length property</span></span><br><span class="line">loggingIdentity(&#123; length: <span class="number">10</span>, value: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。</p><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  Up = <span class="number">1</span>, <span class="comment">//初始化器</span></span><br><span class="line">  Down,</span><br><span class="line">  Left,</span><br><span class="line">  Right</span><br><span class="line">&#125; <span class="comment">//不使用初始化器从0开始</span></span><br></pre></td></tr></table></figure><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><p>在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  Up = <span class="string">'UP'</span>,</span><br><span class="line">  Down = <span class="string">'DOWN'</span>,</span><br><span class="line">  Left = <span class="string">'LEFT'</span>,</span><br><span class="line">  Right = <span class="string">'RIGHT'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3><p>从技术的角度来说，枚举可以混合字符串和数字成员，但不推荐。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum BooleanLikeHeterogeneousEnum &#123;</span><br><span class="line">    No = <span class="number">0</span>,</span><br><span class="line">    Yes = <span class="string">"YES"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h2><h3 id="最佳通用类型"><a href="#最佳通用类型" class="headerlink" title="最佳通用类型"></a>最佳通用类型</h3><p>当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>, <span class="number">1</span>, <span class="literal">null</span>];</span><br></pre></td></tr></table></figure><p>如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型</p><h3 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h3><p>TypeScript 类型推论也可能按照相反的方向进行。 这被叫做“按上下文归类”。按上下文归类会发生在表达式的类型与所处的位置相关时。</p><h2 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h2><p>symbol 类型的值是通过 Symbol 构造函数创建的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = Symbol();</span><br><span class="line"><span class="keyword">let</span> sym2 = Symbol(<span class="string">'key'</span>); <span class="comment">// 可选的字符串key</span></span><br></pre></td></tr></table></figure><p>Symbols 是不可改变且唯一的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym2 = Symbol(<span class="string">'key'</span>);</span><br><span class="line"><span class="keyword">let</span> sym3 = Symbol(<span class="string">'key'</span>);</span><br><span class="line">sym2 === sym3; <span class="comment">// false, symbols是唯一的</span></span><br></pre></td></tr></table></figure><p>像字符串一样，symbols 也可以被用做对象属性的键。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = Symbol();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [sym]: <span class="string">'value'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj[sym]); <span class="comment">// "value"</span></span><br></pre></td></tr></table></figure><p>Symbols 也可以与计算出的属性名声明相结合来声明对象的属性和类成员。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getClassNameSymbol = Symbol();</span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  [getClassNameSymbol]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'C'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line"><span class="keyword">let</span> className = c[getClassNameSymbol](); <span class="comment">// "C"</span></span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块是自声明的；两个模块之间的关系是通过在文件级别上使用 imports 和 exports 建立的。</p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>任何声明（比如变量，函数，类，类型别名或接口）都能够通过添加 export 关键字来导出。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; a &#125;; <span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> &#123; a <span class="keyword">as</span> b &#125;; <span class="comment">//导出重命名</span></span><br></pre></td></tr></table></figure><p>一个模块可以包裹多个模块，并把他们导出的内容联合在一起通过语法：<code>export \* from &quot;module&quot;</code>。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>模块的导入操作与导出一样简单。 可以使用以下 import 形式之一来导入其它模块中的导出内容。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ZipCodeValidator &#125; <span class="keyword">from</span> <span class="string">'./ZipCodeValidator'</span>; <span class="comment">//导入某个内容</span></span><br><span class="line"><span class="keyword">import</span> &#123; ZipCodeValidator <span class="keyword">as</span> ZCV &#125; <span class="keyword">from</span> <span class="string">'./ZipCodeValidator'</span>; <span class="comment">//导入内容重命名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> validator <span class="keyword">from</span> <span class="string">'./ZipCodeValidator'</span>; <span class="comment">//将整个模块导入到一个变量，并通过它来访问模块的导出部分</span></span><br></pre></td></tr></table></figure><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><p>每个模块都可以有一个 default 导出。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> $: JQuery;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'JQuery'</span>;</span><br><span class="line">$(<span class="string">'button.continue'</span>).html(<span class="string">'Next Step...'</span>);</span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>这篇文章描述了如何在 TypeScript 里使用命名空间（之前叫做“内部模块”）来组织你的代码。 就像我们在术语说明里提到的那样，“内部模块”现在叫做“命名空间”。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Foo &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Foo.bar();</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>另一种简化命名空间操作的方法是使用 import q = x.y.z 给常用的对象起一个短的名字。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Shapes &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> Polygons &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Triangle &#123;&#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Square &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> polygons = Shapes.Polygons;</span><br><span class="line"><span class="keyword">let</span> sq = <span class="keyword">new</span> polygons.Square(); <span class="comment">// Same as "new Shapes.Polygons.Square()"</span></span><br></pre></td></tr></table></figure><h3 id="使用其它的-JavaScript-库"><a href="#使用其它的-JavaScript-库" class="headerlink" title="使用其它的 JavaScript 库"></a>使用其它的 JavaScript 库</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> D3 &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> Selectors &#123;</span><br><span class="line">    select: &#123;</span><br><span class="line">      (selector: <span class="built_in">string</span>): Selection;</span><br><span class="line">      (element: EventTarget): Selection;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> Event &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> Base <span class="keyword">extends</span> Selectors &#123;</span><br><span class="line">    event: Event;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> d3: D3.Base;</span><br></pre></td></tr></table></figure><h2 id="命名空间和模块"><a href="#命名空间和模块" class="headerlink" title="命名空间和模块"></a>命名空间和模块</h2><h3 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h3><p>命名空间是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象。</p><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>像命名空间一样，模块可以包含代码和声明。 不同的是模块可以 声明它的依赖。</p><h3 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h3><p>不要用<code>/// &lt;reference /&gt;</code> 引模块，而是去引 d.ts 文件。</p><p>尽量别用命名空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;typescript 学习记…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://shawdanon.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>flutter折腾记</title>
    <link href="https://shawdanon.github.io/2019/flutter/"/>
    <id>https://shawdanon.github.io/2019/flutter/</id>
    <published>2019-02-13T16:00:00.000Z</published>
    <updated>2019-07-28T07:10:08.704Z</updated>
    
    <content type="html"><![CDATA[<p>期望 flutter 统一 JS 开发桌面客户端和 APP…</p><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="Windows-环境配置"><a href="#Windows-环境配置" class="headerlink" title="Windows 环境配置"></a>Windows 环境配置</h3><ol><li>安装 jdk</li><li>安装 flutter</li><li>安装 Android Studio</li><li>安装 sdk</li><li>创建一个 demo</li><li>安装模拟器</li><li>通过 vscode 开发 flutter</li></ol><p>安装 jdk 很简单，通过<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">oracle 官网</a>下载。点击下一步即可安装完成（PS：最后 jre 可以取消安装，避免重复安装）。为了方便使用配置好环境变量。</p><p>安装 flutter 也简单，通过<a href="https://flutter.io/sdk-archive/#windows" target="_blank" rel="noopener">flutter 官网</a>下载。得到压缩包，在任意位置解压即可使用。在<code>flutter\bin</code>运行<code>flutter doctor</code>可以查看还需要安装哪儿些环境。为了方便使用将<code>flutter\bin</code>加入环境变量。从此命令可以得知我们还需要安装安卓 SDK 和安卓模拟器。</p><p>安装 Android Studio 也简单（在翻墙的情况下），在<a href="https://developer.android.com/studio/" target="_blank" rel="noopener">安卓官网</a>下载，得到软件一路下一步即可安装。安装完成后需要安装 sdk。如果你不会翻墙，那么在<a href="http://www.android-studio.org/" target="_blank" rel="noopener">安卓中文社区</a>也能下载 Android Studio，安装 sdk 前需要设置 host 文件，给 host 文件添加<code>203.208.41.37 dl.google.com</code>,ip 地址是通过<a href="http://ping.chinaz.com/dl.google.com" target="_blank" rel="noopener">站长工具</a>检测<code>dl.google.com</code>这个域名得到响应最快的国内 ip 地址，配置好 host 文件后再下载 sdk 速度就很快了。</p><p>安装完 sdk 后运行<code>flutter doctor</code>发现需要安装安卓证书，运行<code>flutter doctor --android-licenses</code>命令安装证书，提示选择 y。</p><p>接下来通过 Android Studio 来创建一个 demo，首先安装 Android Studio 的插件 flutter，安装 flutter 会自动安装 dart，安装完重启 Android Studio 会在启动界面看到多出了个选项<code>start a new flutter project</code>。<br>通过这个选项创建一个 flutter APP。</p><p>建好项目后，还需要项目运行环境，安卓模拟器，在 tools 里面选择 AVD manager，新加一个安卓模拟器，选择默认设备点击下一步，选择模拟器，模拟器旁边对应的安卓版本，还有 download 标识，标识没有下载，点击 download 下载模拟器（PS:如果不是 Intel 平台会比较麻烦），下载好后选择该模拟器，点击完成创建一个安卓模拟器。点击运行模拟器即可打开模拟器。</p><p>打开模拟器后就可以使用 debug 来浏览项目了。如果没有翻墙，需要修改项目文件<code>android-&gt;build.gradle</code>。将</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">google();</span><br><span class="line">jcenter();</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maven &#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span>&#125;</span><br></pre></td></tr></table></figure><p>如此就能成功运行起程序。</p><p>作为 vscode 重度使用人来说换个编辑器还是有点不习惯的，那么怎么在 vscode 上开发 flutter 呢？首先我们需要解决脱离 Android Studio 能够运行起安卓模拟器。创建批处理文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ShawDanon\AppData\Local\Android\Sdk\emulator\emulator.exe -netdelay none -netspeed full -avd Nexus_5X_API_28</span><br></pre></td></tr></table></figure><p><code>C:\Users\ShawDanon\AppData\Local\Android\Sdk\emulator\emulator.exe</code>这个是安卓 sdk 路径下的可执行程序，需要改成你的路径。<code>Nexus_5X_API_28</code>是模拟器名字（名字本来是<code>Nexus 5X API 28</code>，空格使用下划线代替），在创建模拟器的时候可以设置。然后运行批处理文件即可打开安卓模拟器。</p><p>通过 vscode 打开刚才创建的项目，发现没有高亮代码。然后安装插件 flutter，安装完成重启 vscode 发现代码高亮了，就可以在 vscode 运行 flutter 了。在 vscode 中运行<code>flutter run</code>即可在刚才启动的模拟器中运行应用，但是在 vscode 中不能热更新了，需要每次修改代码之后在命令行输入 r 才能在模拟器中看到效果，如果需要热更新，要使用 debug 。</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="Windows-打包"><a href="#Windows-打包" class="headerlink" title="Windows 打包"></a>Windows 打包</h3><ol><li>配置 app 图标</li><li>AndroidManifest.xml（配置 APP 的名称、图标和系统权限）</li><li>生成 keystore</li><li>配置 key 注册</li><li>生成 apk</li></ol><p>在目录<code>项目根目录/android/app/src/main/res/</code>中设置图标文件</p><p>在目录<code>项目根目录/android/app/src/main/AndroidManifest.xml</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android: label = <span class="string">'flutter_app'</span>; <span class="comment">//配置APP的名称，支持中文</span></span><br><span class="line">android: icon = <span class="string">'@mipmap/ic_launcher'</span>; <span class="comment">//APP图标的文件名称</span></span><br></pre></td></tr></table></figure><p>通过<code>D:\Program\Android\&#39;Android Studio&#39;\jre\bin\keytool -genkey -v -keystore D:\key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key</code>命令来生成 keystore，输入密码后，在 d 盘得到一个 key.jks 文件。<code>D:\Program\Android\&#39;Android Studio&#39;\jre\bin\keytool</code>安卓生成钥匙的地址，通过 flutter doctor -v 可以查询到<code>Java binary at：D:\Program\Android\&#39;Android Studio&#39;\jre\bin\keytool</code>，<code>D:\key.jks</code>是生成钥匙的地址，生成好钥匙后，在<code>android</code>文件夹下创建一个名为 key.properties 的文件文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">storePassword=<span class="number">123123</span>   <span class="comment">//输入上一步创建KEY时输入的 密钥库 密码</span></span><br><span class="line">keyPassword=<span class="number">123123</span>   <span class="comment">//输入上一步创建KEY时输入的 密钥 密码</span></span><br><span class="line">keyAlias=key</span><br><span class="line">storeFile=D:\key.jks   <span class="comment">//key.jks的存放路径</span></span><br></pre></td></tr></table></figure><p>key 生成好后需要配置 build.gradle 文件，在项目目录的/android/app/build.gradle 文件，在 android{这一行前面,加入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def keystorePropertiesFile = rootProject.file(<span class="string">"key.properties"</span>)</span><br><span class="line">def keystoreProperties = <span class="keyword">new</span> Properties()</span><br><span class="line">keystoreProperties.load(<span class="keyword">new</span> FileInputStream(keystorePropertiesFile))</span><br></pre></td></tr></table></figure><p>把如下代码进行替换:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        signingConfig signingConfigs.debug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        keyAlias keystoreProperties[<span class="string">'keyAlias'</span>]</span><br><span class="line">        keyPassword keystoreProperties[<span class="string">'keyPassword'</span>]</span><br><span class="line">        storeFile file(keystoreProperties[<span class="string">'storeFile'</span>])</span><br><span class="line">        storePassword keystoreProperties[<span class="string">'storePassword'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        signingConfig signingConfigs.release</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置改好后运行<code>flutter build apk</code>就能够打包成 apk 在手机安装了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;期望 flutter 统一 JS 开发桌面客户端和 APP…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://shawdanon.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《学习 JavaScript 数据结构与算法》读书笔记</title>
    <link href="https://shawdanon.github.io/read/learning-data-structures-and-algorithms/"/>
    <id>https://shawdanon.github.io/read/learning-data-structures-and-algorithms/</id>
    <published>2019-01-16T16:00:00.000Z</published>
    <updated>2019-07-28T07:04:44.459Z</updated>
    
    <content type="html"><![CDATA[<p>看完 react 的 diff 算法和 swagger 的数据结构，想温习波数据结构和算法。</p><a id="more"></a><h2 id="2019-1-17-记"><a href="#2019-1-17-记" class="headerlink" title="2019-1-17 记"></a>2019-1-17 记</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>最简单的内存数据结构。</p></blockquote><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>一种顺序数据结构<br>栈是一种遵从后进先出(LIFO)原则的有序集合。<br>新添加的或待删除的元素都保存在栈的末尾，称做栈顶，另一端就叫栈底。<br>在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p></blockquote><h4 id="栈的创建"><a href="#栈的创建" class="headerlink" title="栈的创建"></a>栈的创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = [];</span><br><span class="line">  <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    items.push(element);</span><br><span class="line">  &#125;; <span class="comment">//入栈</span></span><br><span class="line">  <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.pop();</span><br><span class="line">  &#125;; <span class="comment">//出栈，返回出站元素</span></span><br><span class="line">  <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;; <span class="comment">//返回栈顶元素</span></span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;; <span class="comment">//返回栈是否为空</span></span><br><span class="line">  <span class="keyword">this</span>.clears = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    items = [];</span><br><span class="line">  &#125;; <span class="comment">//清空栈</span></span><br><span class="line">  <span class="keyword">this</span>.sizes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length;</span><br><span class="line">  &#125;; <span class="comment">//返回栈里元素个数</span></span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(items.toString());</span><br><span class="line">  &#125;; <span class="comment">//打印栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从十进制到二进制"><a href="#从十进制到二进制" class="headerlink" title="从十进制到二进制"></a>从十进制到二进制</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divideBy2</span>(<span class="params">decNumber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),</span><br><span class="line">    rem,</span><br><span class="line">    binaryString = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % <span class="number">2</span>);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / <span class="number">2</span>);</span><br><span class="line">  &#125; <span class="comment">//取余数入栈</span></span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty()) &#123;</span><br><span class="line">    binaryString += remStack.pop().toString();</span><br><span class="line">  &#125; <span class="comment">//出栈获得2进制数</span></span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125; <span class="comment">//十进制转二进制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber, base</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),</span><br><span class="line">    rem,</span><br><span class="line">    baseString = <span class="string">''</span>,</span><br><span class="line">    digits = <span class="string">'0123456789ABCDEF'</span>;</span><br><span class="line">  <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(decNumber % base);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber / base);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty()) &#123;</span><br><span class="line">    baseString += digits[remStack.pop()];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baseString;</span><br><span class="line">&#125; <span class="comment">//十进制转任意进制（最多16进制）</span></span><br></pre></td></tr></table></figure><p>其他实例：平衡圆括号和汉诺塔</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>一种顺序数据结构<br>队列是遵循 FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。<br>队列在尾部添加新元素，并从顶部移除元素。<br>最新添加的元素必须排在队列的末尾。</p></blockquote><h4 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = [];</span><br><span class="line">  <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    itmes.push(element);</span><br><span class="line">  &#125;; <span class="comment">//向队列尾部添加一个（或多个）新的项</span></span><br><span class="line">  <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.shift();</span><br><span class="line">  &#125;; <span class="comment">//移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。</span></span><br><span class="line">  <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">  &#125;; <span class="comment">//返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动。</span></span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;; <span class="comment">//如果队列中不包含任何元素，返回true，否则返回false。</span></span><br><span class="line">  <span class="keyword">this</span>.sizes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length;</span><br><span class="line">  &#125;; <span class="comment">//返回队列包含的元素个数，与数组的length属性类似。</span></span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(items.toString());</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = [];</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span>(<span class="params">element, priority</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element;</span><br><span class="line">    <span class="keyword">this</span>.priority = priority;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element, priority</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      items.push(queueElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> added = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (queueElement.priority &lt; items[i].priority) &#123;</span><br><span class="line">          items.splice(i, <span class="number">0</span>, queueElement);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">          items.push(queueElement);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="comment">//最小优先队列</span></span><br></pre></td></tr></table></figure><h4 id="循环队列——击鼓传花"><a href="#循环队列——击鼓传花" class="headerlink" title="循环队列——击鼓传花"></a>循环队列——击鼓传花</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span>(<span class="params">nameList, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nameList.length; i++) &#123;</span><br><span class="line">    queue.enqueue(nameList[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> eliminated = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">      queue.enqueue(queue.dequeue());</span><br><span class="line">    &#125;</span><br><span class="line">    eliminated = queue.dequeue();</span><br><span class="line">    <span class="built_in">console</span>.log(eliminated + <span class="string">'在击鼓传花游戏中被淘汰。'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queue.dequeue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>链表存储有序的元素集合,但不同于数组,链表中的元素在内存中并不是连续放置的。<br>每个元素由一个存储元素本身的节点和一个指向下一个元素的引用(也称指针或链接)组成。<br>解决数组起点或中间插入或移除项的成本很高的问题</p></blockquote><h4 id="创建一个链表"><a href="#创建一个链表" class="headerlink" title="创建一个链表"></a>创建一个链表</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element; <span class="comment">//添加到列表的值</span></span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>; <span class="comment">//指向列表中下一个节点项的指针</span></span><br><span class="line">  &#125;; <span class="comment">//要加入列表的项</span></span><br><span class="line">  <span class="keyword">var</span> length = <span class="number">0</span>; <span class="comment">//列表项的数量</span></span><br><span class="line">  <span class="keyword">var</span> head = <span class="literal">null</span>; <span class="comment">//第一个节点的引用</span></span><br><span class="line">  <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">      current;</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) &#123;</span><br><span class="line">      head = node; <span class="comment">//列表中第一个节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = head;</span><br><span class="line">      <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125; <span class="comment">//循环链表,直到找到最后一项</span></span><br><span class="line">      current.next = node; <span class="comment">//找到最后一项,将其next赋为node,建立链接</span></span><br><span class="line">    &#125;</span><br><span class="line">    length++; <span class="comment">//更新列表的长度</span></span><br><span class="line">  &#125;; <span class="comment">//向列表尾部添加一个新的项。</span></span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class="line">      <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">        current = head,</span><br><span class="line">        previous,</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//在第一个位置添加</span></span><br><span class="line">        node.next = current;</span><br><span class="line">        head = node;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attr">position</span>) &#123;</span></span></span><br><span class="line"><span class="xml">          previous = current;</span></span><br><span class="line"><span class="xml">          current = current.next;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        node.next = current;</span></span><br><span class="line"><span class="xml">        previous.next = node;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      length++; //更新列表的长度</span></span><br><span class="line"><span class="xml">      return true;</span></span><br><span class="line"><span class="xml">    &#125; else &#123;</span></span><br><span class="line"><span class="xml">      return false;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;; //向列表的特定位置插入一个新的项。</span></span><br><span class="line"><span class="xml">  this.removeAt = function(position) &#123;</span></span><br><span class="line"><span class="xml">    //检查越界值</span></span><br><span class="line"><span class="xml">    if (position &gt; -1 &amp;&amp; position <span class="tag">&lt; <span class="attr">length</span>) &#123;</span></span></span><br><span class="line"><span class="xml">      var current = head,</span></span><br><span class="line"><span class="xml">        previous,</span></span><br><span class="line"><span class="xml">        index = 0;</span></span><br><span class="line"><span class="xml">      if (position === 0) &#123;</span></span><br><span class="line"><span class="xml">        head = current.next; //移除第一项</span></span><br><span class="line"><span class="xml">      &#125; else &#123;</span></span><br><span class="line"><span class="xml">        while (index++ <span class="tag">&lt; <span class="attr">position</span>) &#123;</span></span></span><br><span class="line"><span class="xml">          previous = current;</span></span><br><span class="line"><span class="xml">          current = current.next;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        previous.next = current.next; //重点：将previous与current的下一项链接起来:跳过current,从而移除它</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      length--;</span></span><br><span class="line"><span class="xml">      return current.element;</span></span><br><span class="line"><span class="xml">    &#125; else &#123;</span></span><br><span class="line"><span class="xml">      return null;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;; //从列表的特定位置移除一项。</span></span><br><span class="line"><span class="xml">  this.remove = function(element) &#123;</span></span><br><span class="line"><span class="xml">    var current = head,</span></span><br><span class="line"><span class="xml">      previous,</span></span><br><span class="line"><span class="xml">      index = 0;</span></span><br><span class="line"><span class="xml">    while (current) &#123;</span></span><br><span class="line"><span class="xml">      if (element === current.element) &#123;</span></span><br><span class="line"><span class="xml">        if (index === 0) &#123;</span></span><br><span class="line"><span class="xml">          head = current.next; //移除第一项</span></span><br><span class="line"><span class="xml">        &#125; else &#123;</span></span><br><span class="line"><span class="xml">          previous = current;</span></span><br><span class="line"><span class="xml">          current = current.next;</span></span><br><span class="line"><span class="xml">          previous.next = current.next; //重点：将previous与current的下一项链接起来:跳过current,从而移除它</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      index++;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;; //从列表中移除一项。</span></span><br><span class="line"><span class="xml">  this.indexOf = function(element) &#123;</span></span><br><span class="line"><span class="xml">    var current = head,</span></span><br><span class="line"><span class="xml">      index = -1;</span></span><br><span class="line"><span class="xml">    while (current) &#123;</span></span><br><span class="line"><span class="xml">      if (element === current.element) &#123;</span></span><br><span class="line"><span class="xml">        return index;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      index++;</span></span><br><span class="line"><span class="xml">      current = current.next;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    return -1;</span></span><br><span class="line"><span class="xml">  &#125;; //返回元素在列表中的索引。如果列表中没有该元素则返回 -1 。</span></span><br><span class="line"><span class="xml">  this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="xml">    return length === 0;</span></span><br><span class="line"><span class="xml">  &#125;; //如果链表中不包含任何元素,返回 true ,如果链表长度大于0则返回 false 。</span></span><br><span class="line"><span class="xml">  this.size = function() &#123;</span></span><br><span class="line"><span class="xml">    return length;</span></span><br><span class="line"><span class="xml">  &#125;; //返回链表包含的元素个数。与数组的 length 属性类似。</span></span><br><span class="line"><span class="xml">  this.toString = function() &#123;</span></span><br><span class="line"><span class="xml">    var current = head,</span></span><br><span class="line"><span class="xml">      string = '';</span></span><br><span class="line"><span class="xml">    while (current) &#123;</span></span><br><span class="line"><span class="xml">      // string = current.element; //书中写法，这样只能获得最后一项的字符串</span></span><br><span class="line"><span class="xml">      string += current.next ? `$&#123;current.element&#125;,` : current.element;</span></span><br><span class="line"><span class="xml">      current = current.next;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    return string;</span></span><br><span class="line"><span class="xml">  &#125;; //由于列表项使用了 Node 类,就需要重写继承自JavaScript对象默认的toString 方法,让其只输出元素的值。</span></span><br><span class="line"><span class="xml">  this.print = function() &#123;</span></span><br><span class="line"><span class="xml">    console.log(head);</span></span><br><span class="line"><span class="xml">    console.log(length);</span></span><br><span class="line"><span class="xml">  &#125;; //辅助查看链表</span></span><br><span class="line"><span class="xml">&#125; //单项链表</span></span><br><span class="line"><span class="xml">function DoublyLinkedList() &#123;</span></span><br><span class="line"><span class="xml">  var Node = function(element) &#123;</span></span><br><span class="line"><span class="xml">    this.element = element;</span></span><br><span class="line"><span class="xml">    this.next = null;</span></span><br><span class="line"><span class="xml">    this.prev = null; //新增的</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml">  var length = 0;</span></span><br><span class="line"><span class="xml">  var head = null;</span></span><br><span class="line"><span class="xml">  var tail = null; //新增的</span></span><br><span class="line"><span class="xml">  //这里是方法</span></span><br><span class="line"><span class="xml">  this.insert = function(position, element) &#123;</span></span><br><span class="line"><span class="xml">    //检查越界值</span></span><br><span class="line"><span class="xml">    if (position &gt;= 0 &amp;&amp; position <span class="tag">&lt;<span class="name">=</span> <span class="attr">length</span>) &#123;</span></span></span><br><span class="line"><span class="xml">      var node = new Node(element),</span></span><br><span class="line"><span class="xml">        current = head,</span></span><br><span class="line"><span class="xml">        previous,</span></span><br><span class="line"><span class="xml">        index = 0;</span></span><br><span class="line"><span class="xml">      if (position === 0) &#123;</span></span><br><span class="line"><span class="xml">        if (!head) &#123;</span></span><br><span class="line"><span class="xml">          head = node;</span></span><br><span class="line"><span class="xml">          tail = node;</span></span><br><span class="line"><span class="xml">        &#125; else &#123;</span></span><br><span class="line"><span class="xml">          node.next = current;</span></span><br><span class="line"><span class="xml">          current.prev = node;</span></span><br><span class="line"><span class="xml">          head = node;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      &#125; else if (position === length) &#123;</span></span><br><span class="line"><span class="xml">        current = tail;</span></span><br><span class="line"><span class="xml">        current.next = node;</span></span><br><span class="line"><span class="xml">        node.prev = current;</span></span><br><span class="line"><span class="xml">        tail = node;</span></span><br><span class="line"><span class="xml">      &#125; else &#123;</span></span><br><span class="line"><span class="xml">        while (index++ <span class="tag">&lt; <span class="attr">position</span>) &#123;</span></span></span><br><span class="line"><span class="xml">          previous = current;</span></span><br><span class="line"><span class="xml">          current = current.next;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        node.next = current;</span></span><br><span class="line"><span class="xml">        previous.next = node;</span></span><br><span class="line"><span class="xml">        current.prev = node;</span></span><br><span class="line"><span class="xml">        node.prev = previous;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      length++; //更新列表的长度</span></span><br><span class="line"><span class="xml">      return true;</span></span><br><span class="line"><span class="xml">    &#125; else &#123;</span></span><br><span class="line"><span class="xml">      return false;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml">  this.removeAt = function(position) &#123;</span></span><br><span class="line"><span class="xml">    //检查越界值</span></span><br><span class="line"><span class="xml">    if (position &gt; -1 &amp;&amp; position <span class="tag">&lt; <span class="attr">length</span>) &#123;</span></span></span><br><span class="line"><span class="xml">      var current = head,</span></span><br><span class="line"><span class="xml">        previous,</span></span><br><span class="line"><span class="xml">        index = 0;</span></span><br><span class="line"><span class="xml">      //移除第一项</span></span><br><span class="line"><span class="xml">      if (position === 0) &#123;</span></span><br><span class="line"><span class="xml">        head = current.next; // &#123;1&#125;</span></span><br><span class="line"><span class="xml">        //如果只有一项，更新tail //新增的</span></span><br><span class="line"><span class="xml">        if (length === 1) &#123;</span></span><br><span class="line"><span class="xml">          // &#123;2&#125;</span></span><br><span class="line"><span class="xml">          tail = null;</span></span><br><span class="line"><span class="xml">        &#125; else &#123;</span></span><br><span class="line"><span class="xml">          head.prev = null; // &#123;3&#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      &#125; else if (position === length - 1) &#123;</span></span><br><span class="line"><span class="xml">        //最后一项 //新增的</span></span><br><span class="line"><span class="xml">        current = tail; // &#123;4&#125;</span></span><br><span class="line"><span class="xml">        tail = current.prev;</span></span><br><span class="line"><span class="xml">        tail.next = null;</span></span><br><span class="line"><span class="xml">      &#125; else &#123;</span></span><br><span class="line"><span class="xml">        while (index++ <span class="tag">&lt; <span class="attr">position</span>) &#123;</span></span></span><br><span class="line"><span class="xml">          // &#123;5&#125;</span></span><br><span class="line"><span class="xml">          previous = current;</span></span><br><span class="line"><span class="xml">          current = current.next;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        //将previous与current的下一项链接起来——跳过current</span></span><br><span class="line"><span class="xml">        previous.next = current.next; // &#123;6&#125;</span></span><br><span class="line"><span class="xml">        current.next.prev = previous; //新增的</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">      length--;</span></span><br><span class="line"><span class="xml">      return current.element;</span></span><br><span class="line"><span class="xml">    &#125; else &#123;</span></span><br><span class="line"><span class="xml">      return null;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml">&#125; //双向链表</span></span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>一种非顺序数据结构<br>集合是由一组无序且唯一（即不能重复）的项组成的。<br>集合中的对象列表用<code>{}</code>（大括号）包围。</p></blockquote><h4 id="创建一个集合"><a href="#创建一个集合" class="headerlink" title="创建一个集合"></a>创建一个集合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.has(value)) &#123;</span><br><span class="line">      items[value] = value;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;; <span class="comment">//向集合添加一个新的项。</span></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(value)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> items[value];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;; <span class="comment">//从集合移除一个值。</span></span><br><span class="line">  <span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return value in items; //老办法</span></span><br><span class="line">    <span class="keyword">return</span> items.hasOwnProperty(value);</span><br><span class="line">  &#125;; <span class="comment">//如果值在集合中，返回true，否则返回false。</span></span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    items = &#123;&#125;;</span><br><span class="line">  &#125;; <span class="comment">//移除集合中的所有项。</span></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var count = 0;</span></span><br><span class="line">    <span class="comment">// for (var prop in items) &#123;</span></span><br><span class="line">    <span class="comment">//   if (items.hasOwnProperty(prop)) &#123;</span></span><br><span class="line">    <span class="comment">//     ++count;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// return count;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length;</span><br><span class="line">  &#125;; <span class="comment">//返回集合所包含元素的数量。与数组的length属性类似。</span></span><br><span class="line">  <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items);</span><br><span class="line">  &#125;; <span class="comment">//返回一个包含集合中所有值的数组。</span></span><br><span class="line">  <span class="keyword">this</span>.union = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">      unionSet.add(values[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    values = otherSet.values();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">      unionSet.add(values[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">  &#125;; <span class="comment">//并集</span></span><br><span class="line">  <span class="keyword">this</span>.intersection = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (otherSet.has(values[i])) &#123;</span><br><span class="line">        intersectionSet.add(values[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">  &#125;; <span class="comment">//交集</span></span><br><span class="line">  <span class="keyword">this</span>.difference = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!otherSet.has(values[i])) &#123;</span><br><span class="line">        differenceSet.add(values[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">  &#125;; <span class="comment">//差集</span></span><br><span class="line">  <span class="keyword">this</span>.subset = <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.size() &gt; otherSet.size()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!otherSet.has(values[i])) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="comment">//子集</span></span><br></pre></td></tr></table></figure><h3 id="字典和散列表"><a href="#字典和散列表" class="headerlink" title="字典和散列表"></a>字典和散列表</h3><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><blockquote><p>一种非顺序数据结构<br>在字典中，存储的是<code>[键，值]</code>对，其中键名是用来查询特定元素的。<br>字典和集合很相似，集合以<code>[值，值]</code>的形式存储元素，字典则是以<code>[键，值]</code>的形式来存储元素。<br>字典也称作映射。</p></blockquote><h4 id="创建一个字典"><a href="#创建一个字典" class="headerlink" title="创建一个字典"></a>创建一个字典</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = &#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    items[key] = value;</span><br><span class="line">  &#125; <span class="comment">//向字典中添加新元素。</span></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> items[key];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;; <span class="comment">//通过使用键值来从字典中移除键值对应的数据值。</span></span><br><span class="line">  <span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> items;</span><br><span class="line">  &#125;; <span class="comment">//如果某个键值存在于这个字典中，则返回true，反之则返回false。</span></span><br><span class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.has(key) ? items[key] : <span class="literal">undefined</span>;</span><br><span class="line">  &#125;; <span class="comment">//通过键值查找特定的数值并返回。</span></span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">//将这个字典中的所有元素全部删除。</span></span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">//返回字典所包含元素的数量。与数组的length属性类似。</span></span><br><span class="line">  <span class="keyword">this</span>.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">//将字典所包含的所有键名以数组形式返回。</span></span><br><span class="line">  <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> values = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> items) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.has(k)) &#123;</span><br><span class="line">        values.push(items[k]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">  &#125;; <span class="comment">//将字典所包含的所有数值以数组形式返回。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><blockquote><p>一种非顺序数据结构<br>散列表就是通过散列算法将字典的键转化成对应下标值取得键对应的值。<br>散列算法的作用是尽可能快地在数据结构中找到一个值。</p></blockquote><h4 id="创建一个散列表"><a href="#创建一个散列表" class="headerlink" title="创建一个散列表"></a>创建一个散列表</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> table = [];</span><br><span class="line">  <span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">      hash += key.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">  &#125;; <span class="comment">//散列函数</span></span><br><span class="line">  <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">    <span class="built_in">console</span>.log(position + <span class="string">' - '</span> + key);</span><br><span class="line">    table[position] = value;</span><br><span class="line">  &#125;; <span class="comment">//向散列表增加一个新的项(也能更新散列表)</span></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    table[loseloseHashCode(key)] = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;; <span class="comment">//根据键值从散列表中移除值。</span></span><br><span class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> table[loseloseHashCode(key)];</span><br><span class="line">  &#125;; <span class="comment">//返回根据键值检索到的特定的值。</span></span><br><span class="line">&#125; <span class="comment">//带冲突的散列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>１(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> table = [];</span><br><span class="line">  <span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">      hash += key.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">  &#125;; <span class="comment">//散列函数</span></span><br><span class="line">  <span class="keyword">var</span> ValuePair = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'['</span> + <span class="keyword">this</span>.key + <span class="string">' - '</span> + <span class="keyword">this</span>.value + <span class="string">']'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">    <span class="keyword">if</span> (table[position] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      table[position] = <span class="keyword">new</span> LinkedList(); <span class="comment">//前面的链表</span></span><br><span class="line">    &#125;</span><br><span class="line">    table[position].append(<span class="keyword">new</span> ValuePair(key, value));</span><br><span class="line">  &#125;; <span class="comment">//向散列表增加一个新的项(也能更新散列表)</span></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">    <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> current = table[position].getHead();</span><br><span class="line">      <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.element.key === key) &#123;</span><br><span class="line">          table[position].remove(current.element);</span><br><span class="line">          <span class="keyword">if</span> (table[position].isEmpty()) &#123;</span><br><span class="line">            table[position] = <span class="literal">undefined</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 检查是否为第一个或最后一个元素</span></span><br><span class="line">      <span class="keyword">if</span> (current.element.key === key) &#123;</span><br><span class="line">        table[position].remove(current.element);</span><br><span class="line">        <span class="keyword">if</span> (table[position].isEmpty()) &#123;</span><br><span class="line">          table[position] = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;; <span class="comment">//根据键值从散列表中移除值。</span></span><br><span class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">    <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> current = table[position].getHead();</span><br><span class="line">      <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.element.key === key) &#123;</span><br><span class="line">          <span class="keyword">return</span> current.element.value;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//检查元素在链表第一个或最后一个节点的情况</span></span><br><span class="line">      <span class="keyword">if</span> (current.element.key === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> current.element.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;; <span class="comment">//返回根据键值检索到的特定的值。</span></span><br><span class="line">&#125; <span class="comment">//分离链接解决散列表冲突</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>２(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> table = [];</span><br><span class="line">  <span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">      hash += key.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">  &#125;; <span class="comment">//散列函数</span></span><br><span class="line">  <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">    <span class="keyword">if</span> (table[position] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      table[position] = <span class="keyword">new</span> ValuePair(key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> index = ++position;</span><br><span class="line">      <span class="keyword">while</span> (table[index] != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        index++;</span><br><span class="line">      &#125;</span><br><span class="line">      table[index] = <span class="keyword">new</span> ValuePair(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;; <span class="comment">//向散列表增加一个新的项(也能更新散列表)</span></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">    <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (table[position].key === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> table[position].value;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = ++position;</span><br><span class="line">        <span class="keyword">while</span> (table[index] === <span class="literal">undefined</span> || table[index].key !== key) &#123;</span><br><span class="line">          index++;</span><br><span class="line">        &#125;</span><br><span class="line">        table[index] = <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;; <span class="comment">//根据键值从散列表中移除值。</span></span><br><span class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">    <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (table[position].key === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> table[position].value;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = ++position;</span><br><span class="line">        <span class="keyword">while</span> (table[index] === <span class="literal">undefined</span> || table[index].key !== key) &#123;</span><br><span class="line">          index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (table[index].key === key) &#123;</span><br><span class="line">          <span class="keyword">return</span> table[index].value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;; <span class="comment">//返回根据键值检索到的特定的值。</span></span><br><span class="line">&#125; <span class="comment">//线性探查解决散列表冲突</span></span><br><span class="line"><span class="keyword">var</span> djb2HashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">5381</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">    hash = hash * <span class="number">33</span> + key.charCodeAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash % <span class="number">1013</span>;</span><br><span class="line">&#125;; <span class="comment">//更好的散列函数</span></span><br></pre></td></tr></table></figure><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><blockquote><p>一种非顺序数据结构<br>它对于存储需要快速查找的数据非常有用。</p></blockquote><h4 id="创建-BinarySearchTree-类"><a href="#创建-BinarySearchTree-类" class="headerlink" title="创建 BinarySearchTree 类"></a>创建 BinarySearchTree 类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> root = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt; node.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.left, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.right, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">      root = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      insertNode(root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;; <span class="comment">//向树中插入一个新的键。</span></span><br><span class="line">  <span class="keyword">var</span> searchNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      <span class="keyword">return</span> searchNode(node.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      <span class="keyword">return</span> searchNode(node.right, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.search = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> searchNode(root, key);</span><br><span class="line">  &#125;; <span class="comment">//在树中查找一个键,如果节点存在,则返回 true ;如果不存在,则返回false 。</span></span><br><span class="line">  <span class="keyword">var</span> inOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      inOrderTraverseNode(node.left, callback);</span><br><span class="line">      callback(node.key);</span><br><span class="line">      inOrderTraverseNode(node.right, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.inOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    inOrderTraverseNode(root, callback);</span><br><span class="line">  &#125;; <span class="comment">//通过中序遍历方式遍历所有节点。</span></span><br><span class="line">  <span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      callback(node.key);</span><br><span class="line">      preOrderTraverseNode(node.left, callback);</span><br><span class="line">      preOrderTraverseNode(node.right, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    preOrderTraverseNode(root, callback);</span><br><span class="line">  &#125;; <span class="comment">//通过先序遍历方式遍历所有节点。</span></span><br><span class="line">  <span class="keyword">var</span> postOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      postOrderTraverseNode(node.left, callback);</span><br><span class="line">      postOrderTraverseNode(node.right, callback);</span><br><span class="line">      callback(node.key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.postOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    postOrderTraverseNode(root, callback);</span><br><span class="line">  &#125;; <span class="comment">//通过后序遍历方式遍历所有节点。</span></span><br><span class="line">  <span class="keyword">var</span> minNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minNode(root);</span><br><span class="line">  &#125;; <span class="comment">//返回树中最小的值/键。</span></span><br><span class="line">  <span class="keyword">var</span> maxNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.max = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maxNode(root);</span><br><span class="line">  &#125;; <span class="comment">//返回树中最大的值/键。</span></span><br><span class="line">  <span class="keyword">var</span> removeNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      node.left = removeNode(node.left, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      node.right = removeNode(node.right, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//键等于node.key</span></span><br><span class="line">      <span class="comment">//第一种情况——一个叶节点</span></span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//第二种情况——一个只有一个子节点的节点</span></span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.right;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//第三种情况——一个有两个子节点的节点</span></span><br><span class="line">      <span class="keyword">var</span> aux = findMinNode(node.right);</span><br><span class="line">      node.key = aux.key;</span><br><span class="line">      node.right = removeNode(node.right, aux.key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    root = removeNode(root, key);</span><br><span class="line">  &#125;; <span class="comment">//从树中移除某个键。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><blockquote><p>一种非线性数据结构。<br>图是网络结构的抽象模型。</p></blockquote><h4 id="创建图类"><a href="#创建图类" class="headerlink" title="创建图类"></a>创建图类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> vertices = [];</span><br><span class="line">  <span class="keyword">var</span> adjList = <span class="keyword">new</span> Dictionary();</span><br><span class="line">  <span class="keyword">this</span>.addVertex = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    vertices.push(v);</span><br><span class="line">    adjList.set(v, []);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.addEdge = <span class="function"><span class="keyword">function</span>(<span class="params">v, w</span>) </span>&#123;</span><br><span class="line">    adjList.get(v).push(w);</span><br><span class="line">    adjList.get(w).push(v);</span><br><span class="line">  &#125;; <span class="comment">//添加元素</span></span><br><span class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">      s += vertices[i] + <span class="string">' -&gt; '</span>;</span><br><span class="line">      <span class="keyword">var</span> neighbors = adjList.get(vertices[i]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; neighbors.length; j++) &#123;</span><br><span class="line">        s += neighbors[j] + <span class="string">' '</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      s += <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;; <span class="comment">//显示图</span></span><br><span class="line">  <span class="keyword">var</span> initializeColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">      color[vertices[i]] = <span class="string">'white'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.bfs = <span class="function"><span class="keyword">function</span>(<span class="params">v, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor(),</span><br><span class="line">      queue = <span class="keyword">new</span> Queue();</span><br><span class="line">    queue.enqueue(v);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">var</span> u = queue.dequeue(),</span><br><span class="line">        neighbors = adjList.get(u);</span><br><span class="line">      color[u] = <span class="string">'grey'</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">        <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">          color[w] = <span class="string">'grey'</span>;</span><br><span class="line">          queue.enqueue(w);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      color[u] = <span class="string">'black'</span>;</span><br><span class="line">      <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">        callback(u);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;; <span class="comment">//广度优先搜索</span></span><br><span class="line">  <span class="keyword">this</span>.BFS = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor(),</span><br><span class="line">      queue = <span class="keyword">new</span> Queue(),</span><br><span class="line">      d = [],</span><br><span class="line">      pred = [];</span><br><span class="line">    queue.enqueue(v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">      d[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">      pred[vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">var</span> u = queue.dequeue(),</span><br><span class="line">        neighbors = adjList.get(u);</span><br><span class="line">      color[u] = <span class="string">'grey'</span>;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">        <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">          color[w] = <span class="string">'grey'</span>;</span><br><span class="line">          d[w] = d[u] + <span class="number">1</span>;</span><br><span class="line">          pred[w] = u;</span><br><span class="line">          queue.enqueue(w);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      color[u] = <span class="string">'black'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      distances: d,</span><br><span class="line">      predecessors: pred</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;; <span class="comment">//优化广度优先搜索</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.dfs = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (color[vertices[i]] === <span class="string">'white'</span>) &#123;</span><br><span class="line">        dfsVisit(vertices[i], color, callback);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> dfsVisit = <span class="function"><span class="keyword">function</span>(<span class="params">u, color, callback</span>) </span>&#123;</span><br><span class="line">    color[u] = <span class="string">'grey'</span>;</span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      callback(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> neighbors = adjList.get(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">      <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">        dfsVisit(w, color, callback);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    color[u] = <span class="string">'black'</span>;</span><br><span class="line">  &#125;; <span class="comment">//深度优先搜索</span></span><br><span class="line">  <span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> DFSVisit = <span class="function"><span class="keyword">function</span>(<span class="params">u, color, d, f, p</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'discovered '</span> + u);</span><br><span class="line">    color[u] = <span class="string">'grey'</span>;</span><br><span class="line">    d[u] = ++time;</span><br><span class="line">    <span class="keyword">var</span> neighbors = adjList.get(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">      <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">        p[w] = u;</span><br><span class="line">        DFSVisit(w, color, d, f, p);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    color[u] = <span class="string">'black'</span>;</span><br><span class="line">    f[u] = ++time;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'explored '</span> + u);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.DFS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor(),</span><br><span class="line">      d = [],</span><br><span class="line">      f = [],</span><br><span class="line">      p = [];</span><br><span class="line">    time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">      f[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">      d[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">      p[vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (color[vertices[i]] === <span class="string">'white'</span>) &#123;</span><br><span class="line">        DFSVisit(vertices[i], color, d, f, p);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      discovery: d,</span><br><span class="line">      finished: f,</span><br><span class="line">      predecessors: p</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;; <span class="comment">//优化深度优先搜索</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序和搜索算法"><a href="#排序和搜索算法" class="headerlink" title="排序和搜索算法"></a>排序和搜索算法</h3><blockquote><p>排序算法：冒泡排序、选择排序、插入排序、归并排序、快速排序<br>搜索算法：顺序搜索、二分搜索</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = [];</span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    array.push(item);</span><br><span class="line">  &#125;; <span class="comment">//插入元素</span></span><br><span class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array.join();</span><br><span class="line">  &#125;; <span class="comment">//返回字符串</span></span><br><span class="line">  <span class="keyword">var</span> swap = <span class="function"><span class="keyword">function</span>(<span class="params">index1, index2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aux = array[index1];</span><br><span class="line">    array[index1] = array[index2];</span><br><span class="line">    array[index2] = aux;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.bubbleSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="comment">// for (var j = 0; j &lt; length - 1; j++) &#123; //未改进的排序</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">          swap(j, j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;; <span class="comment">//冒泡排序（比较相邻元素，前一个大于后一个则交换位置，最终得到升序数组）</span></span><br><span class="line">  <span class="keyword">this</span>.selectionSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length,</span><br><span class="line">      indexMin;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      indexMin = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt; length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[indexMin] &gt; array[j]) &#123;</span><br><span class="line">          indexMin = j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i !== indexMin) &#123;</span><br><span class="line">        swap(i, indexMin);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;; <span class="comment">//选择排序（比较数组类数据，最小的一项与当前循环轮数项交换，最终得到升序数组）</span></span><br><span class="line">  <span class="keyword">this</span>.insertionSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length,</span><br><span class="line">      j,</span><br><span class="line">      temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">      j = i;</span><br><span class="line">      temp = array[i];</span><br><span class="line">      <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; array[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">        array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;; <span class="comment">//插入排序（插入排序每次排一个数组项，以此方式构建最后的排序数组）</span></span><br><span class="line">  <span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [],</span><br><span class="line">      il = <span class="number">0</span>,</span><br><span class="line">      ir = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (il &lt; left.length &amp;&amp; ir &lt; right.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left[il] &lt; right[ir]) &#123;</span><br><span class="line">        result.push(left[il++]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.push(right[ir++]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (il &lt; left.length) &#123;</span><br><span class="line">      result.push(left[il++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ir &lt; right.length) &#123;</span><br><span class="line">      result.push(right[ir++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> mergeSortRec = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length;</span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>),</span><br><span class="line">      left = array.slice(<span class="number">0</span>, mid),</span><br><span class="line">      right = array.slice(mid, length);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSortRec(left), mergeSortRec(right));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.mergeSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    array = mergeSortRec(array);</span><br><span class="line">  &#125;; <span class="comment">//归并排序（打散后重新组合）</span></span><br><span class="line">  <span class="keyword">var</span> swapQuickStort = <span class="function"><span class="keyword">function</span>(<span class="params">array, index1, index2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aux = array[index1];</span><br><span class="line">    array[index1] = array[index2];</span><br><span class="line">    array[index2] = aux;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> partition = <span class="function"><span class="keyword">function</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pivot = array[<span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>)],</span><br><span class="line">      i = left,</span><br><span class="line">      j = right;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">      <span class="keyword">while</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (array[j] &gt; pivot) &#123;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">        swapQuickStort(array, i, j);</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> quick = <span class="function"><span class="keyword">function</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index;</span><br><span class="line">    <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      index = partition(array, left, right);</span><br><span class="line">      <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">        quick(array, left, index - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">        quick(array, index, right);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.quickSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    quick(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">  &#125;; <span class="comment">//快速排序</span></span><br><span class="line">  <span class="keyword">this</span>.sequentialSearch = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item === array[i]) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;; <span class="comment">//顺序搜索</span></span><br><span class="line">  <span class="keyword">this</span>.binarySearch = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.quickSort();</span><br><span class="line">    <span class="keyword">var</span> low = <span class="number">0</span>,</span><br><span class="line">      high = array.length - <span class="number">1</span>,</span><br><span class="line">      mid,</span><br><span class="line">      element;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">      mid = <span class="built_in">Math</span>.floor((low + high) / <span class="number">2</span>);</span><br><span class="line">      element = array[mid];</span><br><span class="line">      <span class="keyword">if</span> (element &lt; item) &#123;</span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &gt; item) &#123;</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;; <span class="comment">//二分搜索</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法补充知识"><a href="#算法补充知识" class="headerlink" title="算法补充知识"></a>算法补充知识</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><blockquote><p>递归是一种解决问题的方法，它解决问题的各个小部分，直到解决最初的大问题。<br>通常涉及函数调用自身。</p></blockquote><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><blockquote><p>动态规划（Dynamic Programming，DP）是一种将复杂问题分解成更小的子问题来解决的优化技术。</p></blockquote><p>用动态规划解决问题时，要遵循三个重要步骤：</p><ol><li>定义子问题；</li><li>实现要反复执行而解决子问题的部分（这一步要参考前一节讨论的递归的步骤）；</li><li>识别并求解出边界条件。</li></ol><p>能用动态规划解决的一些著名的问题如下:</p><ul><li>背包问题：给出一组项目，各自有值和容量，目标是找出总值最大的项目的集合。这个<br>问题的限制是，总容量必须小于等于“背包”的容量。</li><li>最长公共子序列：找出一组序列的最长公共子序列（可由另一序列删除元素但不改变余<br>下元素的顺序而得到）。</li><li>矩阵链相乘：给出一系列矩阵，目标是找到这些矩阵相乘的最高效办法（计算次数尽可<br>能少）。相乘操作不会进行，解决方案是找到这些矩阵各自相乘的顺序。</li><li>硬币找零：给出面额为 d1…dn 的一定数量的硬币和要找零的钱数，找出有多少种找零的<br>方法。</li><li>图的全源最短路径：对所有顶点对(u, v)，找出从顶点 u 到顶点 v 的最短路径。</li></ul><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><blockquote><p>贪心算法遵循一种近似解决问题的技术，期盼通过每个阶段的局部最优选择（当前最好的解），从而达到全局的最优（全局最优解）。</p></blockquote><h4 id="大-O-表示法"><a href="#大-O-表示法" class="headerlink" title="大 O 表示法"></a>大 O 表示法</h4><blockquote><p>描述算法的性能和复杂程度。<br>O(1)：常数的<br>O(log(n))：对数的<br>O((log(n))c)：对数多项式的<br>O(n)：线性的<br>O($n^2$)：二次的<br>O($n^c$)：多项式的<br>O($c^n$)：指数的</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看完 react 的 diff 算法和 swagger 的数据结构，想温习波数据结构和算法。&lt;/p&gt;
    
    </summary>
    
      <category term="兴趣" scheme="https://shawdanon.github.io/categories/%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="阅读笔记" scheme="https://shawdanon.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端开发人员面试问题</title>
    <link href="https://shawdanon.github.io/collection/front-end-Interview/"/>
    <id>https://shawdanon.github.io/collection/front-end-Interview/</id>
    <published>2018-10-04T16:00:00.000Z</published>
    <updated>2019-07-28T07:03:42.043Z</updated>
    
    <content type="html"><![CDATA[<p>前端面试…</p><a id="more"></a><h2 id="前端工作面试问题"><a href="#前端工作面试问题" class="headerlink" title="前端工作面试问题"></a>前端工作面试问题</h2><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>你在昨天/本周学到了什么？<!-- 建议每周写一篇博文. --></li><li><p>编写代码的哪些方面能够使你兴奋或感兴趣？</p></li><li><p>你最近遇到过什么技术挑战？你是如何解决的？</p></li><li>在制作一个网页应用或网站的过程中，你是如何考虑其 UI、安全性、高性能、SEO、可维护性以及技术因素的？</li><li>请谈谈你喜欢的开发环境。</li><li>你最熟悉哪一套版本控制系统？</li><li>你能描述当你制作一个网页的工作流程吗？</li><li>假若你有 5 个不同的样式文件 (stylesheets), 整合进网站的最好方式是?</li><li>你能描述渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation) 之间的不同吗?</li><li>你如何对网站的文件和资源进行优化？</li><li>浏览器同一时间可以从一个域名下载多少资源？<ul><li>有什么例外吗？</li></ul></li><li>请说出三种减少页面加载时间的方法。(加载时间指感知的时间或者实际加载时间)</li><li>如果你参与到一个项目中，发现他们使用 Tab 来缩进代码，但是你喜欢空格，你会怎么做？</li><li>请写一个简单的幻灯效果页面。</li><li>如果今年你打算熟练掌握一项新技术，那会是什么？</li><li>请谈谈你对网页标准和标准制定机构重要性的理解。</li><li>什么是 FOUC (无样式内容闪烁)？你如何来避免 FOUC？</li><li>请解释什么是 ARIA 和屏幕阅读器 (screenreaders)，以及如何使网站实现无障碍访问 (accessible)。</li><li>请解释 CSS 动画和 JavaScript 动画的优缺点。</li><li>什么是跨域资源共享 (CORS)？它用于解决什么问题？</li></ul><h3 id="HTML-相关问题"><a href="#HTML-相关问题" class="headerlink" title="HTML 相关问题"></a>HTML 相关问题</h3><ul><li><code>doctype</code>(文档类型) 的作用是什么？</li><li>浏览器标准模式 (standards mode) 、几乎标准模式（almost standards mode）和怪异模式 (quirks mode) 之间的区别是什么？</li><li>HTML 和 XHTML 有什么区别？</li><li>如果页面使用 ‘application/xhtml+xml’ 会有什么问题吗？</li><li>如果网页内容需要支持多语言，你会怎么做？</li><li>在设计和开发多语言网站时，有哪些问题你必须要考虑？</li><li>使用 <code>data-</code> 属性的好处是什么？</li><li>如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？</li><li>请描述 <code>cookies</code>、<code>sessionStorage</code> 和 <code>localStorage</code> 的区别。</li><li>请解释 <code>&lt;script&gt;</code>、<code>&lt;script async&gt;</code> 和 <code>&lt;script defer&gt;</code> 的区别。</li><li>为什么通常推荐将 CSS <code>&lt;link&gt;</code> 放置在 <code>&lt;head&gt;&lt;/head&gt;</code> 之间，而将 JS <code>&lt;script&gt;</code> 放置在 <code>&lt;/body&gt;</code> 之前？你知道有哪些例外吗？</li><li>什么是渐进式渲染 (progressive rendering)？</li><li>你用过哪些不同的 HTML 模板语言？</li></ul><h3 id="CSS-相关问题"><a href="#CSS-相关问题" class="headerlink" title="CSS 相关问题"></a>CSS 相关问题</h3><ul><li>CSS 中类 (classes) 和 ID 的区别。</li><li>请问 “resetting” 和 “normalizing” CSS 之间的区别？你会如何选择，为什么？</li><li>请解释浮动 (Floats) 及其工作原理。</li><li>描述<code>z-index</code>和叠加上下文是如何形成的。</li><li>请描述 BFC(Block Formatting Context) 及其如何工作。</li><li>列举不同的清除浮动的技巧，并指出它们各自适用的使用场景。</li><li>请解释 CSS sprites，以及你要如何在页面或网站中实现它。</li><li>你最喜欢的图片替换方法是什么，你如何选择使用。</li><li>你会如何解决特定浏览器的样式问题？</li><li>如何为有功能限制的浏览器提供网页？<ul><li>你会使用哪些技术和处理方法？</li></ul></li><li>有哪些的隐藏内容的方法 (如果同时还要保证屏幕阅读器可用呢)？</li><li>你用过栅格系统 (grid system) 吗？如果使用过，你最喜欢哪种？</li><li>你用过媒体查询，或针对移动端的布局/CSS 吗？</li><li>你熟悉 SVG 样式的书写吗？</li><li>如何优化网页的打印样式？</li><li>在书写高效 CSS 时会有哪些问题需要考虑？</li><li>使用 CSS 预处理器的优缺点有哪些？<ul><li>请描述你曾经使用过的 CSS 预处理器的优缺点。</li></ul></li><li>如果设计中使用了非标准的字体，你该如何去实现？</li><li>请解释浏览器是如何判断元素是否匹配某个 CSS 选择器？</li><li>请描述伪元素 (pseudo-elements) 及其用途。</li><li>请解释你对盒模型的理解，以及如何在 CSS 中告诉浏览器使用不同的盒模型来渲染你的布局。</li><li>请解释 <code>* { box-sizing: border-box; }</code> 的作用, 并且说明使用它有什么好处？</li><li>请罗列出你所知道的 display 属性的全部值</li><li>请解释 inline 和 inline-block 的区别？</li><li>请解释 relative、fixed、absolute 和 static 元素的区别</li><li>CSS 中字母 ‘C’ 的意思是叠层 (Cascading)。请问在确定样式的过程中优先级是如何决定的 (请举例)？如何有效使用此系统？</li><li>你在开发或生产环境中使用过哪些 CSS 框架？你觉得应该如何改善他们？</li><li>请问你有尝试过 CSS Flexbox 或者 Grid 标准规格吗？</li><li>为什么响应式设计 (responsive design) 和自适应设计 (adaptive design) 不同？</li><li>你有兼容 retina 屏幕的经历吗？如果有，在什么地方使用了何种技术？</li><li>请问为何要使用 <code>translate()</code> 而非 <em>absolute positioning</em>，或反之的理由？为什么？</li></ul><h3 id="JS-相关问题"><a href="#JS-相关问题" class="headerlink" title="JS 相关问题"></a>JS 相关问题</h3><ul><li>请解释事件代理 (event delegation)。</li><li>请解释 JavaScript 中 <code>this</code> 是如何工作的。</li><li>请解释原型继承 (prototypal inheritance) 的原理。</li><li>你怎么看 AMD vs. CommonJS？</li><li>请解释为什么接下来这段代码不是 IIFE (立即调用的函数表达式)：<code>function foo(){ }();</code>.<ul><li>要做哪些改动使它变成 IIFE?</li></ul></li><li>描述以下变量的区别：<code>null</code>，<code>undefined</code> 或 <code>undeclared</code>？<ul><li>该如何检测它们？</li></ul></li><li>什么是闭包 (closure)，如何使用它，为什么要使用它？</li><li>请举出一个匿名函数的典型用例？</li><li>你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？</li><li>请指出 JavaScript 宿主对象 (host objects) 和原生对象 (native objects) 的区别？</li><li>请指出以下代码的区别：<code>function Person(){}</code>、<code>var person = Person()</code>、<code>var person = new Person()</code>？</li><li><code>.call</code> 和 <code>.apply</code> 的区别是什么？</li><li>请解释 <code>Function.prototype.bind</code>？</li><li>在什么时候你会使用 <code>document.write()</code>？</li><li>请指出浏览器特性检测，特性推断和浏览器 UA 字符串嗅探的区别？</li><li>请尽可能详尽的解释 Ajax 的工作原理。</li><li>使用 Ajax 都有哪些优劣？</li><li>请解释 JSONP 的工作原理，以及它为什么不是真正的 Ajax。</li><li>你使用过 JavaScript 模板系统吗？<ul><li>如有使用过，请谈谈你都使用过哪些库？</li></ul></li><li>请解释变量声明提升 (hoisting)。</li><li>请描述事件冒泡机制 (event bubbling)。</li><li>“attribute” 和 “property” 的区别是什么？</li><li>为什么扩展 JavaScript 内置对象不是好的做法？</li><li>请指出 document load 和 document DOMContentLoaded 两个事件的区别。</li><li><code>==</code> 和 <code>===</code> 有什么不同？</li><li>请解释 JavaScript 的同源策略 (same-origin policy)。</li><li>如何实现下列代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].duplicator(); <span class="comment">// [1,2,3,4,5,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><ul><li>什么是三元表达式 (Ternary expression)？“三元 (Ternary)” 表示什么意思？</li><li>什么是 <code>&quot;use strict&quot;;</code> ? 使用它的好处和坏处分别是什么？</li><li>请实现一个遍历至 <code>100</code> 的 for loop 循环，在能被 <code>3</code> 整除时输出 <strong>“fizz”</strong>，在能被 <code>5</code> 整除时输出 <strong>“buzz”</strong>，在能同时被 <code>3</code> 和 <code>5</code> 整除时输出 <strong>“fizzbuzz”</strong>。</li><li>为何通常会认为保留网站现有的全局作用域 (global scope) 不去改变它，是较好的选择？</li><li>为何你会使用 <code>load</code> 之类的事件 (event)？此事件有缺点吗？你是否知道其他替代品，以及为何使用它们？</li><li>请解释什么是单页应用 (single page app), 以及如何使其对搜索引擎友好 (SEO-friendly)。</li><li>你使用过 Promises 及其 polyfills 吗? 请写出 Promise 的基本用法（ES6）。</li><li>使用 Promises 而非回调 (callbacks) 优缺点是什么？</li><li>使用一种可以编译成 JavaScript 的语言来写 JavaScript 代码有哪些优缺点？</li><li>你使用哪些工具和技术来调试 JavaScript 代码？</li><li>你会使用怎样的语言结构来遍历对象属性 (object properties) 和数组内容？</li><li>请解释可变 (mutable) 和不变 (immutable) 对象的区别。<ul><li>请举出 JavaScript 中一个不变性对象 (immutable object) 的例子？</li><li>不变性 (immutability) 有哪些优缺点？</li><li>如何用你自己的代码来实现不变性 (immutability)？</li></ul></li><li>请解释同步 (synchronous) 和异步 (asynchronous) 函数的区别。</li><li>什么是事件循环 (event loop)？<ul><li>请问调用栈 (call stack) 和任务队列 (task queue) 的区别是什么？</li></ul></li><li>解释 <code>function foo() {}</code> 与 <code>var foo = function() {}</code> 用法的区别</li></ul><h3 id="测试相关问题"><a href="#测试相关问题" class="headerlink" title="测试相关问题"></a>测试相关问题</h3><ul><li>对代码进行测试的有什么优缺点？</li><li>你会用什么工具测试你的代码功能？</li><li>单元测试与功能/集成测试的区别是什么？</li><li>代码风格 linting 工具的作用是什么？</li></ul><h3 id="效能相关问题"><a href="#效能相关问题" class="headerlink" title="效能相关问题"></a>效能相关问题</h3><ul><li>你会用什么工具来查找代码中的性能问题？</li><li>你会用什么方式来增强网站的页面滚动效能？</li><li>请解释 layout、painting 和 compositing 的区别。</li></ul><h3 id="网络相关问题"><a href="#网络相关问题" class="headerlink" title="网络相关问题"></a>网络相关问题</h3><ul><li>为什么传统上利用多个域名来提供网站资源会更有效？</li><li>请尽可能完整得描述从输入 URL 到整个网页加载完毕及显示在屏幕上的整个流程。</li><li>Long-Polling、Websockets 和 Server-Sent Event 之间有什么区别？</li><li>请描述以下 request 和 response headers：<ul><li>Diff. between Expires, Date, Age and If-Modified-…</li><li>Do Not Track</li><li>Cache-Control</li><li>Transfer-Encoding</li><li>ETag</li><li>X-Frame-Options</li></ul></li><li>什么是 HTTP method？请罗列出你所知道的所有 HTTP method，并给出解释。</li><li>请解释 HTTP status 301 与 302 的区别？</li></ul><h3 id="代码相关的问题"><a href="#代码相关的问题" class="headerlink" title="代码相关的问题"></a>代码相关的问题</h3><p><em>问题：<code>foo</code>的值是什么？</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">10</span> + <span class="string">'20'</span>;</span><br></pre></td></tr></table></figure><p><em>问题：如何实现以下函数？</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">2</span>, <span class="number">5</span>); <span class="comment">// 7</span></span><br><span class="line">add(<span class="number">2</span>)(<span class="number">5</span>); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p><em>问题：下面的语句的返回值是什么？</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"i'm a lasagna hog"</span></span><br><span class="line">  .split(<span class="string">''</span>)</span><br><span class="line">  .reverse()</span><br><span class="line">  .join(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><p><em>问题：<code>window.foo</code>的值是什么？</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.foo || (<span class="built_in">window</span>.foo = <span class="string">'bar'</span>);</span><br></pre></td></tr></table></figure><p><em>问题：下面两个 alert 的结果是什么？</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'Hello'</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="string">' World'</span>;</span><br><span class="line">  alert(foo + bar);</span><br><span class="line">&#125;)();</span><br><span class="line">alert(foo + bar);</span><br></pre></td></tr></table></figure><p><em>问题：<code>foo.length</code>的值是什么？</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = [];</span><br><span class="line">foo.push(<span class="number">1</span>);</span><br><span class="line">foo.push(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><em>问题：<code>foo.x</code>的值是什么？</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">n</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line">foo.x = foo = &#123; <span class="attr">n</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><p><em>问题：下面代码的输出是什么？</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'three'</span>);</span><br></pre></td></tr></table></figure><h3 id="趣味问题"><a href="#趣味问题" class="headerlink" title="趣味问题"></a>趣味问题</h3><ul><li>你最近写过什么的很酷的项目吗？</li><li>在你使用的开发工具中，最喜欢哪些方面？</li><li>谁使你踏足了前端开发领域？</li><li>你有什么业余项目吗？是哪种类型的？</li><li>你最爱的 IE 特性是什么？</li><li>你对咖啡有没有什么喜好？</li></ul><h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="noopener">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端面试…&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://shawdanon.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试" scheme="https://shawdanon.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记一次小程序开发</title>
    <link href="https://shawdanon.github.io/2018/first-mini-program/"/>
    <id>https://shawdanon.github.io/2018/first-mini-program/</id>
    <published>2018-09-27T16:00:00.000Z</published>
    <updated>2019-07-28T07:11:11.398Z</updated>
    
    <content type="html"><![CDATA[<p>第一次小程序开发。</p><a id="more"></a><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>开始时间：2018.8.20<br>开发结束时间：2018.9.21<br>测试结束时间：2018.9.28<br>页面组件统计:32 个页面组件<br>公共组件统计:11 个公共组件<br>实际工作时间(包括加班):开发 271.5 小时，测试 67.5 小时</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>第一次做手机端 APP，第一次使用小程序开发，第一次使用数据驱动做公司项目（原来用的 jQuery 进行 dom 操作）。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>按照 APP（商城类）开发小程序</p><h2 id="详细经历"><a href="#详细经历" class="headerlink" title="详细经历"></a>详细经历</h2><h3 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h3><ol><li>像素单位用 rpx,2rpx ＝ 1px。</li><li>flex 垂直布局 margin-right 失效。</li></ol><h3 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h3><ol><li>问题：Java 后端返回 id 为 lang 类型，前端获取会丢失精度。</li><li>创建了控制器文件夹，用来放与后端交互的接口(也不知道也没用)。</li><li>用 promise 封装了常用的请求方法，做了统一错误处理，后台异常处理。</li></ol><h3 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h3><ol><li>发现有很多表单页面相似，于是封装了一个表单页面组件，通过给组件传入页面元素配置和验证规则实现复用。</li><li>创建测试页面通过按钮的方式来测试后端接口是否有问题。</li><li>移动端分页</li></ol><h3 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h3><ol><li>图片上传踩坑：刚开始：因为不能使用原生，通过查文档使用 wx.chooseImage 选择图片获取临时路径、把临时路径作为一个请求的 url，把数据返回格式设置成 arraybuffer 可以拿到图片 base64 格式提交给后端，这个方法在微信模拟器没什么问题，在真机上就会报错了。解决方案：wx.chooseImage 选择图片获取临时路径，readFile()读取文件获取 base64 格式编码。</li><li>支付接口踩坑：刚开始：通过 wx.login()拿到 code，在访问腾讯地址拿到 openid，然后传给后端拿到掉支付接口需要的字段，最后掉起接口 wx.requestPayment()弹出微信支付界面，通过回调判断支付是否成功给后端反馈，这个方法有一个步骤出问题了，在微信开发工具中开启忽略验证不会有问题，上线了就会访问不了腾讯地址获取 openid，因为腾讯默认这个地址不合法。解决方案：获取 oppenid 这一步放到后端实现就可以解决。</li></ol><h2 id="需要改进的地方"><a href="#需要改进的地方" class="headerlink" title="需要改进的地方"></a>需要改进的地方</h2><h3 id="关于错误处理"><a href="#关于错误处理" class="headerlink" title="关于错误处理"></a>关于错误处理</h3><ol><li>后端返回错误码和提示信息统一处理（已有，通过弹窗形式提示错误信息），应该换种形式来区分前端写的提示信息。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次小程序开发。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="总结" scheme="https://shawdanon.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>阅读</title>
    <link href="https://shawdanon.github.io/arrangement/read/"/>
    <id>https://shawdanon.github.io/arrangement/read/</id>
    <published>2018-09-12T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.296Z</updated>
    
    <content type="html"><![CDATA[<p>记录我的阅读,欢迎小伙伴来交换电子书…</p><a id="more"></a><h2 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h2><h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><p>1、《高难度谈话》<br>2、《聪明的投资者》<br>3、《创新者》<br>4、《经济学通识课》<br>5、《奇特的一生》<br>6、《学会提问—批判性思维指南》<br>7、《人性的弱点》<br>8、《少有人走的路》<br>9、《社会心理学（第 8 版）》<br>10、《影响力》<br>11、《谈谈方法》<br>12、《黑客与画家》<br>13、《如何阅读一本书》<br>14、《拖延心理学》<br>15、《浪潮之巅》<br>16、《创业维艰》</p><h3 id="巴菲特推荐的书"><a href="#巴菲特推荐的书" class="headerlink" title="巴菲特推荐的书"></a>巴菲特推荐的书</h3><p>1、《聪明的投资者》——格雷厄姆著<br>2、《怎样选择成长股》——费舍尔著<br>3、《证券分析》——格雷厄姆 多德著<br>4、《杰克·韦尔奇自传》——本杰明·格雷厄姆<br>5、《学以致富》——彼得·林奇著<br>6、《赢》——杰克·韦尔奇著<br>7、《穷光蛋查理年鉴》（富兰克林著）<br>8、《探索智慧:从达尔文到芒格》——Reter Bevelin 著<br>9、《客户的游艇在哪里》——Fred Schweb 著<br>10、《巴菲特致股东的信：股份公司教程》</p><h2 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h2><h3 id="2019-年"><a href="#2019-年" class="headerlink" title="2019 年"></a>2019 年</h3><p>1、《学习 JavaScript 数据结构与算法》<br>2、《前端面试指南》<br>3、《富爸爸 财务自由之路》</p><h3 id="2018-年"><a href="#2018-年" class="headerlink" title="2018 年"></a>2018 年</h3><p>1、《非暴力沟通》<br>2、《人类简史》<br>3、《JavaScript 高级程序设计》(第三版)<br>4、《谈话的力量》<br>5、《穷爸爸富爸爸》<br>6、《小狗钱钱》<br>7、《番茄工作法》<br>8、《工作五年，决定你一生的财富》<br>9、《CSS 权威指南》(第三版)<br>10、《ECMAScript 6 入门》<br>11、《高效能人士的七个习惯》<br>12、《图解 HTTP》<br>13、《Node.js 高级编程》</p><h3 id="2017-年"><a href="#2017-年" class="headerlink" title="2017 年"></a>2017 年</h3><p>1、《Web 全栈工程师的自我修养》<br>2、《腾讯传》<br>3、《从零到一》<br>4、《羊皮卷》<br>5、《平凡的世界》<br>6、《只是为了好玩：Linux 之父林纳斯自传》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录我的阅读,欢迎小伙伴来交换电子书…&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://shawdanon.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="整理" scheme="https://shawdanon.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>VSCode</title>
    <link href="https://shawdanon.github.io/2018/VSCode/"/>
    <id>https://shawdanon.github.io/2018/VSCode/</id>
    <published>2018-08-11T16:00:00.000Z</published>
    <updated>2019-07-28T07:12:19.390Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事必先利其器…</p><a id="more"></a><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><p>Add jsdoc comments(快速添加 jsdoc 插件)<br>Atom One Dark Theme(Atom 颜色主题)<br>Bracket Pair Colorizer(每一对括号用不同颜色区别)<br>Chinese (Simplified) Language Pack for Visual Studio Code(简体中文)<br>cssrem(px 转 rem)<br>Debugger for Chrome(在编辑器里面 debug)<br>Easy LESS（less 文件转 css）<br>ES7 React/Redux/GraphQL/React-Native snippets（react 常用代码片段）<br>ESLint(代码检查)<br>Git History(图形化 git 历史记录)<br>GitLens — Git supercharged(git 管理利器)<br>HTML CSS Support(HTML 中 CSS 智能提示)<br>Markdown All in One(Markdown 快捷输入)<br>markdownlint(Markdown 检查)<br>open in browser(通过浏览器运行 HTML)<br>Path Intellisense(路径智能提示)<br>Power Mode（输入代码很酷炫的效果）<br>Prettier - Code formatter(代码格式化)<br>Settings Sync(多台电脑同步配置)<br>Sublime Text Keymap and Settings Importer(sublime 键位设置)<br>Vetur(vue 提示扩展)<br>vscode-icons(图标主题)</p><h2 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h2><h3 id="Commonly-Used-常用"><a href="#Commonly-Used-常用" class="headerlink" title="Commonly Used(常用)"></a>Commonly Used(常用)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">"editor.fontSize": 13, //以像素为单位控制字号</span><br><span class="line">"editor.fontFamily": "Consolas", //控制字体系列</span><br><span class="line">"editor.tabSize": 2, //一个制表符等于的空格数</span><br><span class="line">"editor.renderWhitespace": "none",//控制编辑器在空白字符上显示特殊符号的方式。</span><br><span class="line">"editor.multiCursorModifier": "ctrlCmd", //在通过鼠标添加多个光标时使用的修改键。</span><br><span class="line">"files.exclude": &#123;</span><br><span class="line">"**/.idea": true,</span><br><span class="line">"**/yarn.lock": true,</span><br><span class="line">"**/tmp": true</span><br><span class="line">&#125;, //配置 glob 模式以在搜索中排除文件和文件夹。例如，文件资源管理器根据此设置决定文件或文件夹的显示和隐藏。</span><br><span class="line">"files.associations": &#123;</span><br><span class="line">"_.vue": "vue",</span><br><span class="line">"_.wxss": "css"</span><br><span class="line">&#125;, //配置语言的文件关联(如: "*.extension": "html")。这些关联的优先级高于已安装语言的默认关联。</span><br></pre></td></tr></table></figure><h3 id="整个配置"><a href="#整个配置" class="headerlink" title="整个配置"></a>整个配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  /*编辑器*/</span><br><span class="line">  //每行字数 防止&#123;&#125; []换行</span><br><span class="line">  "editor.cursorBlinking": "smooth",</span><br><span class="line">  //控制字体系列</span><br><span class="line">  // "editor.fontFamily": "Consolas",</span><br><span class="line">  //以像素为单位控制字号</span><br><span class="line">  "editor.fontSize": 15,</span><br><span class="line">  //控制编辑器是否应自动设置粘贴内容的格式。</span><br><span class="line">  "editor.formatOnPaste": true,</span><br><span class="line">  //保存时设置文件的格式。格式化程序必须可用，不能自动保存文件，并且不能关闭编辑器。</span><br><span class="line">  "editor.formatOnSave": true,</span><br><span class="line">  //控制行高。使用 0 通过字号计算行高。</span><br><span class="line">  "editor.lineHeight": 25,</span><br><span class="line">  //控制是否显示 minimap</span><br><span class="line">  "editor.minimap.enabled": false,</span><br><span class="line">  //在通过鼠标添加多个光标时使用的修改键。</span><br><span class="line">  "editor.multiCursorModifier": "ctrlCmd",</span><br><span class="line">  //控制编辑器应如何呈现当前行突出显示，可能为“无”、“装订线”、“线”和“全部”。</span><br><span class="line">  "editor.renderLineHighlight": "none",</span><br><span class="line">  //控制编辑器在空白字符上显示特殊符号的方式。</span><br><span class="line">  "editor.renderWhitespace": "none",</span><br><span class="line">  //控制是否将代码段与其他建议一起显示以及它们的排序方式。</span><br><span class="line">  "editor.snippetSuggestions": "top",</span><br><span class="line">  //一个制表符等于的空格数</span><br><span class="line">  "editor.tabSize": 2,</span><br><span class="line">  //在未能恢复上一会话信息的情况下，控制启动时显示的编辑器。</span><br><span class="line">  "workbench.startupEditor": "newUntitledFile",</span><br><span class="line">  /*窗口*/</span><br><span class="line">  //调整窗口的缩放级别。原始大小是 0，每次递增(例如 1)或递减(例如 -1)表示放大或缩小 20%。也可以输入小数以便以更精细的粒度调整缩放级别。</span><br><span class="line">  "window.zoomLevel": 2,</span><br><span class="line">  /*文件*/</span><br><span class="line">  //配置语言的文件关联(如: "*.extension": "html")。这些关联的优先级高于已安装语言的默认关联。</span><br><span class="line">  "files.associations": &#123;</span><br><span class="line">    "_.vue": "vue",</span><br><span class="line">    "_.wxss": "css"</span><br><span class="line">  &#125;,</span><br><span class="line">  //配置 glob 模式以在搜索中排除文件和文件夹。例如，文件资源管理器根据此设置决定文件或文件夹的显示和隐藏。</span><br><span class="line">  "files.exclude": &#123;</span><br><span class="line">    "**/.idea": true,</span><br><span class="line">    "**/yarn.lock": true,</span><br><span class="line">    "**/tmp": true</span><br><span class="line">  &#125;,</span><br><span class="line">  //保存裁剪空格</span><br><span class="line">  "files.trimTrailingWhitespace": true,</span><br><span class="line">  /*搜索*/</span><br><span class="line">  //配置 glob 模式以在搜索中排除文件和文件夹。</span><br><span class="line">  "search.exclude": &#123;</span><br><span class="line">    "**/dist": true,</span><br><span class="line">    "**/build": true,</span><br><span class="line">    "**/elehukouben": true,</span><br><span class="line">    "**/.git": true,</span><br><span class="line">    "**/.gitignore": true,</span><br><span class="line">    "**/.svn": true,</span><br><span class="line">    "**/.DS_Store": true,</span><br><span class="line">    "**/.idea": true,</span><br><span class="line">    "**/.vscode": false,</span><br><span class="line">    "**/yarn.lock": true,</span><br><span class="line">    "**/tmp": true</span><br><span class="line">  &#125;,</span><br><span class="line">  /*HTML*/</span><br><span class="line">  //配置内置 HTML 语言支持是否建议 Angular V1 标记和属性。</span><br><span class="line">  "html.suggest.angular1": false,</span><br><span class="line">  //配置内置 HTML 语言支持是否建议 Ionic 标记、属性和值。</span><br><span class="line">  "html.suggest.ionic": false,</span><br><span class="line">  /*TypeScript*/</span><br><span class="line">  //在 VS Code 中重命名或移动文件时启用或禁用自动更新 import 语句的路径。</span><br><span class="line">  "javascript.updateImportsOnFileMove.enabled": "always",</span><br><span class="line">  /*集成终端*/</span><br><span class="line">  //控制终端的行高，此数字乘上终端字号得到实际行高(以像素为单位)。</span><br><span class="line">  "terminal.integrated.lineHeight": 1.8,</span><br><span class="line">  /*ESLint*/</span><br><span class="line">  //文件保存时，是否自动根据 eslint 进行格式化</span><br><span class="line">  "eslint.autoFixOnSave": false,</span><br><span class="line">  // 是否开启 eslint 检测</span><br><span class="line">  "eslint.enable": false,</span><br><span class="line">  //eslint 能够识别的文件后缀类型</span><br><span class="line">  "eslint.validate": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"javascript"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"javascriptreact"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"typescript"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"typescriptreact"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  /*Gitlens Configuration*/</span><br><span class="line">  //细节,配置 gitlen 中 git 提交历史记录的信息显示情况</span><br><span class="line">  "gitlens.advanced.messages": &#123;</span><br><span class="line">    "suppressShowKeyBindingsNotice": true,</span><br><span class="line">    "suppressUpdateNotice": true</span><br><span class="line">  &#125;,</span><br><span class="line">  //开启 eslint 规则</span><br><span class="line">  // prettier 进行格式化时是否安装 eslint 配置去执行，建议 false</span><br><span class="line">  "prettier.eslintIntegration": true,</span><br><span class="line">  //如果为真，则将多行JSX元素的“&gt;”放在最后一行的末尾，而不是单独在下一行上。</span><br><span class="line">  "prettier.jsxBracketSameLine": true,</span><br><span class="line">  //在该行限制中拟合代码</span><br><span class="line">  "prettier.printWidth": 200,</span><br><span class="line">  //启用单引号</span><br><span class="line">  "prettier.singleQuote": true,</span><br><span class="line">  /*代码同步配置*/</span><br><span class="line">  "sync.askGistName": false,</span><br><span class="line">  "sync.autoDownload": false,</span><br><span class="line">  "sync.autoUpload": false,</span><br><span class="line">  "sync.forceDownload": false,</span><br><span class="line">  "sync.gist": "710bcbf7c3f171d47d3b23e2030d469e",</span><br><span class="line">  "sync.quietSync": false,</span><br><span class="line">  "sync.removeExtensions": true,</span><br><span class="line">  "sync.syncExtensions": true,</span><br><span class="line">  "sync.host": "",</span><br><span class="line">  "sync.pathPrefix": "",</span><br><span class="line">  "sync.lastUpload": "",</span><br><span class="line">  "sync.lastDownload": "2018-08-17T02:21:37.318Z",</span><br><span class="line">  /*Git*/</span><br><span class="line">  //是否启用自动拉取</span><br><span class="line">  "git.autofetch": true,</span><br><span class="line">  //在没有暂存的更改时提交所有更改。</span><br><span class="line">  "git.enableSmartCommit": true,</span><br><span class="line">  /*Emmet*/</span><br><span class="line">  //在默认不支持 Emmet 的语言中启用 Emmet 缩写功能。</span><br><span class="line">  "emmet.includeLanguages": &#123;</span><br><span class="line">    "jsx-sublime-babel-tags": "javascriptreact",</span><br><span class="line">    "javascript": "javascriptreact"</span><br><span class="line">  &#125;,</span><br><span class="line">  //为指定的语法定义配置文件或使用带有特定规则的配置文件。</span><br><span class="line">  "emmet.syntaxProfiles": &#123;</span><br><span class="line">    "vue-html": "html",</span><br><span class="line">    "vue": "html",</span><br><span class="line">    "javascript": "javascriptreact",</span><br><span class="line">    // xml 类型文件默认都是单引号，开启对非单引号的 emmet 识别</span><br><span class="line">    "xml": &#123;</span><br><span class="line">      "attr_quotes": "single"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //启用后，按下 TAB 键，将展开 Emmet 缩写。</span><br><span class="line">  "emmet.triggerExpansionOnTab": true,</span><br><span class="line">  /*power效果插件*/</span><br><span class="line">  //是否启用power插件效果</span><br><span class="line">  "powermode.enabled": false,</span><br><span class="line">  /*vetur插件*/</span><br><span class="line">  //设置vue文件js格式化</span><br><span class="line">  "vetur.format.defaultFormatter.js": "vscode-typescript",</span><br><span class="line">  //设置vue文件html格式化</span><br><span class="line">  "vetur.format.defaultFormatter.html": "js-beautify-html",</span><br><span class="line">  /*插件Easy LESS*/</span><br><span class="line">  "less.compile": &#123;</span><br><span class="line">    // true =&gt; 删除多余空白</span><br><span class="line">    "compress": true,</span><br><span class="line">    // true =&gt; 生成源映射（.CS.MAP文件）</span><br><span class="line">    "sourceMap": true,</span><br><span class="line">    // false =&gt; 不要输出.CSS文件（每个文件可重写，见下文）</span><br><span class="line">    "out": false</span><br><span class="line">  &#125;,</span><br><span class="line">  "workbench.iconTheme": "vscode-icons"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将按键绑定配置放入此文件中即可覆盖默认值</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'ctrl+f1'</span>,</span><br><span class="line">    command: <span class="string">'extension.openInBrowser'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+b'</span>,</span><br><span class="line">    command: <span class="string">'-extension.openInBrowser'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+t'</span>,</span><br><span class="line">    command: <span class="string">'toggleFindInSelection'</span>,</span><br><span class="line">    when: <span class="string">'editorFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+l'</span>,</span><br><span class="line">    command: <span class="string">'-toggleFindInSelection'</span>,</span><br><span class="line">    when: <span class="string">'editorFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*方向键和选择提示键位*/</span></span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+j'</span>,</span><br><span class="line">    command: <span class="string">'cursorLeft'</span>,</span><br><span class="line">    when: <span class="string">'textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'left'</span>,</span><br><span class="line">    command: <span class="string">'-cursorLeft'</span>,</span><br><span class="line">    when: <span class="string">'textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+i'</span>,</span><br><span class="line">    command: <span class="string">'cursorUp'</span>,</span><br><span class="line">    when: <span class="string">'textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'up'</span>,</span><br><span class="line">    command: <span class="string">'-cursorUp'</span>,</span><br><span class="line">    when: <span class="string">'textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+k'</span>,</span><br><span class="line">    command: <span class="string">'cursorDown'</span>,</span><br><span class="line">    when: <span class="string">'textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'down'</span>,</span><br><span class="line">    command: <span class="string">'-cursorDown'</span>,</span><br><span class="line">    when: <span class="string">'textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+l'</span>,</span><br><span class="line">    command: <span class="string">'cursorRight'</span>,</span><br><span class="line">    when: <span class="string">'textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'right'</span>,</span><br><span class="line">    command: <span class="string">'-cursorRight'</span>,</span><br><span class="line">    when: <span class="string">'textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+i'</span>,</span><br><span class="line">    command: <span class="string">'selectPrevSuggestion'</span>,</span><br><span class="line">    when: <span class="string">'suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'up'</span>,</span><br><span class="line">    command: <span class="string">'-selectPrevSuggestion'</span>,</span><br><span class="line">    when: <span class="string">'suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'alt+k'</span>,</span><br><span class="line">    command: <span class="string">'selectNextSuggestion'</span>,</span><br><span class="line">    when: <span class="string">'suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    key: <span class="string">'down'</span>,</span><br><span class="line">    command: <span class="string">'-selectNextSuggestion'</span>,</span><br><span class="line">    when: <span class="string">'suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"head"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"head"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [<span class="string">"---"</span>, <span class="string">"title: '$1'"</span>, <span class="string">"category: $2"</span>, <span class="string">"tags: [$3]"</span>, <span class="string">"date: $4"</span>, <span class="string">"---"</span>],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"快速输入博客头部"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"log"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"log"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: <span class="string">"console.log($1)"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"warn"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"warn"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: <span class="string">"console.warn($&#123;1:'后端返回数据问题'&#125;);"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ims"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"ims"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: <span class="string">"import $&#123;1:styles&#125; from '$&#123;2:./index.less&#125;';"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dva"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"dva"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: <span class="string">"import &#123; connect &#125; from 'dva';"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dvac"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"dvac"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [<span class="string">"@connect((&#123; $&#123;1:sale&#125; &#125;) =&gt; (&#123;"</span>, <span class="string">"  $&#123;2:sale&#125;,"</span>, <span class="string">"&#125;))"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"menuSetting"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"menuSetting"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [<span class="string">"&#123;"</span>, <span class="string">"  path: '$&#123;1:/dashboard&#125;',"</span>, <span class="string">"  name: '$&#123;2:dashboard&#125;',"</span>, <span class="string">"  icon: '$&#123;3:dashboard&#125;',"</span>, <span class="string">"  routes: [$4],"</span>, <span class="string">"&#125;,"</span>],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"菜单"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善其事必先利其器…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="https://shawdanon.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>webpack总结</title>
    <link href="https://shawdanon.github.io/2018/webpack/"/>
    <id>https://shawdanon.github.io/2018/webpack/</id>
    <published>2018-07-31T16:00:00.000Z</published>
    <updated>2019-07-28T07:14:50.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本：4-16-3"><a href="#版本：4-16-3" class="headerlink" title="版本：4.16.3"></a>版本：4.16.3</h2><p>使用 webpack 所需要的包：webpack、webpack-cli（此工具用于在命令行中运行 webpack），webpack4 之后将 webpack-cli 从 webpack 中分离的出来。</p><h3 id="webpack-基本配置"><a href="#webpack-基本配置" class="headerlink" title="webpack 基本配置"></a>webpack 基本配置</h3><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">//导入node.js的path模块</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//导入自动生成HTML插件</span></span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>); <span class="comment">//导入清理文件夹插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *设置入口，用于设置打包的索引文件。</span></span><br><span class="line"><span class="comment">   *单入口用字符串，多入口用对象。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *设置出口，用于设置打包的位置和文件名。</span></span><br><span class="line"><span class="comment">   *filename表示打包后的文件名。</span></span><br><span class="line"><span class="comment">   *[name]表示入口属性名。</span></span><br><span class="line"><span class="comment">   *path表示打包后存放的路径。</span></span><br><span class="line"><span class="comment">   *path.resolve表示获取绝对位置。</span></span><br><span class="line"><span class="comment">   *__dirname表示当前执行脚本所在的目录。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *设置loader，用于对模块的源代码进行转换。</span></span><br><span class="line"><span class="comment">   *用于在 import 或"加载"模块时预处理文件。</span></span><br><span class="line"><span class="comment">   *loader对象放在module对象下的rules数组中。</span></span><br><span class="line"><span class="comment">   *loader对象的test表示匹配什么文件。</span></span><br><span class="line"><span class="comment">   *loader对象的use表示引用什么loader</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *设置插件，用于处理</span></span><br><span class="line"><span class="comment">   *添加插件需要先导入再实例化。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]), <span class="comment">//用于清理dist文件夹</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Output Management'</span></span><br><span class="line">    &#125;) <span class="comment">//用于自动生成HTML</span></span><br><span class="line">  ]</span><br><span class="line">&#125;; <span class="comment">//定义配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config; <span class="comment">//导出配置文件</span></span><br></pre></td></tr></table></figure><p>运行配置：<br>npx webpack –config webpack.config.js<br>在 package.js 中 script 设置，”build”:“webpack –config webpack.config.js”<br>PS：–config webpack.config.js 用于设置运行文件名，不设置默认运行 webpack.config.js</p><h3 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h3><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    print: <span class="string">'./src/print.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *用于追踪错误和警告在源代码中的原始位置。</span></span><br><span class="line"><span class="comment">   *不设置：显示打包后的代码。（用于生产环境）</span></span><br><span class="line"><span class="comment">   *inline-source-map：显示原始源代码。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="模块热替换"><a href="#模块热替换" class="headerlink" title="模块热替换"></a>模块热替换</h3><h4 id="webpack-设置方法"><a href="#webpack-设置方法" class="headerlink" title="webpack 设置方法"></a>webpack 设置方法</h4><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *设置webpack-dev-server，用于提供服务器。</span></span><br><span class="line"><span class="comment">   *contentBase用于设置服务器目录。</span></span><br><span class="line"><span class="comment">   *hot表示是否启用webpack的模块热替换特性。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(), <span class="comment">//当开启HMR的时候使用该插件会显示模块的相对路径。</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">//模块热替换插件。</span></span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行配置：<br>npx webpack-dev-server –open –config webpack.config.js<br>在 package.js 中 script 设置，”start”:“webpack-dev-server –open –config webpack.config.js”<br>PS：–config webpack.config.js 用于设置运行文件名，不设置默认运行 webpack.config.js</p><h4 id="node-设置方法"><a href="#node-设置方法" class="headerlink" title="node 设置方法"></a>node 设置方法</h4><p>dev-server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  host: <span class="string">'localhost'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">webpackDevServer.addDevServerEntrypoints(config, options);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> webpackDevServer(compiler, options);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">5000</span>, <span class="string">'localhost'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'dev server listening on port 5000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行配置：<br>node dev-server.js<br>在 package.js 中 script 设置，”start”:“node dev-server.js”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本：4-16-3&quot;&gt;&lt;a href=&quot;#版本：4-16-3&quot; class=&quot;headerlink&quot; title=&quot;版本：4.16.3&quot;&gt;&lt;/a&gt;版本：4.16.3&lt;/h2&gt;&lt;p&gt;使用 webpack 所需要的包：webpack、webpack-cli（此工具用于
      
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://shawdanon.github.io/2018/node/"/>
    <id>https://shawdanon.github.io/2018/node/</id>
    <published>2018-01-23T16:00:00.000Z</published>
    <updated>2019-07-28T07:11:40.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装（Windows）"><a href="#安装（Windows）" class="headerlink" title="安装（Windows）"></a>安装（Windows）</h2><p>先到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a>下载 msi 安装包,建议下载 LTS（长期支持）版本。如图 1：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-1.png" alt="图1" title>                </div>                <div class="image-caption">图1</div>            </figure><br>双击安装包，如图 2：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-2.png" alt="图2" title>                </div>                <div class="image-caption">图2</div>            </figure><br>点击 next，如图 3：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-3.png" alt="图3" title>                </div>                <div class="image-caption">图3</div>            </figure><br>勾选同意协议，点击 next，如图 4：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-4.png" alt="图4" title>                </div>                <div class="image-caption">图4</div>            </figure><br>选择安装路径，点击 next，如图 5：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-5.png" alt="图5" title>                </div>                <div class="image-caption">图5</div>            </figure><br>点击 next，如图 6：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-6.png" alt="图6" title>                </div>                <div class="image-caption">图6</div>            </figure><br>点击 install，如图 7：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-7.png" alt="图7" title>                </div>                <div class="image-caption">图7</div>            </figure><br>安装完成后，如图 8：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-8.png" alt="图8" title>                </div>                <div class="image-caption">图8</div>            </figure><br>为了验证是否安装成功，需要运行命令行来确认，使用 Windows+R 键打开运行界面，如图 9：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-9.png" alt="图9" title>                </div>                <div class="image-caption">图9</div>            </figure><br>输入 cmd，点击确定，出现命令行窗口，输入<code>node -v</code>出现版本号表示 node 安装成功，<code>npm -v</code>出现版本号表示 npm 安装成功。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-10.png" alt="图10" title>                </div>                <div class="image-caption">图10</div>            </figure><br>PS：由于 npm 的镜像源在国外，所以国内使用下载很慢，建议使用国内镜像安装快，操作步骤如下：<br>1、临时使用<br>打开命令行，输入<code>npm --registry https://registry.npm.taobao.org install package</code>，package 为需要安装的包名。<br>2、持久使用<br>打开命令行，输入<code>npm config set registry https://registry.npm.taobao.org</code>，更换 npm 镜像地址。可以通过输入命令<code>npm config get registry</code>来验证是否配置成功。成功如图 11：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-11.png" alt="图11" title>                </div>                <div class="image-caption">图11</div>            </figure><br>3、通过 cnpm 使用<br>打开命令行，输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，安装完成后通过命令<code>cnpm install package</code>安装包，package 为需要安装的包名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装（Windows）&quot;&gt;&lt;a href=&quot;#安装（Windows）&quot; class=&quot;headerlink&quot; title=&quot;安装（Windows）&quot;&gt;&lt;/a&gt;安装（Windows）&lt;/h2&gt;&lt;p&gt;先到&lt;a href=&quot;https://nodejs.org/en/&quot;
      
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli环境搭建</title>
    <link href="https://shawdanon.github.io/2018/vue-cli/"/>
    <id>https://shawdanon.github.io/2018/vue-cli/</id>
    <published>2018-01-23T16:00:00.000Z</published>
    <updated>2019-07-28T07:13:13.104Z</updated>
    
    <content type="html"><![CDATA[<p>vue-cli 环境搭建。</p><a id="more"></a><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><p>因为需要 npm 来装 vue-cli，所以需要先装 node，没有装的同学移步<a href="../node">node</a>进行安装。</p><h2 id="安装-vue"><a href="#安装-vue" class="headerlink" title="安装 vue"></a>安装 vue</h2><p>打开命令行输入<code>npm install -g vue-cli</code></p><h2 id="搭建-vue-cli-脚手架"><a href="#搭建-vue-cli-脚手架" class="headerlink" title="搭建 vue-cli 脚手架"></a>搭建 vue-cli 脚手架</h2><p>打开命令行输入<code>vue init webpack vue-test</code><br>vue-cli 的配置信息：<br><strong>Project name (vue-test)</strong>项目名称，可以自己指定，也可直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错 Sorry, name can no longer contain capital letters）。<br><strong>Project description (A Vue.js project)</strong>项目描述，也可直接点击回车，使用默认名字。<br><strong>Author</strong> 作者，同上。<br><strong>Vue build（Use arrow keys)</strong><br>1、<strong>Runtime + Compiler: recommended for most users</strong>运行+编译，推荐给大多数用户，点击回车选择。<br>2、<strong>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere</strong>仅运行时，已经选择第一个了。<br><strong>Install vue-router? (Y/n)</strong>是否安装 vue-router，这是官方的路由，大多数情况下都使用。这里就输入“y”后回车即可。<br><strong>Use ESLint to lint your code? (Y/n)</strong>是否使用 ESLint 管理代码，ESLint 是个代码风格管理工具，是用来统一代码风格的，并不会影响整体的运行，这也是为了多人协作，新手就不用了，一般项目中都会使用。<a href="https://eslint.org/" target="_blank" rel="noopener">ESLint 官网</a>，这里就输入“y””n”都可以。<br><strong>Pick an ESLint preset (Use arrow keys)</strong>选择一个 ESLint 预设，编写 vue 项目时的代码风格，因为我选择了使用 ESLint。<br>1、<strong><a href="https://github.com/feross/standard" target="_blank" rel="noopener">Standard</a></strong>标准，有些看不明白，什么标准呢，去给提示的 standardgithub 地址看一下， 原来时 js 的标准风格。<br>2、<strong><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">AirBNB</a></strong>JavaScript 最合理的方法，这个 github 地址说的是 JavaScript 最合理的方法。<br>3、<strong>none (configure it yourself)</strong>不选择。</p><p><strong>Set up unit tests? (Y/n)</strong>是否安装单元测试，我选择安装。<br><strong>Pick a test runner? (Use arrow keys)</strong>选择自动化测试工具。<br>1、<strong>Jest</strong>Facebook 开发的一个对 javascript 进行单元测试的工具。<br>2、<strong>karma and Mocha</strong>常用的自动化测试工具，我选它。<br>3、<strong>none(configure it yourself)</strong>不选择。<br><strong>Setup e2e tests with Nightwatch(Y/n)?</strong>是否安装 e2e 测试 ，我选择安装。<br><strong>Should we run <code>npm install</code> for you after the project has been created? (recommended) (Use arrow keys)</strong>选择用什么安装依赖包。<br>1、<strong>Yes, use NPM</strong>选择 npm 安装。<br>2、<strong>Yes, use Yarn</strong>选择 yarn 安装。<br>3、<strong>No, I will handle that myself</strong>暂时安装，自行安装。我选择这个。<br>基本框架搭建完成，进入 vue-test 目录，打开命令行，输入<code>npm install</code>开始安装所需要的依赖包。<br>装完后（所有依赖正常安装），输入命令<code>npm run dev</code>开始运行示例页面。默认访问 127.0.0.1:8080。示例如图 1：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../img/2018/1-25-12.png" alt="图1" title>                </div>                <div class="image-caption">图1</div>            </figure></p><p>下面来看看项目目录：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">├──</span> <span class="string">build/</span>                      <span class="comment"># webpack配置参数文件</span></span><br><span class="line"><span class="string">│</span>   <span class="string">└──</span> <span class="string">...</span></span><br><span class="line"><span class="string">├──</span> <span class="string">config/</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">index.js</span>                <span class="comment"># 主项目的配置</span></span><br><span class="line"><span class="string">│</span>   <span class="string">└──</span> <span class="string">...</span></span><br><span class="line"><span class="string">├──</span> <span class="string">src/</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">main.js</span>                 <span class="comment"># 应用入口</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">App.vue</span>                 <span class="comment"># 主应用组件</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">router/</span>                 <span class="comment"># 路由</span></span><br><span class="line"><span class="string">│</span>   <span class="string">│</span>   <span class="string">└──</span> <span class="string">index.js</span>            <span class="comment"># 路由配置文件</span></span><br><span class="line"><span class="string">│</span>   <span class="string">├──</span> <span class="string">components/</span>             <span class="comment"># UI组件</span></span><br><span class="line"><span class="string">│</span>   <span class="string">│</span>   <span class="string">└──</span> <span class="string">...</span></span><br><span class="line"><span class="string">│</span>   <span class="string">└──</span> <span class="string">assets/</span>                 <span class="comment"># 模块资源（webpack提供）</span></span><br><span class="line"><span class="string">│</span>       <span class="string">└──</span> <span class="string">...</span></span><br><span class="line"><span class="string">├──</span> <span class="string">static/</span>                     <span class="comment"># 纯静态资源（打包时直接复制）</span></span><br><span class="line"><span class="string">├──</span> <span class="string">test/</span></span><br><span class="line"><span class="string">│</span>   <span class="string">└──</span> <span class="string">unit/</span>                   <span class="comment"># 单元测试</span></span><br><span class="line"><span class="string">│</span>   <span class="string">└──</span> <span class="string">e2e/</span>                    <span class="comment"># e2e tests测试</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.babelrc</span>                    <span class="comment"># babel编译参数</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.editorconfig</span>               <span class="comment"># 编辑器配置</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.eslintignore</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.eslintrc.js</span>                <span class="comment"># eslint配置文件，用以规范团队开发编码规范</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.gitignore</span>                  <span class="comment"># github提交文件屏蔽的配置文件</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.postcssrc.js</span></span><br><span class="line"><span class="string">├──</span> <span class="string">index.html</span>                  <span class="comment"># 主页模板</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package.json</span>                <span class="comment"># 项目文件，记载着一些命令和依赖还有简要的项目描述信息</span></span><br><span class="line"><span class="string">└──</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue-cli 环境搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat安装</title>
    <link href="https://shawdanon.github.io/2018/Tomcat/"/>
    <id>https://shawdanon.github.io/2018/Tomcat/</id>
    <published>2018-01-04T16:00:00.000Z</published>
    <updated>2019-07-28T07:11:52.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载-Tomcat"><a href="#下载-Tomcat" class="headerlink" title="下载 Tomcat"></a>下载 Tomcat</h2><p>进入<a href="https://tomcat.apache.org" target="_blank" rel="noopener">Tomcat 官网</a>，下载对应你 jdk 版本的 Tomcat。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在系统环境变量中配置名字为 JAVA_HOME 路径为你的 jdk 路径，名字为 CATALINA_HOME 路径为你的 Tomcat 路径。如下示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=C:\Program Files (x86)\Java\jdk1.7.0_71</span><br><span class="line">CATALINA_HOME=C:\Program Files (x86)\Java\apache-tomcat-7.0.82</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>解压 Tomcat 安装包即可</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>将项目放置 webapps 目录里，在 bin 目录中运行 startup.bat 文件启动 Tomcat 服务器。运行 shutdown.bat 文件停止服务器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载-Tomcat&quot;&gt;&lt;a href=&quot;#下载-Tomcat&quot; class=&quot;headerlink&quot; title=&quot;下载 Tomcat&quot;&gt;&lt;/a&gt;下载 Tomcat&lt;/h2&gt;&lt;p&gt;进入&lt;a href=&quot;https://tomcat.apache.org&quot; targ
      
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="服务器" scheme="https://shawdanon.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>初探manjaor</title>
    <link href="https://shawdanon.github.io/2018/first-manjaor/"/>
    <id>https://shawdanon.github.io/2018/first-manjaor/</id>
    <published>2018-01-01T16:00:00.000Z</published>
    <updated>2019-07-28T07:10:37.670Z</updated>
    
    <content type="html"><![CDATA[<p>第一次使用 manjaor…</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在<a href="http://www.distrowatch.org/" target="_blank" rel="noopener">distrowatch</a>中发行版排行第一的 Linux,兼顾性能和易用的版本,抱着这样的心情我开始使用它.首先下载的官方推荐的 XFCE 版,不习惯这个桌面,之后下载了社区版的 Deepin 桌面.<br>桌面选好就开始装软件,刚开始搜索到的都是通过命令<code>pacman</code>安装,配置许久就是不成功,说好的易用呢?就这样折腾了几次.趁着国庆假期长,再来折腾一下,让我找到了 manjaor 的正确使用姿势.</p><h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><p>1 打开软件包管理器<br>2 搜索 fcitx-im 会出现六个包(fcitx 配置|fcitx|fcitx-gtk2|fcitx-gtk3|fcitx-qt4|fcitx-qt5),勾起全部,点击应用即可安装.<br>3 搜索 fcitx-configtool 会出现三个包(fcitx 配置|fcitx|fcitx-configtool),由于前两个装过了,只需要装第三包即可.<br>4 搜索 fcitx 可以看到很多包,我们装一个谷歌拼音 fcitx-googlepinyin.<br>5 配置.xprofile 文件,在~目录中找到.xprofile 文件,没有的话就创建一个,文件中写入以下内容并保存,然后重启就可以使用中文输入法了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="keyword">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="keyword">export</span> XMODIFIERS=<span class="string">"@im=fcitx</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次使用 manjaor…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库" scheme="https://shawdanon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL安装</title>
    <link href="https://shawdanon.github.io/2018/mySQL/"/>
    <id>https://shawdanon.github.io/2018/mySQL/</id>
    <published>2018-01-01T16:00:00.000Z</published>
    <updated>2019-07-28T07:11:24.981Z</updated>
    
    <content type="html"><![CDATA[<p>mysql 安装总结…</p><a id="more"></a><h2 id="下载-MySQL"><a href="#下载-MySQL" class="headerlink" title="下载 MySQL"></a>下载 MySQL</h2><p>打开<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL 社区版官方下载</a>下载 Windows (x86, 32-bit/64-bit), ZIP Archive 安装包。32 位 64 位根据电脑选。我目前的版本是 5.7.20。</p><h2 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h2><p>下载并复制到 mysql 里的 bin 目录下。<br>解压安装包，在安装包目录创建一个 data 空文件夹和创建一个 my.ini 文件，文件内容如下。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 设置mysql客户端默认字符集</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;设置3306端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 设置mysql的安装目录(需要改动成你的目录)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">basedir</span>=C:\Users\Administrator\Desktop\java\mysql-<span class="number">5.7</span>.<span class="number">20</span>-winx64</span><br><span class="line"></span><br><span class="line"><span class="comment">; 设置mysql数据库的数据的存放目录(需要改动成你的目录)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">datadir</span>=C:\Users\Administrator\Desktop\java\mysql-<span class="number">5.7</span>.<span class="number">20</span>-winx64\data</span><br><span class="line"></span><br><span class="line"><span class="comment">; 允许最大连接数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">; 创建新表时将使用的默认存储引擎</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure><p>1、安装 MySQL 服务<br>打开命令行，进入 MySQL 的 bin 目录。<br>2、安装 Windows 服务<br>输入<code>mysqld install</code>，出现<code>The service already exists</code>则安装成功。<br>3、初始化 data 目录<br>输入<code>mysqld --initialize-insecure --user=mysql</code>，不报错则初始化成功。<br>PS:使用-initialize 生成随机密码，使用-initialize-insecure 生成空密码。默认帐号 root,后面的-user=mysql 不更改<br>4、启动 MySQL 服务<br>输入<code>net start mysql</code>，出现<code>MySQL 服务启动成功</code>则启动服务成功。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>1、打开环境变量设置：<br>在我的电脑上右键-&gt;点击属性-&gt;点击高级系统设置-&gt;点击环境变量<br>复制你 mysql 文件路径，在系统变量里找到 Path 变量，点击编辑，光标移动到最前面，粘贴，加上;即可。</p><h2 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h2><p>打开命令行。<br>输入<code>mysql -uroot -p</code>，输入密码，出现<code>mysql&gt;</code>则成功登录。</p><h2 id="修改密码（忘记密码）"><a href="#修改密码（忘记密码）" class="headerlink" title="修改密码（忘记密码）"></a>修改密码（忘记密码）</h2><p>my.ini 配置文件[mysqld]条目下加一条命令 skip-grant-tables,然后重启 mysql 服务。<br>1、进入 MySQL 数据库：<br>打开命令行。<br>输入<code>mysql -uroot -p</code>，出现<code>mysql&gt;</code>则成功进入。<br>2、准备修改密码：<br>输入<code>mysql&gt; use mysql;</code>，出现<code>Database changed</code>则准备成功。<br>3、给 root 用户重置密码：<br>输入<code>mysql&gt; update user set authentication_string=password(&quot;新密码&quot;) where user=&quot;root&quot;;</code>，出现<code>Query OK,1 rows affected(0.01sec)Rows matched:1 Changed:1Warnings: 0</code>则修改成功。<br>4、刷新数据库：<br>输入<code>mysql&gt; flush privileges;</code>，出现<code>QueryOK, 0 rows affected (0.00 sec)</code>则刷新成功。<br>5、退出数据库：<br>输入<code>mysql&gt; quit</code>退出数据库。<br>注释掉 my.ini 里的 skip-grant-tables。<br>完成上面 5 步则成功修改密码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql 安装总结…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库" scheme="https://shawdanon.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>2017总结</title>
    <link href="https://shawdanon.github.io/2017/summary/"/>
    <id>https://shawdanon.github.io/2017/summary/</id>
    <published>2017-12-30T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.294Z</updated>
    
    <content type="html"><![CDATA[<p>总结 2017，希望 2018 加油…</p><a id="more"></a><p>今天是 2017 的最后一天，已经毕业一年半了。<br>大事件：<br>1、换了工作，从外包公司到了研发公司。<br>今年收获：<br>1、喜欢上了阅读，并养成了阅读的习惯。<br>2、写博客次数变多了，在写作过程中加强了表达能力。<br>3、坚持使用 github，并有一个项目超过 10 颗星。<br>4、巩固了 Web 开发基础：闭包、原型链、http 请求等。粗略学习了 react、node.js、npm、ECharts。了解了 webpack、gulp、grount、ES6、typescript。<br>5、熟悉了前后端通过 ajax 协作开发。<br>明年愿景：<br>1、坚持阅读、写作、运动。<br>2、学习更多知识，构建自己的知识体系。<br>3、到处走走看看，体验不同地域的文化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结 2017，希望 2018 加油…&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://shawdanon.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://shawdanon.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>git安装</title>
    <link href="https://shawdanon.github.io/2017/git-install/"/>
    <id>https://shawdanon.github.io/2017/git-install/</id>
    <published>2017-12-17T16:00:00.000Z</published>
    <updated>2019-07-28T07:16:39.666Z</updated>
    
    <content type="html"><![CDATA[<p>git 安装…</p><a id="more"></a><h2 id="windwos-版"><a href="#windwos-版" class="headerlink" title="windwos 版"></a>windwos 版</h2><p>打开<a href="https://git-scm.com/" target="_blank" rel="noopener">git 官网</a>下载最新版的 git，如下图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/assets/img/2017/12-18-1.png" alt="git下载示例" title>                </div>                <div class="image-caption">git下载示例</div>            </figure><br>下载完成后一直点下一步即可完成安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 安装…&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://shawdanon.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="版本控制" scheme="https://shawdanon.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>搬入hexo</title>
    <link href="https://shawdanon.github.io/2017/move-hexo/"/>
    <id>https://shawdanon.github.io/2017/move-hexo/</id>
    <published>2017-12-12T16:00:00.000Z</published>
    <updated>2019-07-28T07:16:39.666Z</updated>
    
    <content type="html"><![CDATA[<p>由于用 node 比较多，所以想试试基于 node 的 hexo…</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>搭建 hexo 前需要先装 node。打开<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js 官网</a>下载 LTS 版本即可。Windows 安装直接双击 msi 文件，一直下一步即可完成安装。</p><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>打开命令行，输入<code>npm install hexo-cli -g</code>。</p><h2 id="建立你的博客"><a href="#建立你的博客" class="headerlink" title="建立你的博客"></a>建立你的博客</h2><p>打开命令行，输入<code>hexo init blog</code>。然后就会在当前目录创建一个名为 blog 的文件夹，这个就是你的博客文件了。</p><h2 id="运行你的博客"><a href="#运行你的博客" class="headerlink" title="运行你的博客"></a>运行你的博客</h2><p>进入你的博客目录，打开命令行，输入<code>hexo server</code>。你就可以在<code>http://127.0.0.1:4000/</code>访问你的博客了。</p><h2 id="GitHub-部署博客"><a href="#GitHub-部署博客" class="headerlink" title="GitHub 部署博客"></a>GitHub 部署博客</h2><p>新建仓库<br>打开_config.yml,进行基础配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/......</span> <span class="string">仓库地址</span></span><br></pre></td></tr></table></figure><p>安装 hexo-deployer-git 自动部署发布工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git  --save</span><br></pre></td></tr></table></figure><p>发布到 Github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于用 node 比较多，所以想试试基于 node 的 hexo…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="博客搭建" scheme="https://shawdanon.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="https://shawdanon.github.io/2017/npm/"/>
    <id>https://shawdanon.github.io/2017/npm/</id>
    <published>2017-12-11T16:00:00.000Z</published>
    <updated>2019-07-28T07:16:39.666Z</updated>
    
    <content type="html"><![CDATA[<p>npm 常用命令…</p><a id="more"></a><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="npm-install-安装模块"><a href="#npm-install-安装模块" class="headerlink" title="npm install 安装模块"></a>npm install 安装模块</h3><p>安装模块分全局安装和本地安装。全局安装是安装在 npm 默认目录，在这个电脑上的项目都可以使用全局安装的模块；本地安装是将模块安装在当前目录中，这些模块只能供当前目录的项目使用。<br>本地安装模块（moduleName 是模块名字）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install moduleName</span><br></pre></td></tr></table></figure><p>全局安装模块（moduleName 是模块名字）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g moduleName</span><br></pre></td></tr></table></figure><h3 id="npm-uninstall-卸载模块"><a href="#npm-uninstall-卸载模块" class="headerlink" title="npm uninstall 卸载模块"></a>npm uninstall 卸载模块</h3><p>卸载模块（moduleName 是模块名字）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall moduleName</span><br></pre></td></tr></table></figure><h3 id="npm-update-更新模块"><a href="#npm-update-更新模块" class="headerlink" title="npm update 更新模块"></a>npm update 更新模块</h3><p>更新模块（moduleName 是模块名字）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update moduleName</span><br></pre></td></tr></table></figure><h3 id="npm-ls-查看安装的模块"><a href="#npm-ls-查看安装的模块" class="headerlink" title="npm ls 查看安装的模块"></a>npm ls 查看安装的模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls --depth=0 //查看模块的第一个文件夹名</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;npm 常用命令…&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://shawdanon.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="包管理器" scheme="https://shawdanon.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>前端问题</title>
    <link href="https://shawdanon.github.io/arrangement/front-end-problem/"/>
    <id>https://shawdanon.github.io/arrangement/front-end-problem/</id>
    <published>2017-09-21T16:00:00.000Z</published>
    <updated>2019-07-28T07:19:20.171Z</updated>
    
    <content type="html"><![CDATA[<p>前端遇到的一些问题汇总…</p><a id="more"></a><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="跨页面传值问题"><a href="#跨页面传值问题" class="headerlink" title="跨页面传值问题"></a>跨页面传值问题</h3><h4 id="一、地址栏传值方式"><a href="#一、地址栏传值方式" class="headerlink" title="一、地址栏传值方式"></a>一、地址栏传值方式</h4><p>原理是把参数放入跳转页面的 url 里，跳转页面后读取当前页面的 url 就可以获得上一个页面传过来的参数。<br>下面代码是通过 JS 跳转到 <a href="http://www.tangxiaoping.top/search" target="_blank" rel="noopener">www.tangxiaoping.top/search</a> 页面，传入<code>?a=1&amp;b=1</code>字符串。通常我们使用<code>?</code>来隔断 url 和需要传入的字符串，用<code>&amp;</code>隔断不同的参数，用<code>=</code>隔断参数和参数对应的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'https://www.tangxiaoping.top/search?a=1&amp;b=1'</span>;</span><br></pre></td></tr></table></figure><p>那么跳转完页面我们就需要获取我们需要的参数了。通过下面的方法获得带有参数的对象，通过对象获取我们需要的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = parseURL(location.href); <span class="comment">//调用解析url方法，传入参数为url，将返回值赋值给obj</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = url.split(<span class="string">'?'</span>)[<span class="number">1</span>]; <span class="comment">//获取?后面的字符串</span></span><br><span class="line">  <span class="keyword">var</span> strArr = str.split(<span class="string">'&amp;'</span>); <span class="comment">//通过&amp;符号把str分割成字符串数组</span></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//定义一个对象</span></span><br><span class="line">  <span class="keyword">var</span> arr = []; <span class="comment">//定义一个数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">    arr = strArr[i].split(<span class="string">'='</span>); <span class="comment">//通过=符号把strArr分割成字符串数组</span></span><br><span class="line">    obj[arr[<span class="number">0</span>]] = arr[<span class="number">1</span>]; <span class="comment">//把=左边的字符串设为obj属性，把=右边的字符串设为值</span></span><br><span class="line">  &#125; <span class="comment">//将strArr遍历一遍</span></span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">//返回一个对象（包括我们需要的参数和值）</span></span><br><span class="line">&#125; <span class="comment">//解析url的方法</span></span><br></pre></td></tr></table></figure><h4 id="二、session"><a href="#二、session" class="headerlink" title="二、session"></a>二、session</h4><h4 id="三、Cookies"><a href="#三、Cookies" class="headerlink" title="三、Cookies"></a>三、Cookies</h4><h4 id="四、Application"><a href="#四、Application" class="headerlink" title="四、Application"></a>四、Application</h4><h3 id="在-js-中引入其他-js"><a href="#在-js-中引入其他-js" class="headerlink" title="在 js 中引入其他 js"></a>在 js 中引入其他 js</h3><p>使用场景：多个页面需要引入多个相同的 js 时、多个页面引入 js 的 src 需要频繁更改时<br>一、如下代码所示，在公共 js 中使用 document.write 来同步引入其他 js。<br>index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="common.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>common.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;script src=''&gt;&lt;/script&gt;"</span>); <span class="comment">//src自行填写</span></span><br></pre></td></tr></table></figure><p>二、如下代码所示，通过 appendChild 异步引入其他 js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); <span class="comment">//创建标签元素</span></span><br><span class="line">js.src = <span class="string">''</span>; <span class="comment">//给标签src赋值，src自行填写</span></span><br><span class="line"><span class="built_in">document</span>.head.appendChild(js); <span class="comment">//将标签动态加入head里</span></span><br></pre></td></tr></table></figure><h3 id="ready-用法"><a href="#ready-用法" class="headerlink" title="ready()用法"></a>ready()用法</h3><p>当 DOM（文档对象模型） 已经加载，并且页面（包括图像）已经完全呈现时，会发生 ready 事件。<br>由于该事件在文档就绪后发生，因此把所有其他的 jQuery 事件和函数置于该事件中是非常好的做法。正如上面的例子中那样。<br>ready() 函数规定当 ready 事件发生时执行的代码。<br>ready() 函数仅能用于当前文档，因此无需选择器。<br>允许使用以下三种语法：<br>语法 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure><p>语法 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$().ready(<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure><p>语法 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript-刷新页面"><a href="#JavaScript-刷新页面" class="headerlink" title="JavaScript 刷新页面"></a>JavaScript 刷新页面</h3><p><code>location.reload()</code></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="NPM-报错：Unexpected-end-of-JSON-input-while-parsing-near-‘…”-”0-5-x”-”raw-loader’"><a href="#NPM-报错：Unexpected-end-of-JSON-input-while-parsing-near-‘…”-”0-5-x”-”raw-loader’" class="headerlink" title="NPM 报错：Unexpected end of JSON input while parsing near ‘…”:”0.5.x”,”raw-loader’"></a>NPM 报错：Unexpected end of JSON input while parsing near ‘…”:”0.5.x”,”raw-loader’</h3><p>清楚缓存：npm cache clean –force</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端遇到的一些问题汇总…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="整理" scheme="https://shawdanon.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>jekyll</title>
    <link href="https://shawdanon.github.io/2017/jekyll-build/"/>
    <id>https://shawdanon.github.io/2017/jekyll-build/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2019-07-28T07:16:39.666Z</updated>
    
    <content type="html"><![CDATA[<p>jekyll 使用总结…</p><a id="more"></a><p>第二次搭建 jekyll 了，结果还是出错了些，不过也比第一次快了很多，还是记录一下吧。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、下载 ruby(本次用的<a href="https://rubyinstaller.org/downloads/" title="ruby下载链接" target="_blank" rel="noopener">rubyinstaller-2.4.1-2-x64</a>);<br>2、安装 ruby 会有三个选项：</p><ul><li>Add Ruby executables to your PATH</li><li>Associate .rb and .rbw files with this Ruby installation</li><li>Use UTF-8 as default external encoding</li></ul><p>都选上钩，接着下一步完成安装，打开命令行窗口输入<code>ruby -v</code>若看到<code>ruby 2.4.1p111 (2017-03-22 revision 58053) [x64-mingw32]</code>则表示安装成功。</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>1、打开命令行窗口，输入<code>gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</code>把国外镜像换成国内镜像，这样做可以使安装软件速度加快。<br>2、打开命令行窗口，输入<code>gem install bundler</code>安装依赖包 bundler，然后输入<code>gem install jekyll</code>安装 jekyll。<br>3、打开命令行窗口，输入<code>jekyll new 123</code>创建一个 jekyll 默认博客名字叫 123，如果有博客也需要创建一次，防止报错。<br>4、进入 123 文件目录（你的 jekyll 博客），打开命令行窗口（shift+鼠标右键，点击‘在此处打开命令窗口’），输入<code>jekyll serve</code>，看到<code>Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop.</code>然后就可以在服务器上浏览了,浏览地址：<a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jekyll 使用总结…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="博客" scheme="https://shawdanon.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="框架" scheme="https://shawdanon.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>判断IE版本的HTML语句</title>
    <link href="https://shawdanon.github.io/2017/something-of-ie/"/>
    <id>https://shawdanon.github.io/2017/something-of-ie/</id>
    <published>2017-08-13T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.293Z</updated>
    
    <content type="html"><![CDATA[<p>IE那些事…</p><a id="more"></a><p>经常用一些框架会看到类似注释一样的语句，例如bootstrap里的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>写了这个代码就能兼容IE8了。那么这些代码是什么意思呢？我们来看下面例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if !IE]&gt;除IE外都可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 6]&gt; 仅IE6可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 6]&gt; IE6以及IE6以下版本可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 6]&gt; IE6以及IE6以上版本可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 7]&gt; 仅IE7可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 7]&gt; IE7以及IE7以下版本可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 7]&gt; IE7以及IE7以上版本可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 8]&gt; 仅IE8可识别 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 9]&gt; 仅IE9可识别 &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>语句</th><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>!</td><td>[if !IE]</td><td>NOT运算符。这是摆立即在前面的功能，操作员，或子表达式扭转布尔表达式的意义。</td></tr><tr><td>lt</td><td>[if lt IE 5.5]</td><td>小于运算符。如果第一个参数小于第二个参数，则返回true。</td></tr><tr><td>lte</td><td>[if lte IE 6]</td><td>小于或等于运算。如果第一个参数是小于或等于第二个参数，则返回true。</td></tr><tr><td>gt</td><td>[if gt IE 5]</td><td>大于运算符。如果第一个参数大于第二个参数，则返回true。</td></tr><tr><td>gte</td><td>[if gte IE 7]</td><td>大于或等于运算。如果第一个参数是大于或等于第二个参数，则返回true。</td></tr><tr><td>()</td><td>[if !(IE 7)]</td><td>子表达式运营商。在与布尔运算符用于创建更复杂的表达式。</td></tr><tr><td>&amp;</td><td>[if (gt IE 5)&amp;(lt IE 7)]</td><td>AND运算符。如果所有的子表达式计算结果为true，返回true</td></tr><tr><td>&#124;</td><td>[if (IE 6)&#124;(IE 7)]</td><td>OR运算符。返回true，如果子表达式计算结果为true。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IE那些事…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://shawdanon.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>搬入jekyll</title>
    <link href="https://shawdanon.github.io/2017/move-into-jekyll/"/>
    <id>https://shawdanon.github.io/2017/move-into-jekyll/</id>
    <published>2017-08-08T16:00:00.000Z</published>
    <updated>2019-07-28T07:16:39.666Z</updated>
    
    <content type="html"><![CDATA[<p>换博客…</p><a id="more"></a><h2 id="原来的博客引擎"><a href="#原来的博客引擎" class="headerlink" title="原来的博客引擎"></a>原来的博客引擎</h2><p>WordPress</p><h2 id="现在的博客引擎"><a href="#现在的博客引擎" class="headerlink" title="现在的博客引擎"></a>现在的博客引擎</h2><p>jekyll</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于 WordPress 太笨重，每次写文章很麻烦，所以也不怎么去用它。后来在 github 上看到 jekyll，感觉很适合我，而且节省了服务器的费用。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>折腾了一两个月，断断续续的学习了 jekyll，对比了 hexo，最终还是选择了 jekyll。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>在网上看了很多 jekyll 的主题，也有不少我喜欢的主题，最终我还是没有用它们。我选择从头开始，自己写一个适合自己的主题。</p><p>今天开始我的 jekyll！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;换博客…&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://shawdanon.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="说说" scheme="https://shawdanon.github.io/tags/%E8%AF%B4%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>阅读</title>
    <link href="https://shawdanon.github.io/2017/read/"/>
    <id>https://shawdanon.github.io/2017/read/</id>
    <published>2017-05-06T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.293Z</updated>
    
    <content type="html"><![CDATA[<p>阅读《前端工程师的自我修养》感触…</p><a id="more"></a><p>刚读完，《前端工程师的自我修养》，感触颇深。</p><p>我还记得我第一次阅读是在小学时期，书籍是《淘气包马小跳》，当时应该还是很喜欢看的。</p><p>初中是开启我阅读的篇章，我记忆深刻的是《诛仙》。这是一本仙侠类小说，其中古风的文字描述、山海经的奇珍异兽、曲折的故事情节深深吸引了我。因为这本小说我开始对古风文学产生兴趣，因为这本小说我开始理解“善非善，恶非恶”，“鬼厉”之名也因此而来。</p><p>高中开始也一度为文学痴迷，读了些王小波、韩寒的小说。</p><p>大学就很少看书了，大多数信息获取都来自互联网。</p><p>如今又对读书产生了兴趣，感到好像发现了一片新的世界一样……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读《前端工程师的自我修养》感触…&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://shawdanon.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="说说" scheme="https://shawdanon.github.io/tags/%E8%AF%B4%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>程序员常用的网站</title>
    <link href="https://shawdanon.github.io/arrangement/used-website/"/>
    <id>https://shawdanon.github.io/arrangement/used-website/</id>
    <published>2016-09-17T16:00:00.000Z</published>
    <updated>2019-07-28T07:07:15.754Z</updated>
    
    <content type="html"><![CDATA[<p>一些常用网站记录…</p><a id="more"></a><h2 id="程序员通用"><a href="#程序员通用" class="headerlink" title="程序员通用"></a>程序员通用</h2><p>GitHub：一个面向开源及私有软件项目的托管平台。<br>stackoverflow：一个与程序相关的 IT 技术问答网站。<br>CSDN：中国最大的 IT 社区和服务平台。</p><h2 id="关于-web-开发者常用的网站（That’s-me）"><a href="#关于-web-开发者常用的网站（That’s-me）" class="headerlink" title="关于 web 开发者常用的网站（That’s me）"></a>关于 web 开发者常用的网站（That’s me）</h2><p>npm：一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。<br>bootstrap：来自 Twitter，目前很受欢迎的前端框架。<br>W3School：因特网上最大的 WEB 开发者资源。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些常用网站记录…&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://shawdanon.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="笔记" scheme="https://shawdanon.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="整理" scheme="https://shawdanon.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>大学回忆录</title>
    <link href="https://shawdanon.github.io/2016/university-memoirs/"/>
    <id>https://shawdanon.github.io/2016/university-memoirs/</id>
    <published>2016-07-02T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.292Z</updated>
    
    <content type="html"><![CDATA[<p>我的大学生涯总结…</p><a id="more"></a><p>我的大学生活就这么结束了，现在想想感觉也挺充实的。三年时光，匆匆而逝，其实承载着满满的回忆。</p><p>大一上期：</p><p>学习：<strong>程序设计基础：C 语言（VC、VS2012）、计算机组装、计算机导论</strong></p><p>项目：<strong>学生管理系统</strong></p><p>经历：由于高中流程图学得好加上有点 Pascal 基础，专业学得很轻松。大部分时间花在了社团上面，加入了校学生会.权益部、系学生会.CSC（原办公自动化服务队）、协会.计算机协会、图书馆.图书管理委员会，结交了不少朋友，印象比较深的是权益部师兄师姐们分享经验（虽然具体什么经验记不清了），还有在 CSC 和计算机协会 get 了很多系统维护类资源。在数码广场兼职推销电脑，好像还赚了不少钱，不过感觉有欺骗性质第二期就没干了。</p><p>大一下期</p><p>学习：<strong>Photoshop、网页制作技术、数据结构、办公自动化、flash、</strong>面向对象程序设计</p><p>项目：<strong>数据结构迷宫小程序（VC）、欢送视频、迎新视频</strong></p><p>经历：完全沉迷进了 Adobe 套件（PS、Pr、AE）、3dMax 和网页设计，在选修课认识了图书馆老师也学了不少网页布局知识，戴氏教育主页模仿巩固了 div+css 布局思想，各种海报传单设计，视频剪辑制作提升了我的设计水平。正好兼职认识的朋友自己开公司，帮忙设计名片和宣传单赚到第一笔技术费用。</p><p>大二上期</p><p>学习：<strong>C#语言程序设计、数据库原理（SQL Server）、</strong>Java 高级程序设计、计算机网络技术、电子商务应用及营销</p><p>项目：<strong>通讯录程序（C#）、仙剑类游戏官网、</strong>拓扑网络构建模型</p><p>经历：接触的第一个可视化编程语言，对这个特别感兴趣，自己还做了记事本、播放器、抽奖小程序，再次做网站提高了对 HTML 整体结构的了解。社团方面花的时间也比较多，毕竟担任计算机协会会长，系学生会 CSC 部长，图书管理委员会会长。俗话说的好，新官上任三把火，我也不列外，两眼一抹黑的我先从制度规则起手，参照过前几届的也收集过网上的制度资料，甚至了解过公司管理的一些资料，总算是拟定了方案。在这短短一学期内想了办了不少活动，提高了管理能力和沟通能力。</p><p>大二下期</p><p>学习：<strong>操作系统、大型数据库(Oracle) 、计算机系统与维护、Web 编程技术（ASP.NET）、</strong>商业沟通、软件工程、IT 产品及营销</p><p>项目：<strong>读书节大数据统计视频、教育网站（明智英才）、oracle 图书信息管理系统设计、数据库原理专周</strong></p><p>经历：学习了基于 ASP.NET 的动态网站搭建方法，还有数据库设计，提升了我数据库的知识。社团合作让我接触到了社会的人，学会了通过共赢的方式促进双方合作。另外还接到了第一个商务网站建设项目，教育类。真真切切感受到了线上搭建网站的流程，免费获得了 2 年空间一个。</p><p>大三上期</p><p>学习：移动编程技术、Java EE 技术及应用</p><p>项目：<strong>新闻管理网站（C#+ASP.NET+SQL sever）、雷霆战机小游戏（C#）、kamila 网站</strong></p><p>经历：实践了动态网站搭建，提高了数据库交互方面的知识，实践了雷霆战机小游戏，提高了面向对象编程思想。Kamila 网站，又是一个接到的项目，这个项目运用了 bootrap，然后也补了写 JavaScript 知识，总体提高很多。</p><p>大三下期</p><p>学习：实习</p><p>项目：<strong>毕业设计:赛事评分系统（C#+ASP.NET+SQL sever）、各类企业网站</strong></p><p>经历：在外包公司实习，学的多的算是 cms 了，怎么高速建站成了我的必修课。这次赛事评分系统的复杂程度提升了我后端知识，也让我正在踏入全栈的门槛。</p><p>这么一一列出来发现真的还是经历了不少事情，现在回首真还有点别样的感觉。我觉得我是幸运的，能在大学遇到了两个科任老师：Mr.张、Miss.王，还有图书馆的老师们，让我在大学学到了不少东西；能有一起共事的社团朋友们，让我大学更加丰富多彩。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的大学生涯总结…&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://shawdanon.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="https://shawdanon.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>建博之初</title>
    <link href="https://shawdanon.github.io/2016/Initial-heart/"/>
    <id>https://shawdanon.github.io/2016/Initial-heart/</id>
    <published>2016-04-21T16:00:00.000Z</published>
    <updated>2019-07-28T05:15:18.292Z</updated>
    
    <content type="html"><![CDATA[<p>兴致勃勃的建立博客…</p><a id="more"></a><p><strong>hello world！</strong>这个词语想必程序员都很熟悉，但是有多少人真正懂得这个词语的含义呢？我想今天我是明白了，那是内心的呼喊，那是对知识的渴望，那是对这个世界的敬畏，打出这两个单词真正让你心涌澎湃。</p><p>今天建立这个博客希望能够归纳知识，形成自己的知识体系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;兴致勃勃的建立博客…&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://shawdanon.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="说说" scheme="https://shawdanon.github.io/tags/%E8%AF%B4%E8%AF%B4/"/>
    
  </entry>
  
</feed>
